/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.log.simplelog;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-09-11")
public class SimpleLogService {

  public interface Iface extends SimpleLogServiceR.Iface {

    public void log(java.lang.String aLog) throws org.apache.thrift.TException;

    public void multiLog(java.util.List<java.lang.String> aLog) throws org.apache.thrift.TException;

    public void logOneway(java.lang.String aLog) throws org.apache.thrift.TException;

    public void multiLogOneway(java.util.List<java.lang.String> aLog) throws org.apache.thrift.TException;

    public void log2(java.lang.String category, java.lang.String aLog) throws org.apache.thrift.TException;

    public void logOneway2(java.lang.String category, java.lang.String aLog) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends SimpleLogServiceR .AsyncIface {

    public void log(java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void multiLog(java.util.List<java.lang.String> aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void logOneway(java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void multiLogOneway(java.util.List<java.lang.String> aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void log2(java.lang.String category, java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void logOneway2(java.lang.String category, java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends SimpleLogServiceR.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void log(java.lang.String aLog) throws org.apache.thrift.TException
    {
      send_log(aLog);
      recv_log();
    }

    public void send_log(java.lang.String aLog) throws org.apache.thrift.TException
    {
      log_args args = new log_args();
      args.setALog(aLog);
      sendBase("log", args);
    }

    public void recv_log() throws org.apache.thrift.TException
    {
      log_result result = new log_result();
      receiveBase(result, "log");
      return;
    }

    public void multiLog(java.util.List<java.lang.String> aLog) throws org.apache.thrift.TException
    {
      send_multiLog(aLog);
      recv_multiLog();
    }

    public void send_multiLog(java.util.List<java.lang.String> aLog) throws org.apache.thrift.TException
    {
      multiLog_args args = new multiLog_args();
      args.setALog(aLog);
      sendBase("multiLog", args);
    }

    public void recv_multiLog() throws org.apache.thrift.TException
    {
      multiLog_result result = new multiLog_result();
      receiveBase(result, "multiLog");
      return;
    }

    public void logOneway(java.lang.String aLog) throws org.apache.thrift.TException
    {
      send_logOneway(aLog);
    }

    public void send_logOneway(java.lang.String aLog) throws org.apache.thrift.TException
    {
      logOneway_args args = new logOneway_args();
      args.setALog(aLog);
      sendBaseOneway("logOneway", args);
    }

    public void multiLogOneway(java.util.List<java.lang.String> aLog) throws org.apache.thrift.TException
    {
      send_multiLogOneway(aLog);
    }

    public void send_multiLogOneway(java.util.List<java.lang.String> aLog) throws org.apache.thrift.TException
    {
      multiLogOneway_args args = new multiLogOneway_args();
      args.setALog(aLog);
      sendBaseOneway("multiLogOneway", args);
    }

    public void log2(java.lang.String category, java.lang.String aLog) throws org.apache.thrift.TException
    {
      send_log2(category, aLog);
      recv_log2();
    }

    public void send_log2(java.lang.String category, java.lang.String aLog) throws org.apache.thrift.TException
    {
      log2_args args = new log2_args();
      args.setCategory(category);
      args.setALog(aLog);
      sendBase("log2", args);
    }

    public void recv_log2() throws org.apache.thrift.TException
    {
      log2_result result = new log2_result();
      receiveBase(result, "log2");
      return;
    }

    public void logOneway2(java.lang.String category, java.lang.String aLog) throws org.apache.thrift.TException
    {
      send_logOneway2(category, aLog);
    }

    public void send_logOneway2(java.lang.String category, java.lang.String aLog) throws org.apache.thrift.TException
    {
      logOneway2_args args = new logOneway2_args();
      args.setCategory(category);
      args.setALog(aLog);
      sendBaseOneway("logOneway2", args);
    }

  }
  public static class AsyncClient extends SimpleLogServiceR.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void log(java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      log_call method_call = new log_call(aLog, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class log_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String aLog;
      public log_call(java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aLog = aLog;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("log", org.apache.thrift.protocol.TMessageType.CALL, 0));
        log_args args = new log_args();
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void multiLog(java.util.List<java.lang.String> aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiLog_call method_call = new multiLog_call(aLog, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiLog_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<java.lang.String> aLog;
      public multiLog_call(java.util.List<java.lang.String> aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aLog = aLog;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiLog_args args = new multiLog_args();
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void logOneway(java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logOneway_call method_call = new logOneway_call(aLog, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logOneway_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String aLog;
      public logOneway_call(java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.aLog = aLog;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logOneway", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        logOneway_args args = new logOneway_args();
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void multiLogOneway(java.util.List<java.lang.String> aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiLogOneway_call method_call = new multiLogOneway_call(aLog, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiLogOneway_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<java.lang.String> aLog;
      public multiLogOneway_call(java.util.List<java.lang.String> aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.aLog = aLog;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiLogOneway", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        multiLogOneway_args args = new multiLogOneway_args();
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void log2(java.lang.String category, java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      log2_call method_call = new log2_call(category, aLog, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class log2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String category;
      private java.lang.String aLog;
      public log2_call(java.lang.String category, java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.category = category;
        this.aLog = aLog;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("log2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        log2_args args = new log2_args();
        args.setCategory(category);
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void logOneway2(java.lang.String category, java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logOneway2_call method_call = new logOneway2_call(category, aLog, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logOneway2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String category;
      private java.lang.String aLog;
      public logOneway2_call(java.lang.String category, java.lang.String aLog, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.category = category;
        this.aLog = aLog;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logOneway2", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        logOneway2_args args = new logOneway2_args();
        args.setCategory(category);
        args.setALog(aLog);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends SimpleLogServiceR.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("log", new log());
      processMap.put("multiLog", new multiLog());
      processMap.put("logOneway", new logOneway());
      processMap.put("multiLogOneway", new multiLogOneway());
      processMap.put("log2", new log2());
      processMap.put("logOneway2", new logOneway2());
      return processMap;
    }

    public static class log<I extends Iface> extends org.apache.thrift.ProcessFunction<I, log_args> {
      public log() {
        super("log");
      }

      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      protected boolean isOneway() {
        return false;
      }

     
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public log_result getResult(I iface, log_args args) throws org.apache.thrift.TException {
        log_result result = new log_result();
        iface.log(args.aLog);
        return result;
      }
    }

    public static class multiLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiLog_args> {
      public multiLog() {
        super("multiLog");
      }

      public multiLog_args getEmptyArgsInstance() {
        return new multiLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

     
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public multiLog_result getResult(I iface, multiLog_args args) throws org.apache.thrift.TException {
        multiLog_result result = new multiLog_result();
        iface.multiLog(args.aLog);
        return result;
      }
    }

    public static class logOneway<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logOneway_args> {
      public logOneway() {
        super("logOneway");
      }

      public logOneway_args getEmptyArgsInstance() {
        return new logOneway_args();
      }

      protected boolean isOneway() {
        return true;
      }

//     
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, logOneway_args args) throws org.apache.thrift.TException {
        iface.logOneway(args.aLog);
        return null;
      }
    }

    public static class multiLogOneway<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiLogOneway_args> {
      public multiLogOneway() {
        super("multiLogOneway");
      }

      public multiLogOneway_args getEmptyArgsInstance() {
        return new multiLogOneway_args();
      }

      protected boolean isOneway() {
        return true;
      }

//     
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, multiLogOneway_args args) throws org.apache.thrift.TException {
        iface.multiLogOneway(args.aLog);
        return null;
      }
    }

    public static class log2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, log2_args> {
      public log2() {
        super("log2");
      }

      public log2_args getEmptyArgsInstance() {
        return new log2_args();
      }

      protected boolean isOneway() {
        return false;
      }

//     
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public log2_result getResult(I iface, log2_args args) throws org.apache.thrift.TException {
        log2_result result = new log2_result();
        iface.log2(args.category, args.aLog);
        return result;
      }
    }

    public static class logOneway2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logOneway2_args> {
      public logOneway2() {
        super("logOneway2");
      }

      public logOneway2_args getEmptyArgsInstance() {
        return new logOneway2_args();
      }

      protected boolean isOneway() {
        return true;
      }

     
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, logOneway2_args args) throws org.apache.thrift.TException {
        iface.logOneway2(args.category, args.aLog);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends SimpleLogServiceR.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("log", new log());
      processMap.put("multiLog", new multiLog());
      processMap.put("logOneway", new logOneway());
      processMap.put("multiLogOneway", new multiLogOneway());
      processMap.put("log2", new log2());
      processMap.put("logOneway2", new logOneway2());
      return processMap;
    }

    public static class log<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, log_args, Void> {
      public log() {
        super("log");
      }

      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            log_result result = new log_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            log_result result = new log_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, log_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.log(args.aLog,resultHandler);
      }
    }

    public static class multiLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multiLog_args, Void> {
      public multiLog() {
        super("multiLog");
      }

      public multiLog_args getEmptyArgsInstance() {
        return new multiLog_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            multiLog_result result = new multiLog_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            multiLog_result result = new multiLog_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multiLog_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.multiLog(args.aLog,resultHandler);
      }
    }

    public static class logOneway<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logOneway_args, Void> {
      public logOneway() {
        super("logOneway");
      }

      public logOneway_args getEmptyArgsInstance() {
        return new logOneway_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, logOneway_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logOneway(args.aLog,resultHandler);
      }
    }

    public static class multiLogOneway<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multiLogOneway_args, Void> {
      public multiLogOneway() {
        super("multiLogOneway");
      }

      public multiLogOneway_args getEmptyArgsInstance() {
        return new multiLogOneway_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, multiLogOneway_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.multiLogOneway(args.aLog,resultHandler);
      }
    }

    public static class log2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, log2_args, Void> {
      public log2() {
        super("log2");
      }

      public log2_args getEmptyArgsInstance() {
        return new log2_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            log2_result result = new log2_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            log2_result result = new log2_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, log2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.log2(args.category, args.aLog,resultHandler);
      }
    }

    public static class logOneway2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logOneway2_args, Void> {
      public logOneway2() {
        super("logOneway2");
      }

      public logOneway2_args getEmptyArgsInstance() {
        return new logOneway2_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, logOneway2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logOneway2(args.category, args.aLog,resultHandler);
      }
    }

  }

  public static class log_args implements org.apache.thrift.TBase<log_args, log_args._Fields>, java.io.Serializable, Cloneable, Comparable<log_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log_args");

    private static final org.apache.thrift.protocol.TField A_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("aLog", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log_argsTupleSchemeFactory();

    public java.lang.String aLog; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_LOG((short)1, "aLog");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_LOG, new org.apache.thrift.meta_data.FieldMetaData("aLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TLog")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_args.class, metaDataMap);
    }

    public log_args() {
    }

    public log_args(
      java.lang.String aLog)
    {
      this();
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_args(log_args other) {
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public log_args deepCopy() {
      return new log_args(this);
    }

   
    public void clear() {
      this.aLog = null;
    }

    public java.lang.String getALog() {
      return this.aLog;
    }

    public log_args setALog(java.lang.String aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been assigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case A_LOG:
        return getALog();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case A_LOG:
        return isSetALog();
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof log_args)
        return this.equals((log_args)that);
      return false;
    }

    public boolean equals(log_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetALog()) ? 131071 : 524287);
      if (isSetALog())
        hashCode = hashCode * 8191 + aLog.hashCode();

      return hashCode;
    }

   
    public int compareTo(log_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetALog()).compareTo(other.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aLog, other.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log_args(");
      boolean first = true;

      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log_argsStandardScheme getScheme() {
        return new log_argsStandardScheme();
      }
    }

    private static class log_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<log_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A_LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aLog = iprot.readString();
                struct.setALogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, log_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.aLog != null) {
          oprot.writeFieldBegin(A_LOG_FIELD_DESC);
          oprot.writeString(struct.aLog);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log_argsTupleScheme getScheme() {
        return new log_argsTupleScheme();
      }
    }

    private static class log_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<log_args> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetALog()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetALog()) {
          oprot.writeString(struct.aLog);
        }
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.aLog = iprot.readString();
          struct.setALogIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class log_result implements org.apache.thrift.TBase<log_result, log_result._Fields>, java.io.Serializable, Cloneable, Comparable<log_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_result.class, metaDataMap);
    }

    public log_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_result(log_result other) {
    }

    public log_result deepCopy() {
      return new log_result(this);
    }

   
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof log_result)
        return this.equals((log_result)that);
      return false;
    }

    public boolean equals(log_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

   
    public int compareTo(log_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log_resultStandardScheme getScheme() {
        return new log_resultStandardScheme();
      }
    }

    private static class log_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<log_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, log_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, log_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log_resultTupleScheme getScheme() {
        return new log_resultTupleScheme();
      }
    }

    private static class log_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<log_result> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, log_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, log_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiLog_args implements org.apache.thrift.TBase<multiLog_args, multiLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<multiLog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiLog_args");

    private static final org.apache.thrift.protocol.TField A_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("aLog", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiLog_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiLog_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> aLog; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_LOG((short)1, "aLog");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_LOG, new org.apache.thrift.meta_data.FieldMetaData("aLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "TLogList")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiLog_args.class, metaDataMap);
    }

    public multiLog_args() {
    }

    public multiLog_args(
      java.util.List<java.lang.String> aLog)
    {
      this();
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiLog_args(multiLog_args other) {
      if (other.isSetALog()) {
        java.util.List<java.lang.String> __this__aLog = new java.util.ArrayList<java.lang.String>(other.aLog);
        this.aLog = __this__aLog;
      }
    }

    public multiLog_args deepCopy() {
      return new multiLog_args(this);
    }

   
    public void clear() {
      this.aLog = null;
    }

    public int getALogSize() {
      return (this.aLog == null) ? 0 : this.aLog.size();
    }

    public java.util.Iterator<java.lang.String> getALogIterator() {
      return (this.aLog == null) ? null : this.aLog.iterator();
    }

    public void addToALog(java.lang.String elem) {
      if (this.aLog == null) {
        this.aLog = new java.util.ArrayList<java.lang.String>();
      }
      this.aLog.add(elem);
    }

    public java.util.List<java.lang.String> getALog() {
      return this.aLog;
    }

    public multiLog_args setALog(java.util.List<java.lang.String> aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been assigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case A_LOG:
        return getALog();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case A_LOG:
        return isSetALog();
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multiLog_args)
        return this.equals((multiLog_args)that);
      return false;
    }

    public boolean equals(multiLog_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetALog()) ? 131071 : 524287);
      if (isSetALog())
        hashCode = hashCode * 8191 + aLog.hashCode();

      return hashCode;
    }

   
    public int compareTo(multiLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetALog()).compareTo(other.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aLog, other.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multiLog_args(");
      boolean first = true;

      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiLog_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiLog_argsStandardScheme getScheme() {
        return new multiLog_argsStandardScheme();
      }
    }

    private static class multiLog_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A_LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.aLog = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.aLog.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setALogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.aLog != null) {
          oprot.writeFieldBegin(A_LOG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.aLog.size()));
            for (java.lang.String _iter3 : struct.aLog)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiLog_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiLog_argsTupleScheme getScheme() {
        return new multiLog_argsTupleScheme();
      }
    }

    private static class multiLog_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiLog_args> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, multiLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetALog()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetALog()) {
          {
            oprot.writeI32(struct.aLog.size());
            for (java.lang.String _iter4 : struct.aLog)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, multiLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.aLog = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.aLog.add(_elem6);
            }
          }
          struct.setALogIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiLog_result implements org.apache.thrift.TBase<multiLog_result, multiLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<multiLog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiLog_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiLog_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiLog_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiLog_result.class, metaDataMap);
    }

    public multiLog_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiLog_result(multiLog_result other) {
    }

    public multiLog_result deepCopy() {
      return new multiLog_result(this);
    }

   
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multiLog_result)
        return this.equals((multiLog_result)that);
      return false;
    }

    public boolean equals(multiLog_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

   
    public int compareTo(multiLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multiLog_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiLog_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiLog_resultStandardScheme getScheme() {
        return new multiLog_resultStandardScheme();
      }
    }

    private static class multiLog_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiLog_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiLog_resultTupleScheme getScheme() {
        return new multiLog_resultTupleScheme();
      }
    }

    private static class multiLog_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiLog_result> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, multiLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, multiLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logOneway_args implements org.apache.thrift.TBase<logOneway_args, logOneway_args._Fields>, java.io.Serializable, Cloneable, Comparable<logOneway_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logOneway_args");

    private static final org.apache.thrift.protocol.TField A_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("aLog", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logOneway_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logOneway_argsTupleSchemeFactory();

    public java.lang.String aLog; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_LOG((short)1, "aLog");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_LOG, new org.apache.thrift.meta_data.FieldMetaData("aLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TLog")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logOneway_args.class, metaDataMap);
    }

    public logOneway_args() {
    }

    public logOneway_args(
      java.lang.String aLog)
    {
      this();
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logOneway_args(logOneway_args other) {
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public logOneway_args deepCopy() {
      return new logOneway_args(this);
    }

   
    public void clear() {
      this.aLog = null;
    }

    public java.lang.String getALog() {
      return this.aLog;
    }

    public logOneway_args setALog(java.lang.String aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been assigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case A_LOG:
        return getALog();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case A_LOG:
        return isSetALog();
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logOneway_args)
        return this.equals((logOneway_args)that);
      return false;
    }

    public boolean equals(logOneway_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetALog()) ? 131071 : 524287);
      if (isSetALog())
        hashCode = hashCode * 8191 + aLog.hashCode();

      return hashCode;
    }

   
    public int compareTo(logOneway_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetALog()).compareTo(other.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aLog, other.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logOneway_args(");
      boolean first = true;

      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logOneway_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logOneway_argsStandardScheme getScheme() {
        return new logOneway_argsStandardScheme();
      }
    }

    private static class logOneway_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logOneway_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logOneway_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A_LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aLog = iprot.readString();
                struct.setALogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logOneway_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.aLog != null) {
          oprot.writeFieldBegin(A_LOG_FIELD_DESC);
          oprot.writeString(struct.aLog);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logOneway_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logOneway_argsTupleScheme getScheme() {
        return new logOneway_argsTupleScheme();
      }
    }

    private static class logOneway_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logOneway_args> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, logOneway_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetALog()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetALog()) {
          oprot.writeString(struct.aLog);
        }
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, logOneway_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.aLog = iprot.readString();
          struct.setALogIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiLogOneway_args implements org.apache.thrift.TBase<multiLogOneway_args, multiLogOneway_args._Fields>, java.io.Serializable, Cloneable, Comparable<multiLogOneway_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiLogOneway_args");

    private static final org.apache.thrift.protocol.TField A_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("aLog", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiLogOneway_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiLogOneway_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> aLog; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A_LOG((short)1, "aLog");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A_LOG, new org.apache.thrift.meta_data.FieldMetaData("aLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "TLogList")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiLogOneway_args.class, metaDataMap);
    }

    public multiLogOneway_args() {
    }

    public multiLogOneway_args(
      java.util.List<java.lang.String> aLog)
    {
      this();
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiLogOneway_args(multiLogOneway_args other) {
      if (other.isSetALog()) {
        java.util.List<java.lang.String> __this__aLog = new java.util.ArrayList<java.lang.String>(other.aLog);
        this.aLog = __this__aLog;
      }
    }

    public multiLogOneway_args deepCopy() {
      return new multiLogOneway_args(this);
    }

   
    public void clear() {
      this.aLog = null;
    }

    public int getALogSize() {
      return (this.aLog == null) ? 0 : this.aLog.size();
    }

    public java.util.Iterator<java.lang.String> getALogIterator() {
      return (this.aLog == null) ? null : this.aLog.iterator();
    }

    public void addToALog(java.lang.String elem) {
      if (this.aLog == null) {
        this.aLog = new java.util.ArrayList<java.lang.String>();
      }
      this.aLog.add(elem);
    }

    public java.util.List<java.lang.String> getALog() {
      return this.aLog;
    }

    public multiLogOneway_args setALog(java.util.List<java.lang.String> aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been assigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case A_LOG:
        return getALog();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case A_LOG:
        return isSetALog();
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multiLogOneway_args)
        return this.equals((multiLogOneway_args)that);
      return false;
    }

    public boolean equals(multiLogOneway_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetALog()) ? 131071 : 524287);
      if (isSetALog())
        hashCode = hashCode * 8191 + aLog.hashCode();

      return hashCode;
    }

   
    public int compareTo(multiLogOneway_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetALog()).compareTo(other.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aLog, other.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multiLogOneway_args(");
      boolean first = true;

      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiLogOneway_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiLogOneway_argsStandardScheme getScheme() {
        return new multiLogOneway_argsStandardScheme();
      }
    }

    private static class multiLogOneway_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiLogOneway_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiLogOneway_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A_LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.aLog = new java.util.ArrayList<java.lang.String>(_list8.size);
                  java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.aLog.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setALogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiLogOneway_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.aLog != null) {
          oprot.writeFieldBegin(A_LOG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.aLog.size()));
            for (java.lang.String _iter11 : struct.aLog)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiLogOneway_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiLogOneway_argsTupleScheme getScheme() {
        return new multiLogOneway_argsTupleScheme();
      }
    }

    private static class multiLogOneway_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiLogOneway_args> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, multiLogOneway_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetALog()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetALog()) {
          {
            oprot.writeI32(struct.aLog.size());
            for (java.lang.String _iter12 : struct.aLog)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, multiLogOneway_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.aLog = new java.util.ArrayList<java.lang.String>(_list13.size);
            java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.aLog.add(_elem14);
            }
          }
          struct.setALogIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class log2_args implements org.apache.thrift.TBase<log2_args, log2_args._Fields>, java.io.Serializable, Cloneable, Comparable<log2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log2_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField A_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("aLog", org.apache.thrift.protocol.TType.STRING, (short)21);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log2_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log2_argsTupleSchemeFactory();

    public java.lang.String category; // required
    public java.lang.String aLog; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY((short)1, "category"),
      A_LOG((short)21, "aLog");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY
            return CATEGORY;
          case 21: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_LOG, new org.apache.thrift.meta_data.FieldMetaData("aLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TLog")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log2_args.class, metaDataMap);
    }

    public log2_args() {
    }

    public log2_args(
      java.lang.String category,
      java.lang.String aLog)
    {
      this();
      this.category = category;
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log2_args(log2_args other) {
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public log2_args deepCopy() {
      return new log2_args(this);
    }

   
    public void clear() {
      this.category = null;
      this.aLog = null;
    }

    public java.lang.String getCategory() {
      return this.category;
    }

    public log2_args setCategory(java.lang.String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public java.lang.String getALog() {
      return this.aLog;
    }

    public log2_args setALog(java.lang.String aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been assigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((java.lang.String)value);
        }
        break;

      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY:
        return getCategory();

      case A_LOG:
        return getALog();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY:
        return isSetCategory();
      case A_LOG:
        return isSetALog();
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof log2_args)
        return this.equals((log2_args)that);
      return false;
    }

    public boolean equals(log2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
      if (isSetCategory())
        hashCode = hashCode * 8191 + category.hashCode();

      hashCode = hashCode * 8191 + ((isSetALog()) ? 131071 : 524287);
      if (isSetALog())
        hashCode = hashCode * 8191 + aLog.hashCode();

      return hashCode;
    }

   
    public int compareTo(log2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetALog()).compareTo(other.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aLog, other.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log2_args(");
      boolean first = true;

      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log2_argsStandardScheme getScheme() {
        return new log2_argsStandardScheme();
      }
    }

    private static class log2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<log2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, log2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 21: // A_LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aLog = iprot.readString();
                struct.setALogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, log2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
        if (struct.aLog != null) {
          oprot.writeFieldBegin(A_LOG_FIELD_DESC);
          oprot.writeString(struct.aLog);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log2_argsTupleScheme getScheme() {
        return new log2_argsTupleScheme();
      }
    }

    private static class log2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<log2_args> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, log2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCategory()) {
          optionals.set(0);
        }
        if (struct.isSetALog()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCategory()) {
          oprot.writeString(struct.category);
        }
        if (struct.isSetALog()) {
          oprot.writeString(struct.aLog);
        }
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, log2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.category = iprot.readString();
          struct.setCategoryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aLog = iprot.readString();
          struct.setALogIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class log2_result implements org.apache.thrift.TBase<log2_result, log2_result._Fields>, java.io.Serializable, Cloneable, Comparable<log2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log2_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log2_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log2_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log2_result.class, metaDataMap);
    }

    public log2_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log2_result(log2_result other) {
    }

    public log2_result deepCopy() {
      return new log2_result(this);
    }

   
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof log2_result)
        return this.equals((log2_result)that);
      return false;
    }

    public boolean equals(log2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

   
    public int compareTo(log2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log2_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log2_resultStandardScheme getScheme() {
        return new log2_resultStandardScheme();
      }
    }

    private static class log2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<log2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, log2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, log2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log2_resultTupleScheme getScheme() {
        return new log2_resultTupleScheme();
      }
    }

    private static class log2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<log2_result> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, log2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, log2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logOneway2_args implements org.apache.thrift.TBase<logOneway2_args, logOneway2_args._Fields>, java.io.Serializable, Cloneable, Comparable<logOneway2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logOneway2_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField A_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("aLog", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logOneway2_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logOneway2_argsTupleSchemeFactory();

    public java.lang.String category; // required
    public java.lang.String aLog; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY((short)1, "category"),
      A_LOG((short)2, "aLog");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY
            return CATEGORY;
          case 2: // A_LOG
            return A_LOG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.A_LOG, new org.apache.thrift.meta_data.FieldMetaData("aLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TLog")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logOneway2_args.class, metaDataMap);
    }

    public logOneway2_args() {
    }

    public logOneway2_args(
      java.lang.String category,
      java.lang.String aLog)
    {
      this();
      this.category = category;
      this.aLog = aLog;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logOneway2_args(logOneway2_args other) {
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetALog()) {
        this.aLog = other.aLog;
      }
    }

    public logOneway2_args deepCopy() {
      return new logOneway2_args(this);
    }

   
    public void clear() {
      this.category = null;
      this.aLog = null;
    }

    public java.lang.String getCategory() {
      return this.category;
    }

    public logOneway2_args setCategory(java.lang.String category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public java.lang.String getALog() {
      return this.aLog;
    }

    public logOneway2_args setALog(java.lang.String aLog) {
      this.aLog = aLog;
      return this;
    }

    public void unsetALog() {
      this.aLog = null;
    }

    /** Returns true if field aLog is set (has been assigned a value) and false otherwise */
    public boolean isSetALog() {
      return this.aLog != null;
    }

    public void setALogIsSet(boolean value) {
      if (!value) {
        this.aLog = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((java.lang.String)value);
        }
        break;

      case A_LOG:
        if (value == null) {
          unsetALog();
        } else {
          setALog((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY:
        return getCategory();

      case A_LOG:
        return getALog();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY:
        return isSetCategory();
      case A_LOG:
        return isSetALog();
      }
      throw new java.lang.IllegalStateException();
    }

   
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof logOneway2_args)
        return this.equals((logOneway2_args)that);
      return false;
    }

    public boolean equals(logOneway2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_aLog = true && this.isSetALog();
      boolean that_present_aLog = true && that.isSetALog();
      if (this_present_aLog || that_present_aLog) {
        if (!(this_present_aLog && that_present_aLog))
          return false;
        if (!this.aLog.equals(that.aLog))
          return false;
      }

      return true;
    }

   
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
      if (isSetCategory())
        hashCode = hashCode * 8191 + category.hashCode();

      hashCode = hashCode * 8191 + ((isSetALog()) ? 131071 : 524287);
      if (isSetALog())
        hashCode = hashCode * 8191 + aLog.hashCode();

      return hashCode;
    }

   
    public int compareTo(logOneway2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetALog()).compareTo(other.isSetALog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetALog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aLog, other.aLog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

   
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logOneway2_args(");
      boolean first = true;

      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aLog:");
      if (this.aLog == null) {
        sb.append("null");
      } else {
        sb.append(this.aLog);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logOneway2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logOneway2_argsStandardScheme getScheme() {
        return new logOneway2_argsStandardScheme();
      }
    }

    private static class logOneway2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logOneway2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logOneway2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.category = iprot.readString();
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // A_LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aLog = iprot.readString();
                struct.setALogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logOneway2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeString(struct.category);
          oprot.writeFieldEnd();
        }
        if (struct.aLog != null) {
          oprot.writeFieldBegin(A_LOG_FIELD_DESC);
          oprot.writeString(struct.aLog);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logOneway2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logOneway2_argsTupleScheme getScheme() {
        return new logOneway2_argsTupleScheme();
      }
    }

    private static class logOneway2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logOneway2_args> {

     
      public void write(org.apache.thrift.protocol.TProtocol prot, logOneway2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCategory()) {
          optionals.set(0);
        }
        if (struct.isSetALog()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCategory()) {
          oprot.writeString(struct.category);
        }
        if (struct.isSetALog()) {
          oprot.writeString(struct.aLog);
        }
      }

     
      public void read(org.apache.thrift.protocol.TProtocol prot, logOneway2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.category = iprot.readString();
          struct.setCategoryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aLog = iprot.readString();
          struct.setALogIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
