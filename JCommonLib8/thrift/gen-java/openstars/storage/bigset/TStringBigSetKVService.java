/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.storage.bigset;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class TStringBigSetKVService {

  public interface Iface {

    public TPutItemResult bsPutItem(java.lang.String bsName, TItem item) throws org.apache.thrift.TException;

    public boolean bsRemoveItem(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TExistedResult bsExisted(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TItemResult bsGetItem(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TItemSetResult bsGetSlice(java.lang.String bsName, int fromPos, int count) throws org.apache.thrift.TException;

    public TItemSetResult bsGetSliceFromItem(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException;

    public TItemSetResult bsGetSliceR(java.lang.String bsName, int fromPos, int count) throws org.apache.thrift.TException;

    public TItemSetResult bsGetSliceFromItemR(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException;

    public TItemSetResult bsRangeQuery(java.lang.String bsName, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException;

    public TMultiPutItemResult bsMultiPut(java.lang.String bsName, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException;

    public long getTotalCount(java.lang.String bsName) throws org.apache.thrift.TException;

    public long removeAll(java.lang.String bsName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void bsPutItem(java.lang.String bsName, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException;

    public void bsRemoveItem(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void bsExisted(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException;

    public void bsGetItem(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException;

    public void bsGetSlice(java.lang.String bsName, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsGetSliceFromItem(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsGetSliceR(java.lang.String bsName, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsGetSliceFromItemR(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsRangeQuery(java.lang.String bsName, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsMultiPut(java.lang.String bsName, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException;

    public void getTotalCount(java.lang.String bsName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void removeAll(java.lang.String bsName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TPutItemResult bsPutItem(java.lang.String bsName, TItem item) throws org.apache.thrift.TException
    {
      send_bsPutItem(bsName, item);
      return recv_bsPutItem();
    }

    public void send_bsPutItem(java.lang.String bsName, TItem item) throws org.apache.thrift.TException
    {
      bsPutItem_args args = new bsPutItem_args();
      args.setBsName(bsName);
      args.setItem(item);
      sendBase("bsPutItem", args);
    }

    public TPutItemResult recv_bsPutItem() throws org.apache.thrift.TException
    {
      bsPutItem_result result = new bsPutItem_result();
      receiveBase(result, "bsPutItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsPutItem failed: unknown result");
    }

    public boolean bsRemoveItem(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_bsRemoveItem(bsName, itemKey);
      return recv_bsRemoveItem();
    }

    public void send_bsRemoveItem(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      bsRemoveItem_args args = new bsRemoveItem_args();
      args.setBsName(bsName);
      args.setItemKey(itemKey);
      sendBase("bsRemoveItem", args);
    }

    public boolean recv_bsRemoveItem() throws org.apache.thrift.TException
    {
      bsRemoveItem_result result = new bsRemoveItem_result();
      receiveBase(result, "bsRemoveItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsRemoveItem failed: unknown result");
    }

    public TExistedResult bsExisted(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_bsExisted(bsName, itemKey);
      return recv_bsExisted();
    }

    public void send_bsExisted(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      bsExisted_args args = new bsExisted_args();
      args.setBsName(bsName);
      args.setItemKey(itemKey);
      sendBase("bsExisted", args);
    }

    public TExistedResult recv_bsExisted() throws org.apache.thrift.TException
    {
      bsExisted_result result = new bsExisted_result();
      receiveBase(result, "bsExisted");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsExisted failed: unknown result");
    }

    public TItemResult bsGetItem(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_bsGetItem(bsName, itemKey);
      return recv_bsGetItem();
    }

    public void send_bsGetItem(java.lang.String bsName, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      bsGetItem_args args = new bsGetItem_args();
      args.setBsName(bsName);
      args.setItemKey(itemKey);
      sendBase("bsGetItem", args);
    }

    public TItemResult recv_bsGetItem() throws org.apache.thrift.TException
    {
      bsGetItem_result result = new bsGetItem_result();
      receiveBase(result, "bsGetItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsGetItem failed: unknown result");
    }

    public TItemSetResult bsGetSlice(java.lang.String bsName, int fromPos, int count) throws org.apache.thrift.TException
    {
      send_bsGetSlice(bsName, fromPos, count);
      return recv_bsGetSlice();
    }

    public void send_bsGetSlice(java.lang.String bsName, int fromPos, int count) throws org.apache.thrift.TException
    {
      bsGetSlice_args args = new bsGetSlice_args();
      args.setBsName(bsName);
      args.setFromPos(fromPos);
      args.setCount(count);
      sendBase("bsGetSlice", args);
    }

    public TItemSetResult recv_bsGetSlice() throws org.apache.thrift.TException
    {
      bsGetSlice_result result = new bsGetSlice_result();
      receiveBase(result, "bsGetSlice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsGetSlice failed: unknown result");
    }

    public TItemSetResult bsGetSliceFromItem(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      send_bsGetSliceFromItem(bsName, fromKey, count);
      return recv_bsGetSliceFromItem();
    }

    public void send_bsGetSliceFromItem(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      bsGetSliceFromItem_args args = new bsGetSliceFromItem_args();
      args.setBsName(bsName);
      args.setFromKey(fromKey);
      args.setCount(count);
      sendBase("bsGetSliceFromItem", args);
    }

    public TItemSetResult recv_bsGetSliceFromItem() throws org.apache.thrift.TException
    {
      bsGetSliceFromItem_result result = new bsGetSliceFromItem_result();
      receiveBase(result, "bsGetSliceFromItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsGetSliceFromItem failed: unknown result");
    }

    public TItemSetResult bsGetSliceR(java.lang.String bsName, int fromPos, int count) throws org.apache.thrift.TException
    {
      send_bsGetSliceR(bsName, fromPos, count);
      return recv_bsGetSliceR();
    }

    public void send_bsGetSliceR(java.lang.String bsName, int fromPos, int count) throws org.apache.thrift.TException
    {
      bsGetSliceR_args args = new bsGetSliceR_args();
      args.setBsName(bsName);
      args.setFromPos(fromPos);
      args.setCount(count);
      sendBase("bsGetSliceR", args);
    }

    public TItemSetResult recv_bsGetSliceR() throws org.apache.thrift.TException
    {
      bsGetSliceR_result result = new bsGetSliceR_result();
      receiveBase(result, "bsGetSliceR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsGetSliceR failed: unknown result");
    }

    public TItemSetResult bsGetSliceFromItemR(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      send_bsGetSliceFromItemR(bsName, fromKey, count);
      return recv_bsGetSliceFromItemR();
    }

    public void send_bsGetSliceFromItemR(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      bsGetSliceFromItemR_args args = new bsGetSliceFromItemR_args();
      args.setBsName(bsName);
      args.setFromKey(fromKey);
      args.setCount(count);
      sendBase("bsGetSliceFromItemR", args);
    }

    public TItemSetResult recv_bsGetSliceFromItemR() throws org.apache.thrift.TException
    {
      bsGetSliceFromItemR_result result = new bsGetSliceFromItemR_result();
      receiveBase(result, "bsGetSliceFromItemR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsGetSliceFromItemR failed: unknown result");
    }

    public TItemSetResult bsRangeQuery(java.lang.String bsName, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException
    {
      send_bsRangeQuery(bsName, startKey, endKey);
      return recv_bsRangeQuery();
    }

    public void send_bsRangeQuery(java.lang.String bsName, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException
    {
      bsRangeQuery_args args = new bsRangeQuery_args();
      args.setBsName(bsName);
      args.setStartKey(startKey);
      args.setEndKey(endKey);
      sendBase("bsRangeQuery", args);
    }

    public TItemSetResult recv_bsRangeQuery() throws org.apache.thrift.TException
    {
      bsRangeQuery_result result = new bsRangeQuery_result();
      receiveBase(result, "bsRangeQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsRangeQuery failed: unknown result");
    }

    public TMultiPutItemResult bsMultiPut(java.lang.String bsName, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException
    {
      send_bsMultiPut(bsName, setData, getAddedItems, getReplacedItems);
      return recv_bsMultiPut();
    }

    public void send_bsMultiPut(java.lang.String bsName, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException
    {
      bsMultiPut_args args = new bsMultiPut_args();
      args.setBsName(bsName);
      args.setSetData(setData);
      args.setGetAddedItems(getAddedItems);
      args.setGetReplacedItems(getReplacedItems);
      sendBase("bsMultiPut", args);
    }

    public TMultiPutItemResult recv_bsMultiPut() throws org.apache.thrift.TException
    {
      bsMultiPut_result result = new bsMultiPut_result();
      receiveBase(result, "bsMultiPut");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsMultiPut failed: unknown result");
    }

    public long getTotalCount(java.lang.String bsName) throws org.apache.thrift.TException
    {
      send_getTotalCount(bsName);
      return recv_getTotalCount();
    }

    public void send_getTotalCount(java.lang.String bsName) throws org.apache.thrift.TException
    {
      getTotalCount_args args = new getTotalCount_args();
      args.setBsName(bsName);
      sendBase("getTotalCount", args);
    }

    public long recv_getTotalCount() throws org.apache.thrift.TException
    {
      getTotalCount_result result = new getTotalCount_result();
      receiveBase(result, "getTotalCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalCount failed: unknown result");
    }

    public long removeAll(java.lang.String bsName) throws org.apache.thrift.TException
    {
      send_removeAll(bsName);
      return recv_removeAll();
    }

    public void send_removeAll(java.lang.String bsName) throws org.apache.thrift.TException
    {
      removeAll_args args = new removeAll_args();
      args.setBsName(bsName);
      sendBase("removeAll", args);
    }

    public long recv_removeAll() throws org.apache.thrift.TException
    {
      removeAll_result result = new removeAll_result();
      receiveBase(result, "removeAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeAll failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void bsPutItem(java.lang.String bsName, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsPutItem_call method_call = new bsPutItem_call(bsName, item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsPutItem_call extends org.apache.thrift.async.TAsyncMethodCall<TPutItemResult> {
      private java.lang.String bsName;
      private TItem item;
      public bsPutItem_call(java.lang.String bsName, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.item = item;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsPutItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsPutItem_args args = new bsPutItem_args();
        args.setBsName(bsName);
        args.setItem(item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPutItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsPutItem();
      }
    }

    public void bsRemoveItem(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsRemoveItem_call method_call = new bsRemoveItem_call(bsName, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsRemoveItem_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String bsName;
      private java.nio.ByteBuffer itemKey;
      public bsRemoveItem_call(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsRemoveItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsRemoveItem_args args = new bsRemoveItem_args();
        args.setBsName(bsName);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsRemoveItem();
      }
    }

    public void bsExisted(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsExisted_call method_call = new bsExisted_call(bsName, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsExisted_call extends org.apache.thrift.async.TAsyncMethodCall<TExistedResult> {
      private java.lang.String bsName;
      private java.nio.ByteBuffer itemKey;
      public bsExisted_call(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsExisted", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsExisted_args args = new bsExisted_args();
        args.setBsName(bsName);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TExistedResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsExisted();
      }
    }

    public void bsGetItem(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsGetItem_call method_call = new bsGetItem_call(bsName, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsGetItem_call extends org.apache.thrift.async.TAsyncMethodCall<TItemResult> {
      private java.lang.String bsName;
      private java.nio.ByteBuffer itemKey;
      public bsGetItem_call(java.lang.String bsName, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsGetItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsGetItem_args args = new bsGetItem_args();
        args.setBsName(bsName);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsGetItem();
      }
    }

    public void bsGetSlice(java.lang.String bsName, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsGetSlice_call method_call = new bsGetSlice_call(bsName, fromPos, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsGetSlice_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private java.lang.String bsName;
      private int fromPos;
      private int count;
      public bsGetSlice_call(java.lang.String bsName, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.fromPos = fromPos;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsGetSlice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsGetSlice_args args = new bsGetSlice_args();
        args.setBsName(bsName);
        args.setFromPos(fromPos);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsGetSlice();
      }
    }

    public void bsGetSliceFromItem(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsGetSliceFromItem_call method_call = new bsGetSliceFromItem_call(bsName, fromKey, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsGetSliceFromItem_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private java.lang.String bsName;
      private java.nio.ByteBuffer fromKey;
      private int count;
      public bsGetSliceFromItem_call(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.fromKey = fromKey;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsGetSliceFromItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsGetSliceFromItem_args args = new bsGetSliceFromItem_args();
        args.setBsName(bsName);
        args.setFromKey(fromKey);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsGetSliceFromItem();
      }
    }

    public void bsGetSliceR(java.lang.String bsName, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsGetSliceR_call method_call = new bsGetSliceR_call(bsName, fromPos, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsGetSliceR_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private java.lang.String bsName;
      private int fromPos;
      private int count;
      public bsGetSliceR_call(java.lang.String bsName, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.fromPos = fromPos;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsGetSliceR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsGetSliceR_args args = new bsGetSliceR_args();
        args.setBsName(bsName);
        args.setFromPos(fromPos);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsGetSliceR();
      }
    }

    public void bsGetSliceFromItemR(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsGetSliceFromItemR_call method_call = new bsGetSliceFromItemR_call(bsName, fromKey, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsGetSliceFromItemR_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private java.lang.String bsName;
      private java.nio.ByteBuffer fromKey;
      private int count;
      public bsGetSliceFromItemR_call(java.lang.String bsName, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.fromKey = fromKey;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsGetSliceFromItemR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsGetSliceFromItemR_args args = new bsGetSliceFromItemR_args();
        args.setBsName(bsName);
        args.setFromKey(fromKey);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsGetSliceFromItemR();
      }
    }

    public void bsRangeQuery(java.lang.String bsName, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsRangeQuery_call method_call = new bsRangeQuery_call(bsName, startKey, endKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsRangeQuery_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private java.lang.String bsName;
      private java.nio.ByteBuffer startKey;
      private java.nio.ByteBuffer endKey;
      public bsRangeQuery_call(java.lang.String bsName, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.startKey = startKey;
        this.endKey = endKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsRangeQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsRangeQuery_args args = new bsRangeQuery_args();
        args.setBsName(bsName);
        args.setStartKey(startKey);
        args.setEndKey(endKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsRangeQuery();
      }
    }

    public void bsMultiPut(java.lang.String bsName, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsMultiPut_call method_call = new bsMultiPut_call(bsName, setData, getAddedItems, getReplacedItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsMultiPut_call extends org.apache.thrift.async.TAsyncMethodCall<TMultiPutItemResult> {
      private java.lang.String bsName;
      private TItemSet setData;
      private boolean getAddedItems;
      private boolean getReplacedItems;
      public bsMultiPut_call(java.lang.String bsName, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
        this.setData = setData;
        this.getAddedItems = getAddedItems;
        this.getReplacedItems = getReplacedItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsMultiPut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsMultiPut_args args = new bsMultiPut_args();
        args.setBsName(bsName);
        args.setSetData(setData);
        args.setGetAddedItems(getAddedItems);
        args.setGetReplacedItems(getReplacedItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMultiPutItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsMultiPut();
      }
    }

    public void getTotalCount(java.lang.String bsName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalCount_call method_call = new getTotalCount_call(bsName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private java.lang.String bsName;
      public getTotalCount_call(java.lang.String bsName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalCount_args args = new getTotalCount_args();
        args.setBsName(bsName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalCount();
      }
    }

    public void removeAll(java.lang.String bsName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeAll_call method_call = new removeAll_call(bsName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeAll_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private java.lang.String bsName;
      public removeAll_call(java.lang.String bsName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bsName = bsName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeAll_args args = new removeAll_args();
        args.setBsName(bsName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeAll();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("bsPutItem", new bsPutItem());
      processMap.put("bsRemoveItem", new bsRemoveItem());
      processMap.put("bsExisted", new bsExisted());
      processMap.put("bsGetItem", new bsGetItem());
      processMap.put("bsGetSlice", new bsGetSlice());
      processMap.put("bsGetSliceFromItem", new bsGetSliceFromItem());
      processMap.put("bsGetSliceR", new bsGetSliceR());
      processMap.put("bsGetSliceFromItemR", new bsGetSliceFromItemR());
      processMap.put("bsRangeQuery", new bsRangeQuery());
      processMap.put("bsMultiPut", new bsMultiPut());
      processMap.put("getTotalCount", new getTotalCount());
      processMap.put("removeAll", new removeAll());
      return processMap;
    }

    public static class bsPutItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsPutItem_args> {
      public bsPutItem() {
        super("bsPutItem");
      }

      public bsPutItem_args getEmptyArgsInstance() {
        return new bsPutItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsPutItem_result getResult(I iface, bsPutItem_args args) throws org.apache.thrift.TException {
        bsPutItem_result result = new bsPutItem_result();
        result.success = iface.bsPutItem(args.bsName, args.item);
        return result;
      }
    }

    public static class bsRemoveItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsRemoveItem_args> {
      public bsRemoveItem() {
        super("bsRemoveItem");
      }

      public bsRemoveItem_args getEmptyArgsInstance() {
        return new bsRemoveItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsRemoveItem_result getResult(I iface, bsRemoveItem_args args) throws org.apache.thrift.TException {
        bsRemoveItem_result result = new bsRemoveItem_result();
        result.success = iface.bsRemoveItem(args.bsName, args.itemKey);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class bsExisted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsExisted_args> {
      public bsExisted() {
        super("bsExisted");
      }

      public bsExisted_args getEmptyArgsInstance() {
        return new bsExisted_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsExisted_result getResult(I iface, bsExisted_args args) throws org.apache.thrift.TException {
        bsExisted_result result = new bsExisted_result();
        result.success = iface.bsExisted(args.bsName, args.itemKey);
        return result;
      }
    }

    public static class bsGetItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsGetItem_args> {
      public bsGetItem() {
        super("bsGetItem");
      }

      public bsGetItem_args getEmptyArgsInstance() {
        return new bsGetItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsGetItem_result getResult(I iface, bsGetItem_args args) throws org.apache.thrift.TException {
        bsGetItem_result result = new bsGetItem_result();
        result.success = iface.bsGetItem(args.bsName, args.itemKey);
        return result;
      }
    }

    public static class bsGetSlice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsGetSlice_args> {
      public bsGetSlice() {
        super("bsGetSlice");
      }

      public bsGetSlice_args getEmptyArgsInstance() {
        return new bsGetSlice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsGetSlice_result getResult(I iface, bsGetSlice_args args) throws org.apache.thrift.TException {
        bsGetSlice_result result = new bsGetSlice_result();
        result.success = iface.bsGetSlice(args.bsName, args.fromPos, args.count);
        return result;
      }
    }

    public static class bsGetSliceFromItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsGetSliceFromItem_args> {
      public bsGetSliceFromItem() {
        super("bsGetSliceFromItem");
      }

      public bsGetSliceFromItem_args getEmptyArgsInstance() {
        return new bsGetSliceFromItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsGetSliceFromItem_result getResult(I iface, bsGetSliceFromItem_args args) throws org.apache.thrift.TException {
        bsGetSliceFromItem_result result = new bsGetSliceFromItem_result();
        result.success = iface.bsGetSliceFromItem(args.bsName, args.fromKey, args.count);
        return result;
      }
    }

    public static class bsGetSliceR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsGetSliceR_args> {
      public bsGetSliceR() {
        super("bsGetSliceR");
      }

      public bsGetSliceR_args getEmptyArgsInstance() {
        return new bsGetSliceR_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsGetSliceR_result getResult(I iface, bsGetSliceR_args args) throws org.apache.thrift.TException {
        bsGetSliceR_result result = new bsGetSliceR_result();
        result.success = iface.bsGetSliceR(args.bsName, args.fromPos, args.count);
        return result;
      }
    }

    public static class bsGetSliceFromItemR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsGetSliceFromItemR_args> {
      public bsGetSliceFromItemR() {
        super("bsGetSliceFromItemR");
      }

      public bsGetSliceFromItemR_args getEmptyArgsInstance() {
        return new bsGetSliceFromItemR_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsGetSliceFromItemR_result getResult(I iface, bsGetSliceFromItemR_args args) throws org.apache.thrift.TException {
        bsGetSliceFromItemR_result result = new bsGetSliceFromItemR_result();
        result.success = iface.bsGetSliceFromItemR(args.bsName, args.fromKey, args.count);
        return result;
      }
    }

    public static class bsRangeQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsRangeQuery_args> {
      public bsRangeQuery() {
        super("bsRangeQuery");
      }

      public bsRangeQuery_args getEmptyArgsInstance() {
        return new bsRangeQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsRangeQuery_result getResult(I iface, bsRangeQuery_args args) throws org.apache.thrift.TException {
        bsRangeQuery_result result = new bsRangeQuery_result();
        result.success = iface.bsRangeQuery(args.bsName, args.startKey, args.endKey);
        return result;
      }
    }

    public static class bsMultiPut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsMultiPut_args> {
      public bsMultiPut() {
        super("bsMultiPut");
      }

      public bsMultiPut_args getEmptyArgsInstance() {
        return new bsMultiPut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsMultiPut_result getResult(I iface, bsMultiPut_args args) throws org.apache.thrift.TException {
        bsMultiPut_result result = new bsMultiPut_result();
        result.success = iface.bsMultiPut(args.bsName, args.setData, args.getAddedItems, args.getReplacedItems);
        return result;
      }
    }

    public static class getTotalCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalCount_args> {
      public getTotalCount() {
        super("getTotalCount");
      }

      public getTotalCount_args getEmptyArgsInstance() {
        return new getTotalCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getTotalCount_result getResult(I iface, getTotalCount_args args) throws org.apache.thrift.TException {
        getTotalCount_result result = new getTotalCount_result();
        result.success = iface.getTotalCount(args.bsName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class removeAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAll_args> {
      public removeAll() {
        super("removeAll");
      }

      public removeAll_args getEmptyArgsInstance() {
        return new removeAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public removeAll_result getResult(I iface, removeAll_args args) throws org.apache.thrift.TException {
        removeAll_result result = new removeAll_result();
        result.success = iface.removeAll(args.bsName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("bsPutItem", new bsPutItem());
      processMap.put("bsRemoveItem", new bsRemoveItem());
      processMap.put("bsExisted", new bsExisted());
      processMap.put("bsGetItem", new bsGetItem());
      processMap.put("bsGetSlice", new bsGetSlice());
      processMap.put("bsGetSliceFromItem", new bsGetSliceFromItem());
      processMap.put("bsGetSliceR", new bsGetSliceR());
      processMap.put("bsGetSliceFromItemR", new bsGetSliceFromItemR());
      processMap.put("bsRangeQuery", new bsRangeQuery());
      processMap.put("bsMultiPut", new bsMultiPut());
      processMap.put("getTotalCount", new getTotalCount());
      processMap.put("removeAll", new removeAll());
      return processMap;
    }

    public static class bsPutItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsPutItem_args, TPutItemResult> {
      public bsPutItem() {
        super("bsPutItem");
      }

      public bsPutItem_args getEmptyArgsInstance() {
        return new bsPutItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPutItemResult>() { 
          public void onComplete(TPutItemResult o) {
            bsPutItem_result result = new bsPutItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsPutItem_result result = new bsPutItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsPutItem_args args, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsPutItem(args.bsName, args.item,resultHandler);
      }
    }

    public static class bsRemoveItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsRemoveItem_args, java.lang.Boolean> {
      public bsRemoveItem() {
        super("bsRemoveItem");
      }

      public bsRemoveItem_args getEmptyArgsInstance() {
        return new bsRemoveItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            bsRemoveItem_result result = new bsRemoveItem_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsRemoveItem_result result = new bsRemoveItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsRemoveItem_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.bsRemoveItem(args.bsName, args.itemKey,resultHandler);
      }
    }

    public static class bsExisted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsExisted_args, TExistedResult> {
      public bsExisted() {
        super("bsExisted");
      }

      public bsExisted_args getEmptyArgsInstance() {
        return new bsExisted_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TExistedResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TExistedResult>() { 
          public void onComplete(TExistedResult o) {
            bsExisted_result result = new bsExisted_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsExisted_result result = new bsExisted_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsExisted_args args, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsExisted(args.bsName, args.itemKey,resultHandler);
      }
    }

    public static class bsGetItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsGetItem_args, TItemResult> {
      public bsGetItem() {
        super("bsGetItem");
      }

      public bsGetItem_args getEmptyArgsInstance() {
        return new bsGetItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemResult>() { 
          public void onComplete(TItemResult o) {
            bsGetItem_result result = new bsGetItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsGetItem_result result = new bsGetItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsGetItem_args args, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsGetItem(args.bsName, args.itemKey,resultHandler);
      }
    }

    public static class bsGetSlice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsGetSlice_args, TItemSetResult> {
      public bsGetSlice() {
        super("bsGetSlice");
      }

      public bsGetSlice_args getEmptyArgsInstance() {
        return new bsGetSlice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsGetSlice_result result = new bsGetSlice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsGetSlice_result result = new bsGetSlice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsGetSlice_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsGetSlice(args.bsName, args.fromPos, args.count,resultHandler);
      }
    }

    public static class bsGetSliceFromItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsGetSliceFromItem_args, TItemSetResult> {
      public bsGetSliceFromItem() {
        super("bsGetSliceFromItem");
      }

      public bsGetSliceFromItem_args getEmptyArgsInstance() {
        return new bsGetSliceFromItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsGetSliceFromItem_result result = new bsGetSliceFromItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsGetSliceFromItem_result result = new bsGetSliceFromItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsGetSliceFromItem_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsGetSliceFromItem(args.bsName, args.fromKey, args.count,resultHandler);
      }
    }

    public static class bsGetSliceR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsGetSliceR_args, TItemSetResult> {
      public bsGetSliceR() {
        super("bsGetSliceR");
      }

      public bsGetSliceR_args getEmptyArgsInstance() {
        return new bsGetSliceR_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsGetSliceR_result result = new bsGetSliceR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsGetSliceR_result result = new bsGetSliceR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsGetSliceR_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsGetSliceR(args.bsName, args.fromPos, args.count,resultHandler);
      }
    }

    public static class bsGetSliceFromItemR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsGetSliceFromItemR_args, TItemSetResult> {
      public bsGetSliceFromItemR() {
        super("bsGetSliceFromItemR");
      }

      public bsGetSliceFromItemR_args getEmptyArgsInstance() {
        return new bsGetSliceFromItemR_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsGetSliceFromItemR_result result = new bsGetSliceFromItemR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsGetSliceFromItemR_result result = new bsGetSliceFromItemR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsGetSliceFromItemR_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsGetSliceFromItemR(args.bsName, args.fromKey, args.count,resultHandler);
      }
    }

    public static class bsRangeQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsRangeQuery_args, TItemSetResult> {
      public bsRangeQuery() {
        super("bsRangeQuery");
      }

      public bsRangeQuery_args getEmptyArgsInstance() {
        return new bsRangeQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsRangeQuery_result result = new bsRangeQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsRangeQuery_result result = new bsRangeQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsRangeQuery_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsRangeQuery(args.bsName, args.startKey, args.endKey,resultHandler);
      }
    }

    public static class bsMultiPut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsMultiPut_args, TMultiPutItemResult> {
      public bsMultiPut() {
        super("bsMultiPut");
      }

      public bsMultiPut_args getEmptyArgsInstance() {
        return new bsMultiPut_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult>() { 
          public void onComplete(TMultiPutItemResult o) {
            bsMultiPut_result result = new bsMultiPut_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsMultiPut_result result = new bsMultiPut_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsMultiPut_args args, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsMultiPut(args.bsName, args.setData, args.getAddedItems, args.getReplacedItems,resultHandler);
      }
    }

    public static class getTotalCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalCount_args, java.lang.Long> {
      public getTotalCount() {
        super("getTotalCount");
      }

      public getTotalCount_args getEmptyArgsInstance() {
        return new getTotalCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            getTotalCount_result result = new getTotalCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTotalCount_result result = new getTotalCount_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTotalCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getTotalCount(args.bsName,resultHandler);
      }
    }

    public static class removeAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeAll_args, java.lang.Long> {
      public removeAll() {
        super("removeAll");
      }

      public removeAll_args getEmptyArgsInstance() {
        return new removeAll_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            removeAll_result result = new removeAll_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeAll_result result = new removeAll_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeAll_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.removeAll(args.bsName,resultHandler);
      }
    }

  }

  public static class bsPutItem_args implements org.apache.thrift.TBase<bsPutItem_args, bsPutItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsPutItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsPutItem_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsPutItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsPutItem_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public @org.apache.thrift.annotation.Nullable TItem item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      ITEM((short)2, "item");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // ITEM
            return ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItem.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsPutItem_args.class, metaDataMap);
    }

    public bsPutItem_args() {
    }

    public bsPutItem_args(
      java.lang.String bsName,
      TItem item)
    {
      this();
      this.bsName = bsName;
      this.item = item;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsPutItem_args(bsPutItem_args other) {
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      if (other.isSetItem()) {
        this.item = new TItem(other.item);
      }
    }

    public bsPutItem_args deepCopy() {
      return new bsPutItem_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      this.item = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsPutItem_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TItem getItem() {
      return this.item;
    }

    public bsPutItem_args setItem(@org.apache.thrift.annotation.Nullable TItem item) {
      this.item = item;
      return this;
    }

    public void unsetItem() {
      this.item = null;
    }

    /** Returns true if field item is set (has been assigned a value) and false otherwise */
    public boolean isSetItem() {
      return this.item != null;
    }

    public void setItemIsSet(boolean value) {
      if (!value) {
        this.item = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case ITEM:
        if (value == null) {
          unsetItem();
        } else {
          setItem((TItem)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case ITEM:
        return getItem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case ITEM:
        return isSetItem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsPutItem_args)
        return this.equals((bsPutItem_args)that);
      return false;
    }

    public boolean equals(bsPutItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_item = true && this.isSetItem();
      boolean that_present_item = true && that.isSetItem();
      if (this_present_item || that_present_item) {
        if (!(this_present_item && that_present_item))
          return false;
        if (!this.item.equals(that.item))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + ((isSetItem()) ? 131071 : 524287);
      if (isSetItem())
        hashCode = hashCode * 8191 + item.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsPutItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsPutItem_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("item:");
      if (this.item == null) {
        sb.append("null");
      } else {
        sb.append(this.item);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (item != null) {
        item.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsPutItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsPutItem_argsStandardScheme getScheme() {
        return new bsPutItem_argsStandardScheme();
      }
    }

    private static class bsPutItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsPutItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsPutItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.item = new TItem();
                struct.item.read(iprot);
                struct.setItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsPutItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        if (struct.item != null) {
          oprot.writeFieldBegin(ITEM_FIELD_DESC);
          struct.item.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsPutItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsPutItem_argsTupleScheme getScheme() {
        return new bsPutItem_argsTupleScheme();
      }
    }

    private static class bsPutItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsPutItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsPutItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetItem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetItem()) {
          struct.item.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsPutItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item = new TItem();
          struct.item.read(iprot);
          struct.setItemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsPutItem_result implements org.apache.thrift.TBase<bsPutItem_result, bsPutItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsPutItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsPutItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsPutItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsPutItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TPutItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPutItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsPutItem_result.class, metaDataMap);
    }

    public bsPutItem_result() {
    }

    public bsPutItem_result(
      TPutItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsPutItem_result(bsPutItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPutItemResult(other.success);
      }
    }

    public bsPutItem_result deepCopy() {
      return new bsPutItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TPutItemResult getSuccess() {
      return this.success;
    }

    public bsPutItem_result setSuccess(@org.apache.thrift.annotation.Nullable TPutItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPutItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsPutItem_result)
        return this.equals((bsPutItem_result)that);
      return false;
    }

    public boolean equals(bsPutItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsPutItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsPutItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsPutItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsPutItem_resultStandardScheme getScheme() {
        return new bsPutItem_resultStandardScheme();
      }
    }

    private static class bsPutItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsPutItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsPutItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPutItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsPutItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsPutItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsPutItem_resultTupleScheme getScheme() {
        return new bsPutItem_resultTupleScheme();
      }
    }

    private static class bsPutItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsPutItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsPutItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsPutItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPutItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsRemoveItem_args implements org.apache.thrift.TBase<bsRemoveItem_args, bsRemoveItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsRemoveItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsRemoveItem_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsRemoveItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsRemoveItem_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsRemoveItem_args.class, metaDataMap);
    }

    public bsRemoveItem_args() {
    }

    public bsRemoveItem_args(
      java.lang.String bsName,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.bsName = bsName;
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsRemoveItem_args(bsRemoveItem_args other) {
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public bsRemoveItem_args deepCopy() {
      return new bsRemoveItem_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      this.itemKey = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsRemoveItem_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public bsRemoveItem_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public bsRemoveItem_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsRemoveItem_args)
        return this.equals((bsRemoveItem_args)that);
      return false;
    }

    public boolean equals(bsRemoveItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsRemoveItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsRemoveItem_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsRemoveItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsRemoveItem_argsStandardScheme getScheme() {
        return new bsRemoveItem_argsStandardScheme();
      }
    }

    private static class bsRemoveItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsRemoveItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsRemoveItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsRemoveItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsRemoveItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsRemoveItem_argsTupleScheme getScheme() {
        return new bsRemoveItem_argsTupleScheme();
      }
    }

    private static class bsRemoveItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsRemoveItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsRemoveItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsRemoveItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsRemoveItem_result implements org.apache.thrift.TBase<bsRemoveItem_result, bsRemoveItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsRemoveItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsRemoveItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsRemoveItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsRemoveItem_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsRemoveItem_result.class, metaDataMap);
    }

    public bsRemoveItem_result() {
    }

    public bsRemoveItem_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsRemoveItem_result(bsRemoveItem_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public bsRemoveItem_result deepCopy() {
      return new bsRemoveItem_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public bsRemoveItem_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsRemoveItem_result)
        return this.equals((bsRemoveItem_result)that);
      return false;
    }

    public boolean equals(bsRemoveItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(bsRemoveItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsRemoveItem_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsRemoveItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsRemoveItem_resultStandardScheme getScheme() {
        return new bsRemoveItem_resultStandardScheme();
      }
    }

    private static class bsRemoveItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsRemoveItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsRemoveItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsRemoveItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsRemoveItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsRemoveItem_resultTupleScheme getScheme() {
        return new bsRemoveItem_resultTupleScheme();
      }
    }

    private static class bsRemoveItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsRemoveItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsRemoveItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsRemoveItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsExisted_args implements org.apache.thrift.TBase<bsExisted_args, bsExisted_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsExisted_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsExisted_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsExisted_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsExisted_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsExisted_args.class, metaDataMap);
    }

    public bsExisted_args() {
    }

    public bsExisted_args(
      java.lang.String bsName,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.bsName = bsName;
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsExisted_args(bsExisted_args other) {
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public bsExisted_args deepCopy() {
      return new bsExisted_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      this.itemKey = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsExisted_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public bsExisted_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public bsExisted_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsExisted_args)
        return this.equals((bsExisted_args)that);
      return false;
    }

    public boolean equals(bsExisted_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsExisted_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsExisted_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsExisted_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsExisted_argsStandardScheme getScheme() {
        return new bsExisted_argsStandardScheme();
      }
    }

    private static class bsExisted_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsExisted_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsExisted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsExisted_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsExisted_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsExisted_argsTupleScheme getScheme() {
        return new bsExisted_argsTupleScheme();
      }
    }

    private static class bsExisted_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsExisted_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsExisted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsExisted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsExisted_result implements org.apache.thrift.TBase<bsExisted_result, bsExisted_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsExisted_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsExisted_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsExisted_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsExisted_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TExistedResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExistedResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsExisted_result.class, metaDataMap);
    }

    public bsExisted_result() {
    }

    public bsExisted_result(
      TExistedResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsExisted_result(bsExisted_result other) {
      if (other.isSetSuccess()) {
        this.success = new TExistedResult(other.success);
      }
    }

    public bsExisted_result deepCopy() {
      return new bsExisted_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TExistedResult getSuccess() {
      return this.success;
    }

    public bsExisted_result setSuccess(@org.apache.thrift.annotation.Nullable TExistedResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TExistedResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsExisted_result)
        return this.equals((bsExisted_result)that);
      return false;
    }

    public boolean equals(bsExisted_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsExisted_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsExisted_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsExisted_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsExisted_resultStandardScheme getScheme() {
        return new bsExisted_resultStandardScheme();
      }
    }

    private static class bsExisted_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsExisted_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsExisted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TExistedResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsExisted_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsExisted_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsExisted_resultTupleScheme getScheme() {
        return new bsExisted_resultTupleScheme();
      }
    }

    private static class bsExisted_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsExisted_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsExisted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsExisted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TExistedResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetItem_args implements org.apache.thrift.TBase<bsGetItem_args, bsGetItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetItem_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetItem_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetItem_args.class, metaDataMap);
    }

    public bsGetItem_args() {
    }

    public bsGetItem_args(
      java.lang.String bsName,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.bsName = bsName;
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetItem_args(bsGetItem_args other) {
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public bsGetItem_args deepCopy() {
      return new bsGetItem_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      this.itemKey = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsGetItem_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public bsGetItem_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public bsGetItem_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetItem_args)
        return this.equals((bsGetItem_args)that);
      return false;
    }

    public boolean equals(bsGetItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsGetItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetItem_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetItem_argsStandardScheme getScheme() {
        return new bsGetItem_argsStandardScheme();
      }
    }

    private static class bsGetItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetItem_argsTupleScheme getScheme() {
        return new bsGetItem_argsTupleScheme();
      }
    }

    private static class bsGetItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetItem_result implements org.apache.thrift.TBase<bsGetItem_result, bsGetItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetItem_result.class, metaDataMap);
    }

    public bsGetItem_result() {
    }

    public bsGetItem_result(
      TItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetItem_result(bsGetItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemResult(other.success);
      }
    }

    public bsGetItem_result deepCopy() {
      return new bsGetItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemResult getSuccess() {
      return this.success;
    }

    public bsGetItem_result setSuccess(@org.apache.thrift.annotation.Nullable TItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetItem_result)
        return this.equals((bsGetItem_result)that);
      return false;
    }

    public boolean equals(bsGetItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsGetItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetItem_resultStandardScheme getScheme() {
        return new bsGetItem_resultStandardScheme();
      }
    }

    private static class bsGetItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetItem_resultTupleScheme getScheme() {
        return new bsGetItem_resultTupleScheme();
      }
    }

    private static class bsGetItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetSlice_args implements org.apache.thrift.TBase<bsGetSlice_args, bsGetSlice_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetSlice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetSlice_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("fromPos", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetSlice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetSlice_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public int fromPos; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      FROM_POS((short)2, "fromPos"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // FROM_POS
            return FROM_POS;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMPOS_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.FROM_POS, new org.apache.thrift.meta_data.FieldMetaData("fromPos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetSlice_args.class, metaDataMap);
    }

    public bsGetSlice_args() {
    }

    public bsGetSlice_args(
      java.lang.String bsName,
      int fromPos,
      int count)
    {
      this();
      this.bsName = bsName;
      this.fromPos = fromPos;
      setFromPosIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetSlice_args(bsGetSlice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      this.fromPos = other.fromPos;
      this.count = other.count;
    }

    public bsGetSlice_args deepCopy() {
      return new bsGetSlice_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      setFromPosIsSet(false);
      this.fromPos = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsGetSlice_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public int getFromPos() {
      return this.fromPos;
    }

    public bsGetSlice_args setFromPos(int fromPos) {
      this.fromPos = fromPos;
      setFromPosIsSet(true);
      return this;
    }

    public void unsetFromPos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FROMPOS_ISSET_ID);
    }

    /** Returns true if field fromPos is set (has been assigned a value) and false otherwise */
    public boolean isSetFromPos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FROMPOS_ISSET_ID);
    }

    public void setFromPosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FROMPOS_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public bsGetSlice_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case FROM_POS:
        if (value == null) {
          unsetFromPos();
        } else {
          setFromPos((java.lang.Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case FROM_POS:
        return getFromPos();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case FROM_POS:
        return isSetFromPos();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetSlice_args)
        return this.equals((bsGetSlice_args)that);
      return false;
    }

    public boolean equals(bsGetSlice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_fromPos = true;
      boolean that_present_fromPos = true;
      if (this_present_fromPos || that_present_fromPos) {
        if (!(this_present_fromPos && that_present_fromPos))
          return false;
        if (this.fromPos != that.fromPos)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + fromPos;

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(bsGetSlice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromPos()).compareTo(other.isSetFromPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromPos, other.fromPos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetSlice_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromPos:");
      sb.append(this.fromPos);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetSlice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSlice_argsStandardScheme getScheme() {
        return new bsGetSlice_argsStandardScheme();
      }
    }

    private static class bsGetSlice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetSlice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromPos = iprot.readI32();
                struct.setFromPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetSlice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_POS_FIELD_DESC);
        oprot.writeI32(struct.fromPos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetSlice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSlice_argsTupleScheme getScheme() {
        return new bsGetSlice_argsTupleScheme();
      }
    }

    private static class bsGetSlice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetSlice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetFromPos()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetFromPos()) {
          oprot.writeI32(struct.fromPos);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromPos = iprot.readI32();
          struct.setFromPosIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetSlice_result implements org.apache.thrift.TBase<bsGetSlice_result, bsGetSlice_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetSlice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetSlice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetSlice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetSlice_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetSlice_result.class, metaDataMap);
    }

    public bsGetSlice_result() {
    }

    public bsGetSlice_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetSlice_result(bsGetSlice_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsGetSlice_result deepCopy() {
      return new bsGetSlice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsGetSlice_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetSlice_result)
        return this.equals((bsGetSlice_result)that);
      return false;
    }

    public boolean equals(bsGetSlice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsGetSlice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetSlice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetSlice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSlice_resultStandardScheme getScheme() {
        return new bsGetSlice_resultStandardScheme();
      }
    }

    private static class bsGetSlice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetSlice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetSlice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetSlice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSlice_resultTupleScheme getScheme() {
        return new bsGetSlice_resultTupleScheme();
      }
    }

    private static class bsGetSlice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetSlice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetSliceFromItem_args implements org.apache.thrift.TBase<bsGetSliceFromItem_args, bsGetSliceFromItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetSliceFromItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetSliceFromItem_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetSliceFromItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetSliceFromItem_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      FROM_KEY((short)2, "fromKey"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // FROM_KEY
            return FROM_KEY;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.FROM_KEY, new org.apache.thrift.meta_data.FieldMetaData("fromKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetSliceFromItem_args.class, metaDataMap);
    }

    public bsGetSliceFromItem_args() {
    }

    public bsGetSliceFromItem_args(
      java.lang.String bsName,
      java.nio.ByteBuffer fromKey,
      int count)
    {
      this();
      this.bsName = bsName;
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetSliceFromItem_args(bsGetSliceFromItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      if (other.isSetFromKey()) {
        this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(other.fromKey);
      }
      this.count = other.count;
    }

    public bsGetSliceFromItem_args deepCopy() {
      return new bsGetSliceFromItem_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      this.fromKey = null;
      setCountIsSet(false);
      this.count = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsGetSliceFromItem_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public byte[] getFromKey() {
      setFromKey(org.apache.thrift.TBaseHelper.rightSize(fromKey));
      return fromKey == null ? null : fromKey.array();
    }

    public java.nio.ByteBuffer bufferForFromKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(fromKey);
    }

    public bsGetSliceFromItem_args setFromKey(byte[] fromKey) {
      this.fromKey = fromKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fromKey.clone());
      return this;
    }

    public bsGetSliceFromItem_args setFromKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey) {
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      return this;
    }

    public void unsetFromKey() {
      this.fromKey = null;
    }

    /** Returns true if field fromKey is set (has been assigned a value) and false otherwise */
    public boolean isSetFromKey() {
      return this.fromKey != null;
    }

    public void setFromKeyIsSet(boolean value) {
      if (!value) {
        this.fromKey = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public bsGetSliceFromItem_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case FROM_KEY:
        if (value == null) {
          unsetFromKey();
        } else {
          if (value instanceof byte[]) {
            setFromKey((byte[])value);
          } else {
            setFromKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case FROM_KEY:
        return getFromKey();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case FROM_KEY:
        return isSetFromKey();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetSliceFromItem_args)
        return this.equals((bsGetSliceFromItem_args)that);
      return false;
    }

    public boolean equals(bsGetSliceFromItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_fromKey = true && this.isSetFromKey();
      boolean that_present_fromKey = true && that.isSetFromKey();
      if (this_present_fromKey || that_present_fromKey) {
        if (!(this_present_fromKey && that_present_fromKey))
          return false;
        if (!this.fromKey.equals(that.fromKey))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFromKey()) ? 131071 : 524287);
      if (isSetFromKey())
        hashCode = hashCode * 8191 + fromKey.hashCode();

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(bsGetSliceFromItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromKey()).compareTo(other.isSetFromKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromKey, other.fromKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetSliceFromItem_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromKey:");
      if (this.fromKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fromKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetSliceFromItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceFromItem_argsStandardScheme getScheme() {
        return new bsGetSliceFromItem_argsStandardScheme();
      }
    }

    private static class bsGetSliceFromItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetSliceFromItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromKey = iprot.readBinary();
                struct.setFromKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetSliceFromItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        if (struct.fromKey != null) {
          oprot.writeFieldBegin(FROM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.fromKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetSliceFromItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceFromItem_argsTupleScheme getScheme() {
        return new bsGetSliceFromItem_argsTupleScheme();
      }
    }

    private static class bsGetSliceFromItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetSliceFromItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetFromKey()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetFromKey()) {
          oprot.writeBinary(struct.fromKey);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromKey = iprot.readBinary();
          struct.setFromKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetSliceFromItem_result implements org.apache.thrift.TBase<bsGetSliceFromItem_result, bsGetSliceFromItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetSliceFromItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetSliceFromItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetSliceFromItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetSliceFromItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetSliceFromItem_result.class, metaDataMap);
    }

    public bsGetSliceFromItem_result() {
    }

    public bsGetSliceFromItem_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetSliceFromItem_result(bsGetSliceFromItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsGetSliceFromItem_result deepCopy() {
      return new bsGetSliceFromItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsGetSliceFromItem_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetSliceFromItem_result)
        return this.equals((bsGetSliceFromItem_result)that);
      return false;
    }

    public boolean equals(bsGetSliceFromItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsGetSliceFromItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetSliceFromItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetSliceFromItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceFromItem_resultStandardScheme getScheme() {
        return new bsGetSliceFromItem_resultStandardScheme();
      }
    }

    private static class bsGetSliceFromItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetSliceFromItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetSliceFromItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetSliceFromItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceFromItem_resultTupleScheme getScheme() {
        return new bsGetSliceFromItem_resultTupleScheme();
      }
    }

    private static class bsGetSliceFromItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetSliceFromItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetSliceR_args implements org.apache.thrift.TBase<bsGetSliceR_args, bsGetSliceR_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetSliceR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetSliceR_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("fromPos", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetSliceR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetSliceR_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public int fromPos; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      FROM_POS((short)2, "fromPos"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // FROM_POS
            return FROM_POS;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROMPOS_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.FROM_POS, new org.apache.thrift.meta_data.FieldMetaData("fromPos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetSliceR_args.class, metaDataMap);
    }

    public bsGetSliceR_args() {
    }

    public bsGetSliceR_args(
      java.lang.String bsName,
      int fromPos,
      int count)
    {
      this();
      this.bsName = bsName;
      this.fromPos = fromPos;
      setFromPosIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetSliceR_args(bsGetSliceR_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      this.fromPos = other.fromPos;
      this.count = other.count;
    }

    public bsGetSliceR_args deepCopy() {
      return new bsGetSliceR_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      setFromPosIsSet(false);
      this.fromPos = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsGetSliceR_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public int getFromPos() {
      return this.fromPos;
    }

    public bsGetSliceR_args setFromPos(int fromPos) {
      this.fromPos = fromPos;
      setFromPosIsSet(true);
      return this;
    }

    public void unsetFromPos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FROMPOS_ISSET_ID);
    }

    /** Returns true if field fromPos is set (has been assigned a value) and false otherwise */
    public boolean isSetFromPos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FROMPOS_ISSET_ID);
    }

    public void setFromPosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FROMPOS_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public bsGetSliceR_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case FROM_POS:
        if (value == null) {
          unsetFromPos();
        } else {
          setFromPos((java.lang.Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case FROM_POS:
        return getFromPos();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case FROM_POS:
        return isSetFromPos();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetSliceR_args)
        return this.equals((bsGetSliceR_args)that);
      return false;
    }

    public boolean equals(bsGetSliceR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_fromPos = true;
      boolean that_present_fromPos = true;
      if (this_present_fromPos || that_present_fromPos) {
        if (!(this_present_fromPos && that_present_fromPos))
          return false;
        if (this.fromPos != that.fromPos)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + fromPos;

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(bsGetSliceR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromPos()).compareTo(other.isSetFromPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromPos, other.fromPos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetSliceR_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromPos:");
      sb.append(this.fromPos);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetSliceR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceR_argsStandardScheme getScheme() {
        return new bsGetSliceR_argsStandardScheme();
      }
    }

    private static class bsGetSliceR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetSliceR_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromPos = iprot.readI32();
                struct.setFromPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetSliceR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FROM_POS_FIELD_DESC);
        oprot.writeI32(struct.fromPos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetSliceR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceR_argsTupleScheme getScheme() {
        return new bsGetSliceR_argsTupleScheme();
      }
    }

    private static class bsGetSliceR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetSliceR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetFromPos()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetFromPos()) {
          oprot.writeI32(struct.fromPos);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromPos = iprot.readI32();
          struct.setFromPosIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetSliceR_result implements org.apache.thrift.TBase<bsGetSliceR_result, bsGetSliceR_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetSliceR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetSliceR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetSliceR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetSliceR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetSliceR_result.class, metaDataMap);
    }

    public bsGetSliceR_result() {
    }

    public bsGetSliceR_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetSliceR_result(bsGetSliceR_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsGetSliceR_result deepCopy() {
      return new bsGetSliceR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsGetSliceR_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetSliceR_result)
        return this.equals((bsGetSliceR_result)that);
      return false;
    }

    public boolean equals(bsGetSliceR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsGetSliceR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetSliceR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetSliceR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceR_resultStandardScheme getScheme() {
        return new bsGetSliceR_resultStandardScheme();
      }
    }

    private static class bsGetSliceR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetSliceR_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetSliceR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetSliceR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceR_resultTupleScheme getScheme() {
        return new bsGetSliceR_resultTupleScheme();
      }
    }

    private static class bsGetSliceR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetSliceR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetSliceFromItemR_args implements org.apache.thrift.TBase<bsGetSliceFromItemR_args, bsGetSliceFromItemR_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetSliceFromItemR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetSliceFromItemR_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetSliceFromItemR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetSliceFromItemR_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      FROM_KEY((short)2, "fromKey"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // FROM_KEY
            return FROM_KEY;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.FROM_KEY, new org.apache.thrift.meta_data.FieldMetaData("fromKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetSliceFromItemR_args.class, metaDataMap);
    }

    public bsGetSliceFromItemR_args() {
    }

    public bsGetSliceFromItemR_args(
      java.lang.String bsName,
      java.nio.ByteBuffer fromKey,
      int count)
    {
      this();
      this.bsName = bsName;
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetSliceFromItemR_args(bsGetSliceFromItemR_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      if (other.isSetFromKey()) {
        this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(other.fromKey);
      }
      this.count = other.count;
    }

    public bsGetSliceFromItemR_args deepCopy() {
      return new bsGetSliceFromItemR_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      this.fromKey = null;
      setCountIsSet(false);
      this.count = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsGetSliceFromItemR_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public byte[] getFromKey() {
      setFromKey(org.apache.thrift.TBaseHelper.rightSize(fromKey));
      return fromKey == null ? null : fromKey.array();
    }

    public java.nio.ByteBuffer bufferForFromKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(fromKey);
    }

    public bsGetSliceFromItemR_args setFromKey(byte[] fromKey) {
      this.fromKey = fromKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fromKey.clone());
      return this;
    }

    public bsGetSliceFromItemR_args setFromKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey) {
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      return this;
    }

    public void unsetFromKey() {
      this.fromKey = null;
    }

    /** Returns true if field fromKey is set (has been assigned a value) and false otherwise */
    public boolean isSetFromKey() {
      return this.fromKey != null;
    }

    public void setFromKeyIsSet(boolean value) {
      if (!value) {
        this.fromKey = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public bsGetSliceFromItemR_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case FROM_KEY:
        if (value == null) {
          unsetFromKey();
        } else {
          if (value instanceof byte[]) {
            setFromKey((byte[])value);
          } else {
            setFromKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case FROM_KEY:
        return getFromKey();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case FROM_KEY:
        return isSetFromKey();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetSliceFromItemR_args)
        return this.equals((bsGetSliceFromItemR_args)that);
      return false;
    }

    public boolean equals(bsGetSliceFromItemR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_fromKey = true && this.isSetFromKey();
      boolean that_present_fromKey = true && that.isSetFromKey();
      if (this_present_fromKey || that_present_fromKey) {
        if (!(this_present_fromKey && that_present_fromKey))
          return false;
        if (!this.fromKey.equals(that.fromKey))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFromKey()) ? 131071 : 524287);
      if (isSetFromKey())
        hashCode = hashCode * 8191 + fromKey.hashCode();

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(bsGetSliceFromItemR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromKey()).compareTo(other.isSetFromKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromKey, other.fromKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetSliceFromItemR_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromKey:");
      if (this.fromKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fromKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetSliceFromItemR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceFromItemR_argsStandardScheme getScheme() {
        return new bsGetSliceFromItemR_argsStandardScheme();
      }
    }

    private static class bsGetSliceFromItemR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetSliceFromItemR_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromKey = iprot.readBinary();
                struct.setFromKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetSliceFromItemR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        if (struct.fromKey != null) {
          oprot.writeFieldBegin(FROM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.fromKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetSliceFromItemR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceFromItemR_argsTupleScheme getScheme() {
        return new bsGetSliceFromItemR_argsTupleScheme();
      }
    }

    private static class bsGetSliceFromItemR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetSliceFromItemR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetFromKey()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetFromKey()) {
          oprot.writeBinary(struct.fromKey);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromKey = iprot.readBinary();
          struct.setFromKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsGetSliceFromItemR_result implements org.apache.thrift.TBase<bsGetSliceFromItemR_result, bsGetSliceFromItemR_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsGetSliceFromItemR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsGetSliceFromItemR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsGetSliceFromItemR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsGetSliceFromItemR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsGetSliceFromItemR_result.class, metaDataMap);
    }

    public bsGetSliceFromItemR_result() {
    }

    public bsGetSliceFromItemR_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsGetSliceFromItemR_result(bsGetSliceFromItemR_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsGetSliceFromItemR_result deepCopy() {
      return new bsGetSliceFromItemR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsGetSliceFromItemR_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsGetSliceFromItemR_result)
        return this.equals((bsGetSliceFromItemR_result)that);
      return false;
    }

    public boolean equals(bsGetSliceFromItemR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsGetSliceFromItemR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsGetSliceFromItemR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsGetSliceFromItemR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceFromItemR_resultStandardScheme getScheme() {
        return new bsGetSliceFromItemR_resultStandardScheme();
      }
    }

    private static class bsGetSliceFromItemR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsGetSliceFromItemR_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsGetSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsGetSliceFromItemR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsGetSliceFromItemR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsGetSliceFromItemR_resultTupleScheme getScheme() {
        return new bsGetSliceFromItemR_resultTupleScheme();
      }
    }

    private static class bsGetSliceFromItemR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsGetSliceFromItemR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsGetSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsGetSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsRangeQuery_args implements org.apache.thrift.TBase<bsRangeQuery_args, bsRangeQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsRangeQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsRangeQuery_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("endKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsRangeQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsRangeQuery_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer startKey; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer endKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      START_KEY((short)2, "startKey"),
      END_KEY((short)3, "endKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // START_KEY
            return START_KEY;
          case 3: // END_KEY
            return END_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("startKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("endKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsRangeQuery_args.class, metaDataMap);
    }

    public bsRangeQuery_args() {
    }

    public bsRangeQuery_args(
      java.lang.String bsName,
      java.nio.ByteBuffer startKey,
      java.nio.ByteBuffer endKey)
    {
      this();
      this.bsName = bsName;
      this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
      this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsRangeQuery_args(bsRangeQuery_args other) {
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      if (other.isSetStartKey()) {
        this.startKey = org.apache.thrift.TBaseHelper.copyBinary(other.startKey);
      }
      if (other.isSetEndKey()) {
        this.endKey = org.apache.thrift.TBaseHelper.copyBinary(other.endKey);
      }
    }

    public bsRangeQuery_args deepCopy() {
      return new bsRangeQuery_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      this.startKey = null;
      this.endKey = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsRangeQuery_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public byte[] getStartKey() {
      setStartKey(org.apache.thrift.TBaseHelper.rightSize(startKey));
      return startKey == null ? null : startKey.array();
    }

    public java.nio.ByteBuffer bufferForStartKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(startKey);
    }

    public bsRangeQuery_args setStartKey(byte[] startKey) {
      this.startKey = startKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(startKey.clone());
      return this;
    }

    public bsRangeQuery_args setStartKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer startKey) {
      this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
      return this;
    }

    public void unsetStartKey() {
      this.startKey = null;
    }

    /** Returns true if field startKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStartKey() {
      return this.startKey != null;
    }

    public void setStartKeyIsSet(boolean value) {
      if (!value) {
        this.startKey = null;
      }
    }

    public byte[] getEndKey() {
      setEndKey(org.apache.thrift.TBaseHelper.rightSize(endKey));
      return endKey == null ? null : endKey.array();
    }

    public java.nio.ByteBuffer bufferForEndKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(endKey);
    }

    public bsRangeQuery_args setEndKey(byte[] endKey) {
      this.endKey = endKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(endKey.clone());
      return this;
    }

    public bsRangeQuery_args setEndKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer endKey) {
      this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
      return this;
    }

    public void unsetEndKey() {
      this.endKey = null;
    }

    /** Returns true if field endKey is set (has been assigned a value) and false otherwise */
    public boolean isSetEndKey() {
      return this.endKey != null;
    }

    public void setEndKeyIsSet(boolean value) {
      if (!value) {
        this.endKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case START_KEY:
        if (value == null) {
          unsetStartKey();
        } else {
          if (value instanceof byte[]) {
            setStartKey((byte[])value);
          } else {
            setStartKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case END_KEY:
        if (value == null) {
          unsetEndKey();
        } else {
          if (value instanceof byte[]) {
            setEndKey((byte[])value);
          } else {
            setEndKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case START_KEY:
        return getStartKey();

      case END_KEY:
        return getEndKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case START_KEY:
        return isSetStartKey();
      case END_KEY:
        return isSetEndKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsRangeQuery_args)
        return this.equals((bsRangeQuery_args)that);
      return false;
    }

    public boolean equals(bsRangeQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_startKey = true && this.isSetStartKey();
      boolean that_present_startKey = true && that.isSetStartKey();
      if (this_present_startKey || that_present_startKey) {
        if (!(this_present_startKey && that_present_startKey))
          return false;
        if (!this.startKey.equals(that.startKey))
          return false;
      }

      boolean this_present_endKey = true && this.isSetEndKey();
      boolean that_present_endKey = true && that.isSetEndKey();
      if (this_present_endKey || that_present_endKey) {
        if (!(this_present_endKey && that_present_endKey))
          return false;
        if (!this.endKey.equals(that.endKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + ((isSetStartKey()) ? 131071 : 524287);
      if (isSetStartKey())
        hashCode = hashCode * 8191 + startKey.hashCode();

      hashCode = hashCode * 8191 + ((isSetEndKey()) ? 131071 : 524287);
      if (isSetEndKey())
        hashCode = hashCode * 8191 + endKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsRangeQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEndKey()).compareTo(other.isSetEndKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endKey, other.endKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsRangeQuery_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startKey:");
      if (this.startKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.startKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endKey:");
      if (this.endKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.endKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsRangeQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsRangeQuery_argsStandardScheme getScheme() {
        return new bsRangeQuery_argsStandardScheme();
      }
    }

    private static class bsRangeQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsRangeQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsRangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startKey = iprot.readBinary();
                struct.setStartKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endKey = iprot.readBinary();
                struct.setEndKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsRangeQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        if (struct.startKey != null) {
          oprot.writeFieldBegin(START_KEY_FIELD_DESC);
          oprot.writeBinary(struct.startKey);
          oprot.writeFieldEnd();
        }
        if (struct.endKey != null) {
          oprot.writeFieldBegin(END_KEY_FIELD_DESC);
          oprot.writeBinary(struct.endKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsRangeQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsRangeQuery_argsTupleScheme getScheme() {
        return new bsRangeQuery_argsTupleScheme();
      }
    }

    private static class bsRangeQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsRangeQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsRangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetStartKey()) {
          optionals.set(1);
        }
        if (struct.isSetEndKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetStartKey()) {
          oprot.writeBinary(struct.startKey);
        }
        if (struct.isSetEndKey()) {
          oprot.writeBinary(struct.endKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsRangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startKey = iprot.readBinary();
          struct.setStartKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endKey = iprot.readBinary();
          struct.setEndKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsRangeQuery_result implements org.apache.thrift.TBase<bsRangeQuery_result, bsRangeQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsRangeQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsRangeQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsRangeQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsRangeQuery_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsRangeQuery_result.class, metaDataMap);
    }

    public bsRangeQuery_result() {
    }

    public bsRangeQuery_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsRangeQuery_result(bsRangeQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsRangeQuery_result deepCopy() {
      return new bsRangeQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsRangeQuery_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsRangeQuery_result)
        return this.equals((bsRangeQuery_result)that);
      return false;
    }

    public boolean equals(bsRangeQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsRangeQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsRangeQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsRangeQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsRangeQuery_resultStandardScheme getScheme() {
        return new bsRangeQuery_resultStandardScheme();
      }
    }

    private static class bsRangeQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsRangeQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsRangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsRangeQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsRangeQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsRangeQuery_resultTupleScheme getScheme() {
        return new bsRangeQuery_resultTupleScheme();
      }
    }

    private static class bsRangeQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsRangeQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsRangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsRangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsMultiPut_args implements org.apache.thrift.TBase<bsMultiPut_args, bsMultiPut_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsMultiPut_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsMultiPut_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SET_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("setData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField GET_ADDED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("getAddedItems", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField GET_REPLACED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("getReplacedItems", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsMultiPut_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsMultiPut_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required
    public @org.apache.thrift.annotation.Nullable TItemSet setData; // required
    public boolean getAddedItems; // required
    public boolean getReplacedItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName"),
      SET_DATA((short)2, "setData"),
      GET_ADDED_ITEMS((short)3, "getAddedItems"),
      GET_REPLACED_ITEMS((short)4, "getReplacedItems");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          case 2: // SET_DATA
            return SET_DATA;
          case 3: // GET_ADDED_ITEMS
            return GET_ADDED_ITEMS;
          case 4: // GET_REPLACED_ITEMS
            return GET_REPLACED_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GETADDEDITEMS_ISSET_ID = 0;
    private static final int __GETREPLACEDITEMS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      tmpMap.put(_Fields.SET_DATA, new org.apache.thrift.meta_data.FieldMetaData("setData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSet.class)));
      tmpMap.put(_Fields.GET_ADDED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("getAddedItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.GET_REPLACED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("getReplacedItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsMultiPut_args.class, metaDataMap);
    }

    public bsMultiPut_args() {
    }

    public bsMultiPut_args(
      java.lang.String bsName,
      TItemSet setData,
      boolean getAddedItems,
      boolean getReplacedItems)
    {
      this();
      this.bsName = bsName;
      this.setData = setData;
      this.getAddedItems = getAddedItems;
      setGetAddedItemsIsSet(true);
      this.getReplacedItems = getReplacedItems;
      setGetReplacedItemsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsMultiPut_args(bsMultiPut_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
      if (other.isSetSetData()) {
        this.setData = new TItemSet(other.setData);
      }
      this.getAddedItems = other.getAddedItems;
      this.getReplacedItems = other.getReplacedItems;
    }

    public bsMultiPut_args deepCopy() {
      return new bsMultiPut_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
      this.setData = null;
      setGetAddedItemsIsSet(false);
      this.getAddedItems = false;
      setGetReplacedItemsIsSet(false);
      this.getReplacedItems = false;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public bsMultiPut_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSet getSetData() {
      return this.setData;
    }

    public bsMultiPut_args setSetData(@org.apache.thrift.annotation.Nullable TItemSet setData) {
      this.setData = setData;
      return this;
    }

    public void unsetSetData() {
      this.setData = null;
    }

    /** Returns true if field setData is set (has been assigned a value) and false otherwise */
    public boolean isSetSetData() {
      return this.setData != null;
    }

    public void setSetDataIsSet(boolean value) {
      if (!value) {
        this.setData = null;
      }
    }

    public boolean isGetAddedItems() {
      return this.getAddedItems;
    }

    public bsMultiPut_args setGetAddedItems(boolean getAddedItems) {
      this.getAddedItems = getAddedItems;
      setGetAddedItemsIsSet(true);
      return this;
    }

    public void unsetGetAddedItems() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID);
    }

    /** Returns true if field getAddedItems is set (has been assigned a value) and false otherwise */
    public boolean isSetGetAddedItems() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID);
    }

    public void setGetAddedItemsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID, value);
    }

    public boolean isGetReplacedItems() {
      return this.getReplacedItems;
    }

    public bsMultiPut_args setGetReplacedItems(boolean getReplacedItems) {
      this.getReplacedItems = getReplacedItems;
      setGetReplacedItemsIsSet(true);
      return this;
    }

    public void unsetGetReplacedItems() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID);
    }

    /** Returns true if field getReplacedItems is set (has been assigned a value) and false otherwise */
    public boolean isSetGetReplacedItems() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID);
    }

    public void setGetReplacedItemsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      case SET_DATA:
        if (value == null) {
          unsetSetData();
        } else {
          setSetData((TItemSet)value);
        }
        break;

      case GET_ADDED_ITEMS:
        if (value == null) {
          unsetGetAddedItems();
        } else {
          setGetAddedItems((java.lang.Boolean)value);
        }
        break;

      case GET_REPLACED_ITEMS:
        if (value == null) {
          unsetGetReplacedItems();
        } else {
          setGetReplacedItems((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      case SET_DATA:
        return getSetData();

      case GET_ADDED_ITEMS:
        return isGetAddedItems();

      case GET_REPLACED_ITEMS:
        return isGetReplacedItems();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      case SET_DATA:
        return isSetSetData();
      case GET_ADDED_ITEMS:
        return isSetGetAddedItems();
      case GET_REPLACED_ITEMS:
        return isSetGetReplacedItems();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsMultiPut_args)
        return this.equals((bsMultiPut_args)that);
      return false;
    }

    public boolean equals(bsMultiPut_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      boolean this_present_setData = true && this.isSetSetData();
      boolean that_present_setData = true && that.isSetSetData();
      if (this_present_setData || that_present_setData) {
        if (!(this_present_setData && that_present_setData))
          return false;
        if (!this.setData.equals(that.setData))
          return false;
      }

      boolean this_present_getAddedItems = true;
      boolean that_present_getAddedItems = true;
      if (this_present_getAddedItems || that_present_getAddedItems) {
        if (!(this_present_getAddedItems && that_present_getAddedItems))
          return false;
        if (this.getAddedItems != that.getAddedItems)
          return false;
      }

      boolean this_present_getReplacedItems = true;
      boolean that_present_getReplacedItems = true;
      if (this_present_getReplacedItems || that_present_getReplacedItems) {
        if (!(this_present_getReplacedItems && that_present_getReplacedItems))
          return false;
        if (this.getReplacedItems != that.getReplacedItems)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSetData()) ? 131071 : 524287);
      if (isSetSetData())
        hashCode = hashCode * 8191 + setData.hashCode();

      hashCode = hashCode * 8191 + ((getAddedItems) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((getReplacedItems) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(bsMultiPut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSetData()).compareTo(other.isSetSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setData, other.setData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGetAddedItems()).compareTo(other.isSetGetAddedItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetAddedItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getAddedItems, other.getAddedItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGetReplacedItems()).compareTo(other.isSetGetReplacedItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetReplacedItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getReplacedItems, other.getReplacedItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsMultiPut_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("setData:");
      if (this.setData == null) {
        sb.append("null");
      } else {
        sb.append(this.setData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("getAddedItems:");
      sb.append(this.getAddedItems);
      first = false;
      if (!first) sb.append(", ");
      sb.append("getReplacedItems:");
      sb.append(this.getReplacedItems);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (setData != null) {
        setData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsMultiPut_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsMultiPut_argsStandardScheme getScheme() {
        return new bsMultiPut_argsStandardScheme();
      }
    }

    private static class bsMultiPut_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsMultiPut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsMultiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SET_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.setData = new TItemSet();
                struct.setData.read(iprot);
                struct.setSetDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GET_ADDED_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.getAddedItems = iprot.readBool();
                struct.setGetAddedItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GET_REPLACED_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.getReplacedItems = iprot.readBool();
                struct.setGetReplacedItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsMultiPut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        if (struct.setData != null) {
          oprot.writeFieldBegin(SET_DATA_FIELD_DESC);
          struct.setData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GET_ADDED_ITEMS_FIELD_DESC);
        oprot.writeBool(struct.getAddedItems);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GET_REPLACED_ITEMS_FIELD_DESC);
        oprot.writeBool(struct.getReplacedItems);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsMultiPut_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsMultiPut_argsTupleScheme getScheme() {
        return new bsMultiPut_argsTupleScheme();
      }
    }

    private static class bsMultiPut_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsMultiPut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsMultiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        if (struct.isSetSetData()) {
          optionals.set(1);
        }
        if (struct.isSetGetAddedItems()) {
          optionals.set(2);
        }
        if (struct.isSetGetReplacedItems()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
        if (struct.isSetSetData()) {
          struct.setData.write(oprot);
        }
        if (struct.isSetGetAddedItems()) {
          oprot.writeBool(struct.getAddedItems);
        }
        if (struct.isSetGetReplacedItems()) {
          oprot.writeBool(struct.getReplacedItems);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsMultiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.setData = new TItemSet();
          struct.setData.read(iprot);
          struct.setSetDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.getAddedItems = iprot.readBool();
          struct.setGetAddedItemsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.getReplacedItems = iprot.readBool();
          struct.setGetReplacedItemsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsMultiPut_result implements org.apache.thrift.TBase<bsMultiPut_result, bsMultiPut_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsMultiPut_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsMultiPut_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsMultiPut_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsMultiPut_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TMultiPutItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMultiPutItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsMultiPut_result.class, metaDataMap);
    }

    public bsMultiPut_result() {
    }

    public bsMultiPut_result(
      TMultiPutItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsMultiPut_result(bsMultiPut_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMultiPutItemResult(other.success);
      }
    }

    public bsMultiPut_result deepCopy() {
      return new bsMultiPut_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TMultiPutItemResult getSuccess() {
      return this.success;
    }

    public bsMultiPut_result setSuccess(@org.apache.thrift.annotation.Nullable TMultiPutItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMultiPutItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsMultiPut_result)
        return this.equals((bsMultiPut_result)that);
      return false;
    }

    public boolean equals(bsMultiPut_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsMultiPut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsMultiPut_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsMultiPut_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsMultiPut_resultStandardScheme getScheme() {
        return new bsMultiPut_resultStandardScheme();
      }
    }

    private static class bsMultiPut_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsMultiPut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsMultiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMultiPutItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsMultiPut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsMultiPut_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsMultiPut_resultTupleScheme getScheme() {
        return new bsMultiPut_resultTupleScheme();
      }
    }

    private static class bsMultiPut_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsMultiPut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsMultiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsMultiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMultiPutItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTotalCount_args implements org.apache.thrift.TBase<getTotalCount_args, getTotalCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalCount_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTotalCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTotalCount_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalCount_args.class, metaDataMap);
    }

    public getTotalCount_args() {
    }

    public getTotalCount_args(
      java.lang.String bsName)
    {
      this();
      this.bsName = bsName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalCount_args(getTotalCount_args other) {
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
    }

    public getTotalCount_args deepCopy() {
      return new getTotalCount_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public getTotalCount_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalCount_args)
        return this.equals((getTotalCount_args)that);
      return false;
    }

    public boolean equals(getTotalCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTotalCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTotalCount_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_argsStandardScheme getScheme() {
        return new getTotalCount_argsStandardScheme();
      }
    }

    private static class getTotalCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTotalCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_argsTupleScheme getScheme() {
        return new getTotalCount_argsTupleScheme();
      }
    }

    private static class getTotalCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTotalCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTotalCount_result implements org.apache.thrift.TBase<getTotalCount_result, getTotalCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTotalCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTotalCount_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalCount_result.class, metaDataMap);
    }

    public getTotalCount_result() {
    }

    public getTotalCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalCount_result(getTotalCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTotalCount_result deepCopy() {
      return new getTotalCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getTotalCount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalCount_result)
        return this.equals((getTotalCount_result)that);
      return false;
    }

    public boolean equals(getTotalCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(getTotalCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTotalCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_resultStandardScheme getScheme() {
        return new getTotalCount_resultStandardScheme();
      }
    }

    private static class getTotalCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTotalCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_resultTupleScheme getScheme() {
        return new getTotalCount_resultTupleScheme();
      }
    }

    private static class getTotalCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTotalCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeAll_args implements org.apache.thrift.TBase<removeAll_args, removeAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAll_args");

    private static final org.apache.thrift.protocol.TField BS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bsName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeAll_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeAll_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String bsName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BS_NAME((short)1, "bsName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BS_NAME
            return BS_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bsName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TStringKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAll_args.class, metaDataMap);
    }

    public removeAll_args() {
    }

    public removeAll_args(
      java.lang.String bsName)
    {
      this();
      this.bsName = bsName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAll_args(removeAll_args other) {
      if (other.isSetBsName()) {
        this.bsName = other.bsName;
      }
    }

    public removeAll_args deepCopy() {
      return new removeAll_args(this);
    }

    @Override
    public void clear() {
      this.bsName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBsName() {
      return this.bsName;
    }

    public removeAll_args setBsName(@org.apache.thrift.annotation.Nullable java.lang.String bsName) {
      this.bsName = bsName;
      return this;
    }

    public void unsetBsName() {
      this.bsName = null;
    }

    /** Returns true if field bsName is set (has been assigned a value) and false otherwise */
    public boolean isSetBsName() {
      return this.bsName != null;
    }

    public void setBsNameIsSet(boolean value) {
      if (!value) {
        this.bsName = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BS_NAME:
        if (value == null) {
          unsetBsName();
        } else {
          setBsName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BS_NAME:
        return getBsName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BS_NAME:
        return isSetBsName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAll_args)
        return this.equals((removeAll_args)that);
      return false;
    }

    public boolean equals(removeAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bsName = true && this.isSetBsName();
      boolean that_present_bsName = true && that.isSetBsName();
      if (this_present_bsName || that_present_bsName) {
        if (!(this_present_bsName && that_present_bsName))
          return false;
        if (!this.bsName.equals(that.bsName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBsName()) ? 131071 : 524287);
      if (isSetBsName())
        hashCode = hashCode * 8191 + bsName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBsName()).compareTo(other.isSetBsName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBsName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bsName, other.bsName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeAll_args(");
      boolean first = true;

      sb.append("bsName:");
      if (this.bsName == null) {
        sb.append("null");
      } else {
        sb.append(this.bsName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_argsStandardScheme getScheme() {
        return new removeAll_argsStandardScheme();
      }
    }

    private static class removeAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bsName = iprot.readString();
                struct.setBsNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bsName != null) {
          oprot.writeFieldBegin(BS_NAME_FIELD_DESC);
          oprot.writeString(struct.bsName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_argsTupleScheme getScheme() {
        return new removeAll_argsTupleScheme();
      }
    }

    private static class removeAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBsName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBsName()) {
          oprot.writeString(struct.bsName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bsName = iprot.readString();
          struct.setBsNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeAll_result implements org.apache.thrift.TBase<removeAll_result, removeAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeAll_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeAll_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAll_result.class, metaDataMap);
    }

    public removeAll_result() {
    }

    public removeAll_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAll_result(removeAll_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public removeAll_result deepCopy() {
      return new removeAll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public removeAll_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAll_result)
        return this.equals((removeAll_result)that);
      return false;
    }

    public boolean equals(removeAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(removeAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeAll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_resultStandardScheme getScheme() {
        return new removeAll_resultStandardScheme();
      }
    }

    private static class removeAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_resultTupleScheme getScheme() {
        return new removeAll_resultTupleScheme();
      }
    }

    private static class removeAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
