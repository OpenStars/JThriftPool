/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.base.monitor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * System Load
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class systemLoad implements org.apache.thrift.TBase<systemLoad, systemLoad._Fields>, java.io.Serializable, Cloneable, Comparable<systemLoad> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("systemLoad");

  private static final org.apache.thrift.protocol.TField LOAD1M_FIELD_DESC = new org.apache.thrift.protocol.TField("load1m", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField LOAD5M_FIELD_DESC = new org.apache.thrift.protocol.TField("load5m", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField LOAD15M_FIELD_DESC = new org.apache.thrift.protocol.TField("load15m", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new systemLoadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new systemLoadTupleSchemeFactory();

  public double load1m; // required
  public double load5m; // required
  public double load15m; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAD1M((short)1, "load1m"),
    LOAD5M((short)2, "load5m"),
    LOAD15M((short)3, "load15m");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAD1M
          return LOAD1M;
        case 2: // LOAD5M
          return LOAD5M;
        case 3: // LOAD15M
          return LOAD15M;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOAD1M_ISSET_ID = 0;
  private static final int __LOAD5M_ISSET_ID = 1;
  private static final int __LOAD15M_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAD1M, new org.apache.thrift.meta_data.FieldMetaData("load1m", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAD5M, new org.apache.thrift.meta_data.FieldMetaData("load5m", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAD15M, new org.apache.thrift.meta_data.FieldMetaData("load15m", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(systemLoad.class, metaDataMap);
  }

  public systemLoad() {
  }

  public systemLoad(
    double load1m,
    double load5m,
    double load15m)
  {
    this();
    this.load1m = load1m;
    setLoad1mIsSet(true);
    this.load5m = load5m;
    setLoad5mIsSet(true);
    this.load15m = load15m;
    setLoad15mIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public systemLoad(systemLoad other) {
    __isset_bitfield = other.__isset_bitfield;
    this.load1m = other.load1m;
    this.load5m = other.load5m;
    this.load15m = other.load15m;
  }

  public systemLoad deepCopy() {
    return new systemLoad(this);
  }

  @Override
  public void clear() {
    setLoad1mIsSet(false);
    this.load1m = 0.0;
    setLoad5mIsSet(false);
    this.load5m = 0.0;
    setLoad15mIsSet(false);
    this.load15m = 0.0;
  }

  public double getLoad1m() {
    return this.load1m;
  }

  public systemLoad setLoad1m(double load1m) {
    this.load1m = load1m;
    setLoad1mIsSet(true);
    return this;
  }

  public void unsetLoad1m() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD1M_ISSET_ID);
  }

  /** Returns true if field load1m is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad1m() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD1M_ISSET_ID);
  }

  public void setLoad1mIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD1M_ISSET_ID, value);
  }

  public double getLoad5m() {
    return this.load5m;
  }

  public systemLoad setLoad5m(double load5m) {
    this.load5m = load5m;
    setLoad5mIsSet(true);
    return this;
  }

  public void unsetLoad5m() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD5M_ISSET_ID);
  }

  /** Returns true if field load5m is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad5m() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD5M_ISSET_ID);
  }

  public void setLoad5mIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD5M_ISSET_ID, value);
  }

  public double getLoad15m() {
    return this.load15m;
  }

  public systemLoad setLoad15m(double load15m) {
    this.load15m = load15m;
    setLoad15mIsSet(true);
    return this;
  }

  public void unsetLoad15m() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD15M_ISSET_ID);
  }

  /** Returns true if field load15m is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad15m() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD15M_ISSET_ID);
  }

  public void setLoad15mIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD15M_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOAD1M:
      if (value == null) {
        unsetLoad1m();
      } else {
        setLoad1m((java.lang.Double)value);
      }
      break;

    case LOAD5M:
      if (value == null) {
        unsetLoad5m();
      } else {
        setLoad5m((java.lang.Double)value);
      }
      break;

    case LOAD15M:
      if (value == null) {
        unsetLoad15m();
      } else {
        setLoad15m((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAD1M:
      return getLoad1m();

    case LOAD5M:
      return getLoad5m();

    case LOAD15M:
      return getLoad15m();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOAD1M:
      return isSetLoad1m();
    case LOAD5M:
      return isSetLoad5m();
    case LOAD15M:
      return isSetLoad15m();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof systemLoad)
      return this.equals((systemLoad)that);
    return false;
  }

  public boolean equals(systemLoad that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_load1m = true;
    boolean that_present_load1m = true;
    if (this_present_load1m || that_present_load1m) {
      if (!(this_present_load1m && that_present_load1m))
        return false;
      if (this.load1m != that.load1m)
        return false;
    }

    boolean this_present_load5m = true;
    boolean that_present_load5m = true;
    if (this_present_load5m || that_present_load5m) {
      if (!(this_present_load5m && that_present_load5m))
        return false;
      if (this.load5m != that.load5m)
        return false;
    }

    boolean this_present_load15m = true;
    boolean that_present_load15m = true;
    if (this_present_load15m || that_present_load15m) {
      if (!(this_present_load15m && that_present_load15m))
        return false;
      if (this.load15m != that.load15m)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load1m);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load5m);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load15m);

    return hashCode;
  }

  @Override
  public int compareTo(systemLoad other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLoad1m()).compareTo(other.isSetLoad1m());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad1m()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load1m, other.load1m);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoad5m()).compareTo(other.isSetLoad5m());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad5m()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load5m, other.load5m);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoad15m()).compareTo(other.isSetLoad15m());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad15m()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load15m, other.load15m);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("systemLoad(");
    boolean first = true;

    sb.append("load1m:");
    sb.append(this.load1m);
    first = false;
    if (!first) sb.append(", ");
    sb.append("load5m:");
    sb.append(this.load5m);
    first = false;
    if (!first) sb.append(", ");
    sb.append("load15m:");
    sb.append(this.load15m);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class systemLoadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public systemLoadStandardScheme getScheme() {
      return new systemLoadStandardScheme();
    }
  }

  private static class systemLoadStandardScheme extends org.apache.thrift.scheme.StandardScheme<systemLoad> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, systemLoad struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAD1M
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.load1m = iprot.readDouble();
              struct.setLoad1mIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAD5M
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.load5m = iprot.readDouble();
              struct.setLoad5mIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAD15M
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.load15m = iprot.readDouble();
              struct.setLoad15mIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, systemLoad struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAD1M_FIELD_DESC);
      oprot.writeDouble(struct.load1m);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAD5M_FIELD_DESC);
      oprot.writeDouble(struct.load5m);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAD15M_FIELD_DESC);
      oprot.writeDouble(struct.load15m);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class systemLoadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public systemLoadTupleScheme getScheme() {
      return new systemLoadTupleScheme();
    }
  }

  private static class systemLoadTupleScheme extends org.apache.thrift.scheme.TupleScheme<systemLoad> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, systemLoad struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLoad1m()) {
        optionals.set(0);
      }
      if (struct.isSetLoad5m()) {
        optionals.set(1);
      }
      if (struct.isSetLoad15m()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLoad1m()) {
        oprot.writeDouble(struct.load1m);
      }
      if (struct.isSetLoad5m()) {
        oprot.writeDouble(struct.load5m);
      }
      if (struct.isSetLoad15m()) {
        oprot.writeDouble(struct.load15m);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, systemLoad struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.load1m = iprot.readDouble();
        struct.setLoad1mIsSet(true);
      }
      if (incoming.get(1)) {
        struct.load5m = iprot.readDouble();
        struct.setLoad5mIsSet(true);
      }
      if (incoming.get(2)) {
        struct.load15m = iprot.readDouble();
        struct.setLoad15mIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

