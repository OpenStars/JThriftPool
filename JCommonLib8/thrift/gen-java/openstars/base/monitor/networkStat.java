/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.base.monitor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * network stat
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class networkStat implements org.apache.thrift.TBase<networkStat, networkStat._Fields>, java.io.Serializable, Cloneable, Comparable<networkStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("networkStat");

  private static final org.apache.thrift.protocol.TField READ_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("readSpeed", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField WRITE_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("writeSpeed", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new networkStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new networkStatTupleSchemeFactory();

  public long readSpeed; // required
  public long writeSpeed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    READ_SPEED((short)1, "readSpeed"),
    WRITE_SPEED((short)2, "writeSpeed");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // READ_SPEED
          return READ_SPEED;
        case 2: // WRITE_SPEED
          return WRITE_SPEED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READSPEED_ISSET_ID = 0;
  private static final int __WRITESPEED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.READ_SPEED, new org.apache.thrift.meta_data.FieldMetaData("readSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WRITE_SPEED, new org.apache.thrift.meta_data.FieldMetaData("writeSpeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(networkStat.class, metaDataMap);
  }

  public networkStat() {
  }

  public networkStat(
    long readSpeed,
    long writeSpeed)
  {
    this();
    this.readSpeed = readSpeed;
    setReadSpeedIsSet(true);
    this.writeSpeed = writeSpeed;
    setWriteSpeedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public networkStat(networkStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.readSpeed = other.readSpeed;
    this.writeSpeed = other.writeSpeed;
  }

  public networkStat deepCopy() {
    return new networkStat(this);
  }

  @Override
  public void clear() {
    setReadSpeedIsSet(false);
    this.readSpeed = 0;
    setWriteSpeedIsSet(false);
    this.writeSpeed = 0;
  }

  public long getReadSpeed() {
    return this.readSpeed;
  }

  public networkStat setReadSpeed(long readSpeed) {
    this.readSpeed = readSpeed;
    setReadSpeedIsSet(true);
    return this;
  }

  public void unsetReadSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READSPEED_ISSET_ID);
  }

  /** Returns true if field readSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetReadSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READSPEED_ISSET_ID);
  }

  public void setReadSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READSPEED_ISSET_ID, value);
  }

  public long getWriteSpeed() {
    return this.writeSpeed;
  }

  public networkStat setWriteSpeed(long writeSpeed) {
    this.writeSpeed = writeSpeed;
    setWriteSpeedIsSet(true);
    return this;
  }

  public void unsetWriteSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITESPEED_ISSET_ID);
  }

  /** Returns true if field writeSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITESPEED_ISSET_ID);
  }

  public void setWriteSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITESPEED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case READ_SPEED:
      if (value == null) {
        unsetReadSpeed();
      } else {
        setReadSpeed((java.lang.Long)value);
      }
      break;

    case WRITE_SPEED:
      if (value == null) {
        unsetWriteSpeed();
      } else {
        setWriteSpeed((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case READ_SPEED:
      return getReadSpeed();

    case WRITE_SPEED:
      return getWriteSpeed();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case READ_SPEED:
      return isSetReadSpeed();
    case WRITE_SPEED:
      return isSetWriteSpeed();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof networkStat)
      return this.equals((networkStat)that);
    return false;
  }

  public boolean equals(networkStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_readSpeed = true;
    boolean that_present_readSpeed = true;
    if (this_present_readSpeed || that_present_readSpeed) {
      if (!(this_present_readSpeed && that_present_readSpeed))
        return false;
      if (this.readSpeed != that.readSpeed)
        return false;
    }

    boolean this_present_writeSpeed = true;
    boolean that_present_writeSpeed = true;
    if (this_present_writeSpeed || that_present_writeSpeed) {
      if (!(this_present_writeSpeed && that_present_writeSpeed))
        return false;
      if (this.writeSpeed != that.writeSpeed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(readSpeed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(writeSpeed);

    return hashCode;
  }

  @Override
  public int compareTo(networkStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetReadSpeed()).compareTo(other.isSetReadSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readSpeed, other.readSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWriteSpeed()).compareTo(other.isSetWriteSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeSpeed, other.writeSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("networkStat(");
    boolean first = true;

    sb.append("readSpeed:");
    sb.append(this.readSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeSpeed:");
    sb.append(this.writeSpeed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class networkStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public networkStatStandardScheme getScheme() {
      return new networkStatStandardScheme();
    }
  }

  private static class networkStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<networkStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, networkStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // READ_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.readSpeed = iprot.readI64();
              struct.setReadSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WRITE_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.writeSpeed = iprot.readI64();
              struct.setWriteSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, networkStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(READ_SPEED_FIELD_DESC);
      oprot.writeI64(struct.readSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRITE_SPEED_FIELD_DESC);
      oprot.writeI64(struct.writeSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class networkStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public networkStatTupleScheme getScheme() {
      return new networkStatTupleScheme();
    }
  }

  private static class networkStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<networkStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, networkStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReadSpeed()) {
        optionals.set(0);
      }
      if (struct.isSetWriteSpeed()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReadSpeed()) {
        oprot.writeI64(struct.readSpeed);
      }
      if (struct.isSetWriteSpeed()) {
        oprot.writeI64(struct.writeSpeed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, networkStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.readSpeed = iprot.readI64();
        struct.setReadSpeedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.writeSpeed = iprot.readI64();
        struct.setWriteSpeedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

