/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.distributed;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class TDataMovingStatus implements org.apache.thrift.TBase<TDataMovingStatus, TDataMovingStatus._Fields>, java.io.Serializable, Cloneable, Comparable<TDataMovingStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataMovingStatus");

  private static final org.apache.thrift.protocol.TField FROM_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("fromHash", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TO_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("toHash", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalItem", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_CHECKED_FIELD_DESC = new org.apache.thrift.protocol.TField("numChecked", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_MOVED_FIELD_DESC = new org.apache.thrift.protocol.TField("numMoved", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField RUNNING_FIELD_DESC = new org.apache.thrift.protocol.TField("running", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDataMovingStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDataMovingStatusTupleSchemeFactory();

  public long fromHash; // required
  public long toHash; // required
  public long totalItem; // required
  public long numChecked; // required
  public long numMoved; // required
  public boolean running; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FROM_HASH((short)1, "fromHash"),
    TO_HASH((short)2, "toHash"),
    TOTAL_ITEM((short)3, "totalItem"),
    NUM_CHECKED((short)4, "numChecked"),
    NUM_MOVED((short)5, "numMoved"),
    RUNNING((short)6, "running");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_HASH
          return FROM_HASH;
        case 2: // TO_HASH
          return TO_HASH;
        case 3: // TOTAL_ITEM
          return TOTAL_ITEM;
        case 4: // NUM_CHECKED
          return NUM_CHECKED;
        case 5: // NUM_MOVED
          return NUM_MOVED;
        case 6: // RUNNING
          return RUNNING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FROMHASH_ISSET_ID = 0;
  private static final int __TOHASH_ISSET_ID = 1;
  private static final int __TOTALITEM_ISSET_ID = 2;
  private static final int __NUMCHECKED_ISSET_ID = 3;
  private static final int __NUMMOVED_ISSET_ID = 4;
  private static final int __RUNNING_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_HASH, new org.apache.thrift.meta_data.FieldMetaData("fromHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "THashType")));
    tmpMap.put(_Fields.TO_HASH, new org.apache.thrift.meta_data.FieldMetaData("toHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "THashType")));
    tmpMap.put(_Fields.TOTAL_ITEM, new org.apache.thrift.meta_data.FieldMetaData("totalItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_CHECKED, new org.apache.thrift.meta_data.FieldMetaData("numChecked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_MOVED, new org.apache.thrift.meta_data.FieldMetaData("numMoved", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNNING, new org.apache.thrift.meta_data.FieldMetaData("running", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataMovingStatus.class, metaDataMap);
  }

  public TDataMovingStatus() {
  }

  public TDataMovingStatus(
    long fromHash,
    long toHash,
    long totalItem,
    long numChecked,
    long numMoved,
    boolean running)
  {
    this();
    this.fromHash = fromHash;
    setFromHashIsSet(true);
    this.toHash = toHash;
    setToHashIsSet(true);
    this.totalItem = totalItem;
    setTotalItemIsSet(true);
    this.numChecked = numChecked;
    setNumCheckedIsSet(true);
    this.numMoved = numMoved;
    setNumMovedIsSet(true);
    this.running = running;
    setRunningIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataMovingStatus(TDataMovingStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fromHash = other.fromHash;
    this.toHash = other.toHash;
    this.totalItem = other.totalItem;
    this.numChecked = other.numChecked;
    this.numMoved = other.numMoved;
    this.running = other.running;
  }

  public TDataMovingStatus deepCopy() {
    return new TDataMovingStatus(this);
  }

  @Override
  public void clear() {
    setFromHashIsSet(false);
    this.fromHash = 0;
    setToHashIsSet(false);
    this.toHash = 0;
    setTotalItemIsSet(false);
    this.totalItem = 0;
    setNumCheckedIsSet(false);
    this.numChecked = 0;
    setNumMovedIsSet(false);
    this.numMoved = 0;
    setRunningIsSet(false);
    this.running = false;
  }

  public long getFromHash() {
    return this.fromHash;
  }

  public TDataMovingStatus setFromHash(long fromHash) {
    this.fromHash = fromHash;
    setFromHashIsSet(true);
    return this;
  }

  public void unsetFromHash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FROMHASH_ISSET_ID);
  }

  /** Returns true if field fromHash is set (has been assigned a value) and false otherwise */
  public boolean isSetFromHash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FROMHASH_ISSET_ID);
  }

  public void setFromHashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FROMHASH_ISSET_ID, value);
  }

  public long getToHash() {
    return this.toHash;
  }

  public TDataMovingStatus setToHash(long toHash) {
    this.toHash = toHash;
    setToHashIsSet(true);
    return this;
  }

  public void unsetToHash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOHASH_ISSET_ID);
  }

  /** Returns true if field toHash is set (has been assigned a value) and false otherwise */
  public boolean isSetToHash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOHASH_ISSET_ID);
  }

  public void setToHashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOHASH_ISSET_ID, value);
  }

  public long getTotalItem() {
    return this.totalItem;
  }

  public TDataMovingStatus setTotalItem(long totalItem) {
    this.totalItem = totalItem;
    setTotalItemIsSet(true);
    return this;
  }

  public void unsetTotalItem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALITEM_ISSET_ID);
  }

  /** Returns true if field totalItem is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalItem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALITEM_ISSET_ID);
  }

  public void setTotalItemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALITEM_ISSET_ID, value);
  }

  public long getNumChecked() {
    return this.numChecked;
  }

  public TDataMovingStatus setNumChecked(long numChecked) {
    this.numChecked = numChecked;
    setNumCheckedIsSet(true);
    return this;
  }

  public void unsetNumChecked() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMCHECKED_ISSET_ID);
  }

  /** Returns true if field numChecked is set (has been assigned a value) and false otherwise */
  public boolean isSetNumChecked() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMCHECKED_ISSET_ID);
  }

  public void setNumCheckedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMCHECKED_ISSET_ID, value);
  }

  public long getNumMoved() {
    return this.numMoved;
  }

  public TDataMovingStatus setNumMoved(long numMoved) {
    this.numMoved = numMoved;
    setNumMovedIsSet(true);
    return this;
  }

  public void unsetNumMoved() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMMOVED_ISSET_ID);
  }

  /** Returns true if field numMoved is set (has been assigned a value) and false otherwise */
  public boolean isSetNumMoved() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMMOVED_ISSET_ID);
  }

  public void setNumMovedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMMOVED_ISSET_ID, value);
  }

  public boolean isRunning() {
    return this.running;
  }

  public TDataMovingStatus setRunning(boolean running) {
    this.running = running;
    setRunningIsSet(true);
    return this;
  }

  public void unsetRunning() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNNING_ISSET_ID);
  }

  /** Returns true if field running is set (has been assigned a value) and false otherwise */
  public boolean isSetRunning() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNNING_ISSET_ID);
  }

  public void setRunningIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNNING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FROM_HASH:
      if (value == null) {
        unsetFromHash();
      } else {
        setFromHash((java.lang.Long)value);
      }
      break;

    case TO_HASH:
      if (value == null) {
        unsetToHash();
      } else {
        setToHash((java.lang.Long)value);
      }
      break;

    case TOTAL_ITEM:
      if (value == null) {
        unsetTotalItem();
      } else {
        setTotalItem((java.lang.Long)value);
      }
      break;

    case NUM_CHECKED:
      if (value == null) {
        unsetNumChecked();
      } else {
        setNumChecked((java.lang.Long)value);
      }
      break;

    case NUM_MOVED:
      if (value == null) {
        unsetNumMoved();
      } else {
        setNumMoved((java.lang.Long)value);
      }
      break;

    case RUNNING:
      if (value == null) {
        unsetRunning();
      } else {
        setRunning((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_HASH:
      return getFromHash();

    case TO_HASH:
      return getToHash();

    case TOTAL_ITEM:
      return getTotalItem();

    case NUM_CHECKED:
      return getNumChecked();

    case NUM_MOVED:
      return getNumMoved();

    case RUNNING:
      return isRunning();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FROM_HASH:
      return isSetFromHash();
    case TO_HASH:
      return isSetToHash();
    case TOTAL_ITEM:
      return isSetTotalItem();
    case NUM_CHECKED:
      return isSetNumChecked();
    case NUM_MOVED:
      return isSetNumMoved();
    case RUNNING:
      return isSetRunning();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TDataMovingStatus)
      return this.equals((TDataMovingStatus)that);
    return false;
  }

  public boolean equals(TDataMovingStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fromHash = true;
    boolean that_present_fromHash = true;
    if (this_present_fromHash || that_present_fromHash) {
      if (!(this_present_fromHash && that_present_fromHash))
        return false;
      if (this.fromHash != that.fromHash)
        return false;
    }

    boolean this_present_toHash = true;
    boolean that_present_toHash = true;
    if (this_present_toHash || that_present_toHash) {
      if (!(this_present_toHash && that_present_toHash))
        return false;
      if (this.toHash != that.toHash)
        return false;
    }

    boolean this_present_totalItem = true;
    boolean that_present_totalItem = true;
    if (this_present_totalItem || that_present_totalItem) {
      if (!(this_present_totalItem && that_present_totalItem))
        return false;
      if (this.totalItem != that.totalItem)
        return false;
    }

    boolean this_present_numChecked = true;
    boolean that_present_numChecked = true;
    if (this_present_numChecked || that_present_numChecked) {
      if (!(this_present_numChecked && that_present_numChecked))
        return false;
      if (this.numChecked != that.numChecked)
        return false;
    }

    boolean this_present_numMoved = true;
    boolean that_present_numMoved = true;
    if (this_present_numMoved || that_present_numMoved) {
      if (!(this_present_numMoved && that_present_numMoved))
        return false;
      if (this.numMoved != that.numMoved)
        return false;
    }

    boolean this_present_running = true;
    boolean that_present_running = true;
    if (this_present_running || that_present_running) {
      if (!(this_present_running && that_present_running))
        return false;
      if (this.running != that.running)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fromHash);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(toHash);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalItem);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numChecked);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numMoved);

    hashCode = hashCode * 8191 + ((running) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TDataMovingStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFromHash()).compareTo(other.isSetFromHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromHash, other.fromHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToHash()).compareTo(other.isSetToHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toHash, other.toHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalItem()).compareTo(other.isSetTotalItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalItem, other.totalItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumChecked()).compareTo(other.isSetNumChecked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumChecked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numChecked, other.numChecked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumMoved()).compareTo(other.isSetNumMoved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumMoved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMoved, other.numMoved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRunning()).compareTo(other.isSetRunning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.running, other.running);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDataMovingStatus(");
    boolean first = true;

    sb.append("fromHash:");
    sb.append(this.fromHash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("toHash:");
    sb.append(this.toHash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalItem:");
    sb.append(this.totalItem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numChecked:");
    sb.append(this.numChecked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numMoved:");
    sb.append(this.numMoved);
    first = false;
    if (!first) sb.append(", ");
    sb.append("running:");
    sb.append(this.running);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataMovingStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDataMovingStatusStandardScheme getScheme() {
      return new TDataMovingStatusStandardScheme();
    }
  }

  private static class TDataMovingStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDataMovingStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataMovingStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fromHash = iprot.readI64();
              struct.setFromHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toHash = iprot.readI64();
              struct.setToHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalItem = iprot.readI64();
              struct.setTotalItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_CHECKED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numChecked = iprot.readI64();
              struct.setNumCheckedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_MOVED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numMoved = iprot.readI64();
              struct.setNumMovedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RUNNING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.running = iprot.readBool();
              struct.setRunningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataMovingStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FROM_HASH_FIELD_DESC);
      oprot.writeI64(struct.fromHash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TO_HASH_FIELD_DESC);
      oprot.writeI64(struct.toHash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_ITEM_FIELD_DESC);
      oprot.writeI64(struct.totalItem);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_CHECKED_FIELD_DESC);
      oprot.writeI64(struct.numChecked);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_MOVED_FIELD_DESC);
      oprot.writeI64(struct.numMoved);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUNNING_FIELD_DESC);
      oprot.writeBool(struct.running);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataMovingStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDataMovingStatusTupleScheme getScheme() {
      return new TDataMovingStatusTupleScheme();
    }
  }

  private static class TDataMovingStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDataMovingStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataMovingStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFromHash()) {
        optionals.set(0);
      }
      if (struct.isSetToHash()) {
        optionals.set(1);
      }
      if (struct.isSetTotalItem()) {
        optionals.set(2);
      }
      if (struct.isSetNumChecked()) {
        optionals.set(3);
      }
      if (struct.isSetNumMoved()) {
        optionals.set(4);
      }
      if (struct.isSetRunning()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetFromHash()) {
        oprot.writeI64(struct.fromHash);
      }
      if (struct.isSetToHash()) {
        oprot.writeI64(struct.toHash);
      }
      if (struct.isSetTotalItem()) {
        oprot.writeI64(struct.totalItem);
      }
      if (struct.isSetNumChecked()) {
        oprot.writeI64(struct.numChecked);
      }
      if (struct.isSetNumMoved()) {
        oprot.writeI64(struct.numMoved);
      }
      if (struct.isSetRunning()) {
        oprot.writeBool(struct.running);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataMovingStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.fromHash = iprot.readI64();
        struct.setFromHashIsSet(true);
      }
      if (incoming.get(1)) {
        struct.toHash = iprot.readI64();
        struct.setToHashIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalItem = iprot.readI64();
        struct.setTotalItemIsSet(true);
      }
      if (incoming.get(3)) {
        struct.numChecked = iprot.readI64();
        struct.setNumCheckedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.numMoved = iprot.readI64();
        struct.setNumMovedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.running = iprot.readBool();
        struct.setRunningIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

