/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.base.storage.monitor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class opStat implements org.apache.thrift.TBase<opStat, opStat._Fields>, java.io.Serializable, Cloneable, Comparable<opStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("opStat");

  private static final org.apache.thrift.protocol.TField OPERATION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("operationCount", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CACHE_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheHit", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PERSISTENT_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("persistentHit", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXCUTE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("excuteTime", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new opStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new opStatTupleSchemeFactory();

  public long operationCount; // required
  public long cacheHit; // required
  public long persistentHit; // required
  public long excuteTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATION_COUNT((short)1, "operationCount"),
    CACHE_HIT((short)2, "cacheHit"),
    PERSISTENT_HIT((short)3, "persistentHit"),
    EXCUTE_TIME((short)4, "excuteTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATION_COUNT
          return OPERATION_COUNT;
        case 2: // CACHE_HIT
          return CACHE_HIT;
        case 3: // PERSISTENT_HIT
          return PERSISTENT_HIT;
        case 4: // EXCUTE_TIME
          return EXCUTE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATIONCOUNT_ISSET_ID = 0;
  private static final int __CACHEHIT_ISSET_ID = 1;
  private static final int __PERSISTENTHIT_ISSET_ID = 2;
  private static final int __EXCUTETIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("operationCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_HIT, new org.apache.thrift.meta_data.FieldMetaData("cacheHit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PERSISTENT_HIT, new org.apache.thrift.meta_data.FieldMetaData("persistentHit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXCUTE_TIME, new org.apache.thrift.meta_data.FieldMetaData("excuteTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(opStat.class, metaDataMap);
  }

  public opStat() {
  }

  public opStat(
    long operationCount,
    long cacheHit,
    long persistentHit,
    long excuteTime)
  {
    this();
    this.operationCount = operationCount;
    setOperationCountIsSet(true);
    this.cacheHit = cacheHit;
    setCacheHitIsSet(true);
    this.persistentHit = persistentHit;
    setPersistentHitIsSet(true);
    this.excuteTime = excuteTime;
    setExcuteTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public opStat(opStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operationCount = other.operationCount;
    this.cacheHit = other.cacheHit;
    this.persistentHit = other.persistentHit;
    this.excuteTime = other.excuteTime;
  }

  public opStat deepCopy() {
    return new opStat(this);
  }

  @Override
  public void clear() {
    setOperationCountIsSet(false);
    this.operationCount = 0;
    setCacheHitIsSet(false);
    this.cacheHit = 0;
    setPersistentHitIsSet(false);
    this.persistentHit = 0;
    setExcuteTimeIsSet(false);
    this.excuteTime = 0;
  }

  public long getOperationCount() {
    return this.operationCount;
  }

  public opStat setOperationCount(long operationCount) {
    this.operationCount = operationCount;
    setOperationCountIsSet(true);
    return this;
  }

  public void unsetOperationCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERATIONCOUNT_ISSET_ID);
  }

  /** Returns true if field operationCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERATIONCOUNT_ISSET_ID);
  }

  public void setOperationCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERATIONCOUNT_ISSET_ID, value);
  }

  public long getCacheHit() {
    return this.cacheHit;
  }

  public opStat setCacheHit(long cacheHit) {
    this.cacheHit = cacheHit;
    setCacheHitIsSet(true);
    return this;
  }

  public void unsetCacheHit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEHIT_ISSET_ID);
  }

  /** Returns true if field cacheHit is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheHit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEHIT_ISSET_ID);
  }

  public void setCacheHitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEHIT_ISSET_ID, value);
  }

  public long getPersistentHit() {
    return this.persistentHit;
  }

  public opStat setPersistentHit(long persistentHit) {
    this.persistentHit = persistentHit;
    setPersistentHitIsSet(true);
    return this;
  }

  public void unsetPersistentHit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PERSISTENTHIT_ISSET_ID);
  }

  /** Returns true if field persistentHit is set (has been assigned a value) and false otherwise */
  public boolean isSetPersistentHit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PERSISTENTHIT_ISSET_ID);
  }

  public void setPersistentHitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PERSISTENTHIT_ISSET_ID, value);
  }

  public long getExcuteTime() {
    return this.excuteTime;
  }

  public opStat setExcuteTime(long excuteTime) {
    this.excuteTime = excuteTime;
    setExcuteTimeIsSet(true);
    return this;
  }

  public void unsetExcuteTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXCUTETIME_ISSET_ID);
  }

  /** Returns true if field excuteTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExcuteTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXCUTETIME_ISSET_ID);
  }

  public void setExcuteTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXCUTETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OPERATION_COUNT:
      if (value == null) {
        unsetOperationCount();
      } else {
        setOperationCount((java.lang.Long)value);
      }
      break;

    case CACHE_HIT:
      if (value == null) {
        unsetCacheHit();
      } else {
        setCacheHit((java.lang.Long)value);
      }
      break;

    case PERSISTENT_HIT:
      if (value == null) {
        unsetPersistentHit();
      } else {
        setPersistentHit((java.lang.Long)value);
      }
      break;

    case EXCUTE_TIME:
      if (value == null) {
        unsetExcuteTime();
      } else {
        setExcuteTime((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATION_COUNT:
      return getOperationCount();

    case CACHE_HIT:
      return getCacheHit();

    case PERSISTENT_HIT:
      return getPersistentHit();

    case EXCUTE_TIME:
      return getExcuteTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OPERATION_COUNT:
      return isSetOperationCount();
    case CACHE_HIT:
      return isSetCacheHit();
    case PERSISTENT_HIT:
      return isSetPersistentHit();
    case EXCUTE_TIME:
      return isSetExcuteTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof opStat)
      return this.equals((opStat)that);
    return false;
  }

  public boolean equals(opStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_operationCount = true;
    boolean that_present_operationCount = true;
    if (this_present_operationCount || that_present_operationCount) {
      if (!(this_present_operationCount && that_present_operationCount))
        return false;
      if (this.operationCount != that.operationCount)
        return false;
    }

    boolean this_present_cacheHit = true;
    boolean that_present_cacheHit = true;
    if (this_present_cacheHit || that_present_cacheHit) {
      if (!(this_present_cacheHit && that_present_cacheHit))
        return false;
      if (this.cacheHit != that.cacheHit)
        return false;
    }

    boolean this_present_persistentHit = true;
    boolean that_present_persistentHit = true;
    if (this_present_persistentHit || that_present_persistentHit) {
      if (!(this_present_persistentHit && that_present_persistentHit))
        return false;
      if (this.persistentHit != that.persistentHit)
        return false;
    }

    boolean this_present_excuteTime = true;
    boolean that_present_excuteTime = true;
    if (this_present_excuteTime || that_present_excuteTime) {
      if (!(this_present_excuteTime && that_present_excuteTime))
        return false;
      if (this.excuteTime != that.excuteTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(operationCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheHit);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(persistentHit);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(excuteTime);

    return hashCode;
  }

  @Override
  public int compareTo(opStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOperationCount()).compareTo(other.isSetOperationCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationCount, other.operationCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheHit()).compareTo(other.isSetCacheHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheHit, other.cacheHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPersistentHit()).compareTo(other.isSetPersistentHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersistentHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persistentHit, other.persistentHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExcuteTime()).compareTo(other.isSetExcuteTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExcuteTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excuteTime, other.excuteTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("opStat(");
    boolean first = true;

    sb.append("operationCount:");
    sb.append(this.operationCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheHit:");
    sb.append(this.cacheHit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("persistentHit:");
    sb.append(this.persistentHit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("excuteTime:");
    sb.append(this.excuteTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class opStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public opStatStandardScheme getScheme() {
      return new opStatStandardScheme();
    }
  }

  private static class opStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<opStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, opStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operationCount = iprot.readI64();
              struct.setOperationCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CACHE_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheHit = iprot.readI64();
              struct.setCacheHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERSISTENT_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.persistentHit = iprot.readI64();
              struct.setPersistentHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCUTE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.excuteTime = iprot.readI64();
              struct.setExcuteTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, opStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATION_COUNT_FIELD_DESC);
      oprot.writeI64(struct.operationCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_HIT_FIELD_DESC);
      oprot.writeI64(struct.cacheHit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERSISTENT_HIT_FIELD_DESC);
      oprot.writeI64(struct.persistentHit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCUTE_TIME_FIELD_DESC);
      oprot.writeI64(struct.excuteTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class opStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public opStatTupleScheme getScheme() {
      return new opStatTupleScheme();
    }
  }

  private static class opStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<opStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, opStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOperationCount()) {
        optionals.set(0);
      }
      if (struct.isSetCacheHit()) {
        optionals.set(1);
      }
      if (struct.isSetPersistentHit()) {
        optionals.set(2);
      }
      if (struct.isSetExcuteTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOperationCount()) {
        oprot.writeI64(struct.operationCount);
      }
      if (struct.isSetCacheHit()) {
        oprot.writeI64(struct.cacheHit);
      }
      if (struct.isSetPersistentHit()) {
        oprot.writeI64(struct.persistentHit);
      }
      if (struct.isSetExcuteTime()) {
        oprot.writeI64(struct.excuteTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, opStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.operationCount = iprot.readI64();
        struct.setOperationCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cacheHit = iprot.readI64();
        struct.setCacheHitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.persistentHit = iprot.readI64();
        struct.setPersistentHitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.excuteTime = iprot.readI64();
        struct.setExcuteTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

