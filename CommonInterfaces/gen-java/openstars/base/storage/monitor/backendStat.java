/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.base.storage.monitor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class backendStat implements org.apache.thrift.TBase<backendStat, backendStat._Fields>, java.io.Serializable, Cloneable, Comparable<backendStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("backendStat");

  private static final org.apache.thrift.protocol.TField CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("cache", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SAVING_QUEUE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("savingQueueSize", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField WARMING_QUEUE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("warmingQueueSize", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField READ_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("readStat", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField WRITE_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("writeStat", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField WRITE_STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("writeStorage", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField READ_STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("readStorage", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PROCESS_MEM_KB_FIELD_DESC = new org.apache.thrift.protocol.TField("processMemKb", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField PROCESS_VIRT_KB_FIELD_DESC = new org.apache.thrift.protocol.TField("processVirtKb", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STORAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("storages", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new backendStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new backendStatTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable cacheStat cache; // required
  public long savingQueueSize; // required
  public long warmingQueueSize; // required
  public @org.apache.thrift.annotation.Nullable opStat readStat; // required
  public @org.apache.thrift.annotation.Nullable opStat writeStat; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> writeStorage; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> readStorage; // required
  public long processMemKb; // required
  public long processVirtKb; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,storageStat> storages; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CACHE((short)1, "cache"),
    SAVING_QUEUE_SIZE((short)2, "savingQueueSize"),
    WARMING_QUEUE_SIZE((short)3, "warmingQueueSize"),
    READ_STAT((short)4, "readStat"),
    WRITE_STAT((short)5, "writeStat"),
    WRITE_STORAGE((short)6, "writeStorage"),
    READ_STORAGE((short)7, "readStorage"),
    PROCESS_MEM_KB((short)8, "processMemKb"),
    PROCESS_VIRT_KB((short)9, "processVirtKb"),
    STORAGES((short)10, "storages");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CACHE
          return CACHE;
        case 2: // SAVING_QUEUE_SIZE
          return SAVING_QUEUE_SIZE;
        case 3: // WARMING_QUEUE_SIZE
          return WARMING_QUEUE_SIZE;
        case 4: // READ_STAT
          return READ_STAT;
        case 5: // WRITE_STAT
          return WRITE_STAT;
        case 6: // WRITE_STORAGE
          return WRITE_STORAGE;
        case 7: // READ_STORAGE
          return READ_STORAGE;
        case 8: // PROCESS_MEM_KB
          return PROCESS_MEM_KB;
        case 9: // PROCESS_VIRT_KB
          return PROCESS_VIRT_KB;
        case 10: // STORAGES
          return STORAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SAVINGQUEUESIZE_ISSET_ID = 0;
  private static final int __WARMINGQUEUESIZE_ISSET_ID = 1;
  private static final int __PROCESSMEMKB_ISSET_ID = 2;
  private static final int __PROCESSVIRTKB_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CACHE, new org.apache.thrift.meta_data.FieldMetaData("cache", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cacheStat.class)));
    tmpMap.put(_Fields.SAVING_QUEUE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("savingQueueSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WARMING_QUEUE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("warmingQueueSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_STAT, new org.apache.thrift.meta_data.FieldMetaData("readStat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, opStat.class)));
    tmpMap.put(_Fields.WRITE_STAT, new org.apache.thrift.meta_data.FieldMetaData("writeStat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, opStat.class)));
    tmpMap.put(_Fields.WRITE_STORAGE, new org.apache.thrift.meta_data.FieldMetaData("writeStorage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.READ_STORAGE, new org.apache.thrift.meta_data.FieldMetaData("readStorage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROCESS_MEM_KB, new org.apache.thrift.meta_data.FieldMetaData("processMemKb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROCESS_VIRT_KB, new org.apache.thrift.meta_data.FieldMetaData("processVirtKb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORAGES, new org.apache.thrift.meta_data.FieldMetaData("storages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, storageStat.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(backendStat.class, metaDataMap);
  }

  public backendStat() {
  }

  public backendStat(
    cacheStat cache,
    long savingQueueSize,
    long warmingQueueSize,
    opStat readStat,
    opStat writeStat,
    java.util.List<java.lang.String> writeStorage,
    java.util.List<java.lang.String> readStorage,
    long processMemKb,
    long processVirtKb,
    java.util.Map<java.lang.String,storageStat> storages)
  {
    this();
    this.cache = cache;
    this.savingQueueSize = savingQueueSize;
    setSavingQueueSizeIsSet(true);
    this.warmingQueueSize = warmingQueueSize;
    setWarmingQueueSizeIsSet(true);
    this.readStat = readStat;
    this.writeStat = writeStat;
    this.writeStorage = writeStorage;
    this.readStorage = readStorage;
    this.processMemKb = processMemKb;
    setProcessMemKbIsSet(true);
    this.processVirtKb = processVirtKb;
    setProcessVirtKbIsSet(true);
    this.storages = storages;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public backendStat(backendStat other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCache()) {
      this.cache = new cacheStat(other.cache);
    }
    this.savingQueueSize = other.savingQueueSize;
    this.warmingQueueSize = other.warmingQueueSize;
    if (other.isSetReadStat()) {
      this.readStat = new opStat(other.readStat);
    }
    if (other.isSetWriteStat()) {
      this.writeStat = new opStat(other.writeStat);
    }
    if (other.isSetWriteStorage()) {
      java.util.List<java.lang.String> __this__writeStorage = new java.util.ArrayList<java.lang.String>(other.writeStorage);
      this.writeStorage = __this__writeStorage;
    }
    if (other.isSetReadStorage()) {
      java.util.List<java.lang.String> __this__readStorage = new java.util.ArrayList<java.lang.String>(other.readStorage);
      this.readStorage = __this__readStorage;
    }
    this.processMemKb = other.processMemKb;
    this.processVirtKb = other.processVirtKb;
    if (other.isSetStorages()) {
      java.util.Map<java.lang.String,storageStat> __this__storages = new java.util.HashMap<java.lang.String,storageStat>(other.storages.size());
      for (java.util.Map.Entry<java.lang.String, storageStat> other_element : other.storages.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        storageStat other_element_value = other_element.getValue();

        java.lang.String __this__storages_copy_key = other_element_key;

        storageStat __this__storages_copy_value = new storageStat(other_element_value);

        __this__storages.put(__this__storages_copy_key, __this__storages_copy_value);
      }
      this.storages = __this__storages;
    }
  }

  public backendStat deepCopy() {
    return new backendStat(this);
  }

  @Override
  public void clear() {
    this.cache = null;
    setSavingQueueSizeIsSet(false);
    this.savingQueueSize = 0;
    setWarmingQueueSizeIsSet(false);
    this.warmingQueueSize = 0;
    this.readStat = null;
    this.writeStat = null;
    this.writeStorage = null;
    this.readStorage = null;
    setProcessMemKbIsSet(false);
    this.processMemKb = 0;
    setProcessVirtKbIsSet(false);
    this.processVirtKb = 0;
    this.storages = null;
  }

  @org.apache.thrift.annotation.Nullable
  public cacheStat getCache() {
    return this.cache;
  }

  public backendStat setCache(@org.apache.thrift.annotation.Nullable cacheStat cache) {
    this.cache = cache;
    return this;
  }

  public void unsetCache() {
    this.cache = null;
  }

  /** Returns true if field cache is set (has been assigned a value) and false otherwise */
  public boolean isSetCache() {
    return this.cache != null;
  }

  public void setCacheIsSet(boolean value) {
    if (!value) {
      this.cache = null;
    }
  }

  public long getSavingQueueSize() {
    return this.savingQueueSize;
  }

  public backendStat setSavingQueueSize(long savingQueueSize) {
    this.savingQueueSize = savingQueueSize;
    setSavingQueueSizeIsSet(true);
    return this;
  }

  public void unsetSavingQueueSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAVINGQUEUESIZE_ISSET_ID);
  }

  /** Returns true if field savingQueueSize is set (has been assigned a value) and false otherwise */
  public boolean isSetSavingQueueSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAVINGQUEUESIZE_ISSET_ID);
  }

  public void setSavingQueueSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAVINGQUEUESIZE_ISSET_ID, value);
  }

  public long getWarmingQueueSize() {
    return this.warmingQueueSize;
  }

  public backendStat setWarmingQueueSize(long warmingQueueSize) {
    this.warmingQueueSize = warmingQueueSize;
    setWarmingQueueSizeIsSet(true);
    return this;
  }

  public void unsetWarmingQueueSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WARMINGQUEUESIZE_ISSET_ID);
  }

  /** Returns true if field warmingQueueSize is set (has been assigned a value) and false otherwise */
  public boolean isSetWarmingQueueSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WARMINGQUEUESIZE_ISSET_ID);
  }

  public void setWarmingQueueSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WARMINGQUEUESIZE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public opStat getReadStat() {
    return this.readStat;
  }

  public backendStat setReadStat(@org.apache.thrift.annotation.Nullable opStat readStat) {
    this.readStat = readStat;
    return this;
  }

  public void unsetReadStat() {
    this.readStat = null;
  }

  /** Returns true if field readStat is set (has been assigned a value) and false otherwise */
  public boolean isSetReadStat() {
    return this.readStat != null;
  }

  public void setReadStatIsSet(boolean value) {
    if (!value) {
      this.readStat = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public opStat getWriteStat() {
    return this.writeStat;
  }

  public backendStat setWriteStat(@org.apache.thrift.annotation.Nullable opStat writeStat) {
    this.writeStat = writeStat;
    return this;
  }

  public void unsetWriteStat() {
    this.writeStat = null;
  }

  /** Returns true if field writeStat is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteStat() {
    return this.writeStat != null;
  }

  public void setWriteStatIsSet(boolean value) {
    if (!value) {
      this.writeStat = null;
    }
  }

  public int getWriteStorageSize() {
    return (this.writeStorage == null) ? 0 : this.writeStorage.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getWriteStorageIterator() {
    return (this.writeStorage == null) ? null : this.writeStorage.iterator();
  }

  public void addToWriteStorage(java.lang.String elem) {
    if (this.writeStorage == null) {
      this.writeStorage = new java.util.ArrayList<java.lang.String>();
    }
    this.writeStorage.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getWriteStorage() {
    return this.writeStorage;
  }

  public backendStat setWriteStorage(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> writeStorage) {
    this.writeStorage = writeStorage;
    return this;
  }

  public void unsetWriteStorage() {
    this.writeStorage = null;
  }

  /** Returns true if field writeStorage is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteStorage() {
    return this.writeStorage != null;
  }

  public void setWriteStorageIsSet(boolean value) {
    if (!value) {
      this.writeStorage = null;
    }
  }

  public int getReadStorageSize() {
    return (this.readStorage == null) ? 0 : this.readStorage.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getReadStorageIterator() {
    return (this.readStorage == null) ? null : this.readStorage.iterator();
  }

  public void addToReadStorage(java.lang.String elem) {
    if (this.readStorage == null) {
      this.readStorage = new java.util.ArrayList<java.lang.String>();
    }
    this.readStorage.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getReadStorage() {
    return this.readStorage;
  }

  public backendStat setReadStorage(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> readStorage) {
    this.readStorage = readStorage;
    return this;
  }

  public void unsetReadStorage() {
    this.readStorage = null;
  }

  /** Returns true if field readStorage is set (has been assigned a value) and false otherwise */
  public boolean isSetReadStorage() {
    return this.readStorage != null;
  }

  public void setReadStorageIsSet(boolean value) {
    if (!value) {
      this.readStorage = null;
    }
  }

  public long getProcessMemKb() {
    return this.processMemKb;
  }

  public backendStat setProcessMemKb(long processMemKb) {
    this.processMemKb = processMemKb;
    setProcessMemKbIsSet(true);
    return this;
  }

  public void unsetProcessMemKb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROCESSMEMKB_ISSET_ID);
  }

  /** Returns true if field processMemKb is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessMemKb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROCESSMEMKB_ISSET_ID);
  }

  public void setProcessMemKbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROCESSMEMKB_ISSET_ID, value);
  }

  public long getProcessVirtKb() {
    return this.processVirtKb;
  }

  public backendStat setProcessVirtKb(long processVirtKb) {
    this.processVirtKb = processVirtKb;
    setProcessVirtKbIsSet(true);
    return this;
  }

  public void unsetProcessVirtKb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROCESSVIRTKB_ISSET_ID);
  }

  /** Returns true if field processVirtKb is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessVirtKb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROCESSVIRTKB_ISSET_ID);
  }

  public void setProcessVirtKbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROCESSVIRTKB_ISSET_ID, value);
  }

  public int getStoragesSize() {
    return (this.storages == null) ? 0 : this.storages.size();
  }

  public void putToStorages(java.lang.String key, storageStat val) {
    if (this.storages == null) {
      this.storages = new java.util.HashMap<java.lang.String,storageStat>();
    }
    this.storages.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,storageStat> getStorages() {
    return this.storages;
  }

  public backendStat setStorages(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,storageStat> storages) {
    this.storages = storages;
    return this;
  }

  public void unsetStorages() {
    this.storages = null;
  }

  /** Returns true if field storages is set (has been assigned a value) and false otherwise */
  public boolean isSetStorages() {
    return this.storages != null;
  }

  public void setStoragesIsSet(boolean value) {
    if (!value) {
      this.storages = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CACHE:
      if (value == null) {
        unsetCache();
      } else {
        setCache((cacheStat)value);
      }
      break;

    case SAVING_QUEUE_SIZE:
      if (value == null) {
        unsetSavingQueueSize();
      } else {
        setSavingQueueSize((java.lang.Long)value);
      }
      break;

    case WARMING_QUEUE_SIZE:
      if (value == null) {
        unsetWarmingQueueSize();
      } else {
        setWarmingQueueSize((java.lang.Long)value);
      }
      break;

    case READ_STAT:
      if (value == null) {
        unsetReadStat();
      } else {
        setReadStat((opStat)value);
      }
      break;

    case WRITE_STAT:
      if (value == null) {
        unsetWriteStat();
      } else {
        setWriteStat((opStat)value);
      }
      break;

    case WRITE_STORAGE:
      if (value == null) {
        unsetWriteStorage();
      } else {
        setWriteStorage((java.util.List<java.lang.String>)value);
      }
      break;

    case READ_STORAGE:
      if (value == null) {
        unsetReadStorage();
      } else {
        setReadStorage((java.util.List<java.lang.String>)value);
      }
      break;

    case PROCESS_MEM_KB:
      if (value == null) {
        unsetProcessMemKb();
      } else {
        setProcessMemKb((java.lang.Long)value);
      }
      break;

    case PROCESS_VIRT_KB:
      if (value == null) {
        unsetProcessVirtKb();
      } else {
        setProcessVirtKb((java.lang.Long)value);
      }
      break;

    case STORAGES:
      if (value == null) {
        unsetStorages();
      } else {
        setStorages((java.util.Map<java.lang.String,storageStat>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CACHE:
      return getCache();

    case SAVING_QUEUE_SIZE:
      return getSavingQueueSize();

    case WARMING_QUEUE_SIZE:
      return getWarmingQueueSize();

    case READ_STAT:
      return getReadStat();

    case WRITE_STAT:
      return getWriteStat();

    case WRITE_STORAGE:
      return getWriteStorage();

    case READ_STORAGE:
      return getReadStorage();

    case PROCESS_MEM_KB:
      return getProcessMemKb();

    case PROCESS_VIRT_KB:
      return getProcessVirtKb();

    case STORAGES:
      return getStorages();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CACHE:
      return isSetCache();
    case SAVING_QUEUE_SIZE:
      return isSetSavingQueueSize();
    case WARMING_QUEUE_SIZE:
      return isSetWarmingQueueSize();
    case READ_STAT:
      return isSetReadStat();
    case WRITE_STAT:
      return isSetWriteStat();
    case WRITE_STORAGE:
      return isSetWriteStorage();
    case READ_STORAGE:
      return isSetReadStorage();
    case PROCESS_MEM_KB:
      return isSetProcessMemKb();
    case PROCESS_VIRT_KB:
      return isSetProcessVirtKb();
    case STORAGES:
      return isSetStorages();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof backendStat)
      return this.equals((backendStat)that);
    return false;
  }

  public boolean equals(backendStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cache = true && this.isSetCache();
    boolean that_present_cache = true && that.isSetCache();
    if (this_present_cache || that_present_cache) {
      if (!(this_present_cache && that_present_cache))
        return false;
      if (!this.cache.equals(that.cache))
        return false;
    }

    boolean this_present_savingQueueSize = true;
    boolean that_present_savingQueueSize = true;
    if (this_present_savingQueueSize || that_present_savingQueueSize) {
      if (!(this_present_savingQueueSize && that_present_savingQueueSize))
        return false;
      if (this.savingQueueSize != that.savingQueueSize)
        return false;
    }

    boolean this_present_warmingQueueSize = true;
    boolean that_present_warmingQueueSize = true;
    if (this_present_warmingQueueSize || that_present_warmingQueueSize) {
      if (!(this_present_warmingQueueSize && that_present_warmingQueueSize))
        return false;
      if (this.warmingQueueSize != that.warmingQueueSize)
        return false;
    }

    boolean this_present_readStat = true && this.isSetReadStat();
    boolean that_present_readStat = true && that.isSetReadStat();
    if (this_present_readStat || that_present_readStat) {
      if (!(this_present_readStat && that_present_readStat))
        return false;
      if (!this.readStat.equals(that.readStat))
        return false;
    }

    boolean this_present_writeStat = true && this.isSetWriteStat();
    boolean that_present_writeStat = true && that.isSetWriteStat();
    if (this_present_writeStat || that_present_writeStat) {
      if (!(this_present_writeStat && that_present_writeStat))
        return false;
      if (!this.writeStat.equals(that.writeStat))
        return false;
    }

    boolean this_present_writeStorage = true && this.isSetWriteStorage();
    boolean that_present_writeStorage = true && that.isSetWriteStorage();
    if (this_present_writeStorage || that_present_writeStorage) {
      if (!(this_present_writeStorage && that_present_writeStorage))
        return false;
      if (!this.writeStorage.equals(that.writeStorage))
        return false;
    }

    boolean this_present_readStorage = true && this.isSetReadStorage();
    boolean that_present_readStorage = true && that.isSetReadStorage();
    if (this_present_readStorage || that_present_readStorage) {
      if (!(this_present_readStorage && that_present_readStorage))
        return false;
      if (!this.readStorage.equals(that.readStorage))
        return false;
    }

    boolean this_present_processMemKb = true;
    boolean that_present_processMemKb = true;
    if (this_present_processMemKb || that_present_processMemKb) {
      if (!(this_present_processMemKb && that_present_processMemKb))
        return false;
      if (this.processMemKb != that.processMemKb)
        return false;
    }

    boolean this_present_processVirtKb = true;
    boolean that_present_processVirtKb = true;
    if (this_present_processVirtKb || that_present_processVirtKb) {
      if (!(this_present_processVirtKb && that_present_processVirtKb))
        return false;
      if (this.processVirtKb != that.processVirtKb)
        return false;
    }

    boolean this_present_storages = true && this.isSetStorages();
    boolean that_present_storages = true && that.isSetStorages();
    if (this_present_storages || that_present_storages) {
      if (!(this_present_storages && that_present_storages))
        return false;
      if (!this.storages.equals(that.storages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCache()) ? 131071 : 524287);
    if (isSetCache())
      hashCode = hashCode * 8191 + cache.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(savingQueueSize);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(warmingQueueSize);

    hashCode = hashCode * 8191 + ((isSetReadStat()) ? 131071 : 524287);
    if (isSetReadStat())
      hashCode = hashCode * 8191 + readStat.hashCode();

    hashCode = hashCode * 8191 + ((isSetWriteStat()) ? 131071 : 524287);
    if (isSetWriteStat())
      hashCode = hashCode * 8191 + writeStat.hashCode();

    hashCode = hashCode * 8191 + ((isSetWriteStorage()) ? 131071 : 524287);
    if (isSetWriteStorage())
      hashCode = hashCode * 8191 + writeStorage.hashCode();

    hashCode = hashCode * 8191 + ((isSetReadStorage()) ? 131071 : 524287);
    if (isSetReadStorage())
      hashCode = hashCode * 8191 + readStorage.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(processMemKb);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(processVirtKb);

    hashCode = hashCode * 8191 + ((isSetStorages()) ? 131071 : 524287);
    if (isSetStorages())
      hashCode = hashCode * 8191 + storages.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(backendStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCache()).compareTo(other.isSetCache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache, other.cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSavingQueueSize()).compareTo(other.isSetSavingQueueSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSavingQueueSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.savingQueueSize, other.savingQueueSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWarmingQueueSize()).compareTo(other.isSetWarmingQueueSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarmingQueueSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warmingQueueSize, other.warmingQueueSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadStat()).compareTo(other.isSetReadStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readStat, other.readStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWriteStat()).compareTo(other.isSetWriteStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeStat, other.writeStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWriteStorage()).compareTo(other.isSetWriteStorage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteStorage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeStorage, other.writeStorage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadStorage()).compareTo(other.isSetReadStorage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadStorage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readStorage, other.readStorage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProcessMemKb()).compareTo(other.isSetProcessMemKb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessMemKb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processMemKb, other.processMemKb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProcessVirtKb()).compareTo(other.isSetProcessVirtKb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessVirtKb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processVirtKb, other.processVirtKb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStorages()).compareTo(other.isSetStorages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storages, other.storages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("backendStat(");
    boolean first = true;

    sb.append("cache:");
    if (this.cache == null) {
      sb.append("null");
    } else {
      sb.append(this.cache);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("savingQueueSize:");
    sb.append(this.savingQueueSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warmingQueueSize:");
    sb.append(this.warmingQueueSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readStat:");
    if (this.readStat == null) {
      sb.append("null");
    } else {
      sb.append(this.readStat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeStat:");
    if (this.writeStat == null) {
      sb.append("null");
    } else {
      sb.append(this.writeStat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeStorage:");
    if (this.writeStorage == null) {
      sb.append("null");
    } else {
      sb.append(this.writeStorage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readStorage:");
    if (this.readStorage == null) {
      sb.append("null");
    } else {
      sb.append(this.readStorage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processMemKb:");
    sb.append(this.processMemKb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("processVirtKb:");
    sb.append(this.processVirtKb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("storages:");
    if (this.storages == null) {
      sb.append("null");
    } else {
      sb.append(this.storages);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cache != null) {
      cache.validate();
    }
    if (readStat != null) {
      readStat.validate();
    }
    if (writeStat != null) {
      writeStat.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class backendStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public backendStatStandardScheme getScheme() {
      return new backendStatStandardScheme();
    }
  }

  private static class backendStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<backendStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, backendStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cache = new cacheStat();
              struct.cache.read(iprot);
              struct.setCacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SAVING_QUEUE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.savingQueueSize = iprot.readI64();
              struct.setSavingQueueSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WARMING_QUEUE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.warmingQueueSize = iprot.readI64();
              struct.setWarmingQueueSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // READ_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.readStat = new opStat();
              struct.readStat.read(iprot);
              struct.setReadStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WRITE_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.writeStat = new opStat();
              struct.writeStat.read(iprot);
              struct.setWriteStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WRITE_STORAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.writeStorage = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.writeStorage.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setWriteStorageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // READ_STORAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.readStorage = new java.util.ArrayList<java.lang.String>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.readStorage.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setReadStorageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROCESS_MEM_KB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.processMemKb = iprot.readI64();
              struct.setProcessMemKbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROCESS_VIRT_KB
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.processVirtKb = iprot.readI64();
              struct.setProcessVirtKbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STORAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.storages = new java.util.HashMap<java.lang.String,storageStat>(2*_map6.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key7;
                @org.apache.thrift.annotation.Nullable storageStat _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  _val8 = new storageStat();
                  _val8.read(iprot);
                  struct.storages.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setStoragesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, backendStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cache != null) {
        oprot.writeFieldBegin(CACHE_FIELD_DESC);
        struct.cache.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SAVING_QUEUE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.savingQueueSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WARMING_QUEUE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.warmingQueueSize);
      oprot.writeFieldEnd();
      if (struct.readStat != null) {
        oprot.writeFieldBegin(READ_STAT_FIELD_DESC);
        struct.readStat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.writeStat != null) {
        oprot.writeFieldBegin(WRITE_STAT_FIELD_DESC);
        struct.writeStat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.writeStorage != null) {
        oprot.writeFieldBegin(WRITE_STORAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.writeStorage.size()));
          for (java.lang.String _iter10 : struct.writeStorage)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.readStorage != null) {
        oprot.writeFieldBegin(READ_STORAGE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.readStorage.size()));
          for (java.lang.String _iter11 : struct.readStorage)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROCESS_MEM_KB_FIELD_DESC);
      oprot.writeI64(struct.processMemKb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROCESS_VIRT_KB_FIELD_DESC);
      oprot.writeI64(struct.processVirtKb);
      oprot.writeFieldEnd();
      if (struct.storages != null) {
        oprot.writeFieldBegin(STORAGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.storages.size()));
          for (java.util.Map.Entry<java.lang.String, storageStat> _iter12 : struct.storages.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            _iter12.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class backendStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public backendStatTupleScheme getScheme() {
      return new backendStatTupleScheme();
    }
  }

  private static class backendStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<backendStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, backendStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCache()) {
        optionals.set(0);
      }
      if (struct.isSetSavingQueueSize()) {
        optionals.set(1);
      }
      if (struct.isSetWarmingQueueSize()) {
        optionals.set(2);
      }
      if (struct.isSetReadStat()) {
        optionals.set(3);
      }
      if (struct.isSetWriteStat()) {
        optionals.set(4);
      }
      if (struct.isSetWriteStorage()) {
        optionals.set(5);
      }
      if (struct.isSetReadStorage()) {
        optionals.set(6);
      }
      if (struct.isSetProcessMemKb()) {
        optionals.set(7);
      }
      if (struct.isSetProcessVirtKb()) {
        optionals.set(8);
      }
      if (struct.isSetStorages()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetCache()) {
        struct.cache.write(oprot);
      }
      if (struct.isSetSavingQueueSize()) {
        oprot.writeI64(struct.savingQueueSize);
      }
      if (struct.isSetWarmingQueueSize()) {
        oprot.writeI64(struct.warmingQueueSize);
      }
      if (struct.isSetReadStat()) {
        struct.readStat.write(oprot);
      }
      if (struct.isSetWriteStat()) {
        struct.writeStat.write(oprot);
      }
      if (struct.isSetWriteStorage()) {
        {
          oprot.writeI32(struct.writeStorage.size());
          for (java.lang.String _iter13 : struct.writeStorage)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetReadStorage()) {
        {
          oprot.writeI32(struct.readStorage.size());
          for (java.lang.String _iter14 : struct.readStorage)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetProcessMemKb()) {
        oprot.writeI64(struct.processMemKb);
      }
      if (struct.isSetProcessVirtKb()) {
        oprot.writeI64(struct.processVirtKb);
      }
      if (struct.isSetStorages()) {
        {
          oprot.writeI32(struct.storages.size());
          for (java.util.Map.Entry<java.lang.String, storageStat> _iter15 : struct.storages.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            _iter15.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, backendStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.cache = new cacheStat();
        struct.cache.read(iprot);
        struct.setCacheIsSet(true);
      }
      if (incoming.get(1)) {
        struct.savingQueueSize = iprot.readI64();
        struct.setSavingQueueSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.warmingQueueSize = iprot.readI64();
        struct.setWarmingQueueSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.readStat = new opStat();
        struct.readStat.read(iprot);
        struct.setReadStatIsSet(true);
      }
      if (incoming.get(4)) {
        struct.writeStat = new opStat();
        struct.writeStat.read(iprot);
        struct.setWriteStatIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.writeStorage = new java.util.ArrayList<java.lang.String>(_list16.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readString();
            struct.writeStorage.add(_elem17);
          }
        }
        struct.setWriteStorageIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.readStorage = new java.util.ArrayList<java.lang.String>(_list19.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem20;
          for (int _i21 = 0; _i21 < _list19.size; ++_i21)
          {
            _elem20 = iprot.readString();
            struct.readStorage.add(_elem20);
          }
        }
        struct.setReadStorageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.processMemKb = iprot.readI64();
        struct.setProcessMemKbIsSet(true);
      }
      if (incoming.get(8)) {
        struct.processVirtKb = iprot.readI64();
        struct.setProcessVirtKbIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.storages = new java.util.HashMap<java.lang.String,storageStat>(2*_map22.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key23;
          @org.apache.thrift.annotation.Nullable storageStat _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = new storageStat();
            _val24.read(iprot);
            struct.storages.put(_key23, _val24);
          }
        }
        struct.setStoragesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

