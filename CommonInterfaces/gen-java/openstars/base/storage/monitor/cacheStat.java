/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.base.storage.monitor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class cacheStat implements org.apache.thrift.TBase<cacheStat, cacheStat._Fields>, java.io.Serializable, Cloneable, Comparable<cacheStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cacheStat");

  private static final org.apache.thrift.protocol.TField CACHE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CACHE_MAX_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheMaxSize", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CACHE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheSize", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CACHE_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheHit", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CACHE_MISS_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheMiss", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CACHE_MEM_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("cacheMemSize", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cacheStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cacheStatTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String cacheType; // required
  public long cacheMaxSize; // required
  public long cacheSize; // required
  public long cacheHit; // required
  public long cacheMiss; // required
  public long cacheMemSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CACHE_TYPE((short)1, "cacheType"),
    CACHE_MAX_SIZE((short)2, "cacheMaxSize"),
    CACHE_SIZE((short)3, "cacheSize"),
    CACHE_HIT((short)4, "cacheHit"),
    CACHE_MISS((short)5, "cacheMiss"),
    CACHE_MEM_SIZE((short)6, "cacheMemSize");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CACHE_TYPE
          return CACHE_TYPE;
        case 2: // CACHE_MAX_SIZE
          return CACHE_MAX_SIZE;
        case 3: // CACHE_SIZE
          return CACHE_SIZE;
        case 4: // CACHE_HIT
          return CACHE_HIT;
        case 5: // CACHE_MISS
          return CACHE_MISS;
        case 6: // CACHE_MEM_SIZE
          return CACHE_MEM_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CACHEMAXSIZE_ISSET_ID = 0;
  private static final int __CACHESIZE_ISSET_ID = 1;
  private static final int __CACHEHIT_ISSET_ID = 2;
  private static final int __CACHEMISS_ISSET_ID = 3;
  private static final int __CACHEMEMSIZE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CACHE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cacheType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CACHE_MAX_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cacheMaxSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cacheSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_HIT, new org.apache.thrift.meta_data.FieldMetaData("cacheHit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_MISS, new org.apache.thrift.meta_data.FieldMetaData("cacheMiss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_MEM_SIZE, new org.apache.thrift.meta_data.FieldMetaData("cacheMemSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cacheStat.class, metaDataMap);
  }

  public cacheStat() {
  }

  public cacheStat(
    java.lang.String cacheType,
    long cacheMaxSize,
    long cacheSize,
    long cacheHit,
    long cacheMiss,
    long cacheMemSize)
  {
    this();
    this.cacheType = cacheType;
    this.cacheMaxSize = cacheMaxSize;
    setCacheMaxSizeIsSet(true);
    this.cacheSize = cacheSize;
    setCacheSizeIsSet(true);
    this.cacheHit = cacheHit;
    setCacheHitIsSet(true);
    this.cacheMiss = cacheMiss;
    setCacheMissIsSet(true);
    this.cacheMemSize = cacheMemSize;
    setCacheMemSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public cacheStat(cacheStat other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCacheType()) {
      this.cacheType = other.cacheType;
    }
    this.cacheMaxSize = other.cacheMaxSize;
    this.cacheSize = other.cacheSize;
    this.cacheHit = other.cacheHit;
    this.cacheMiss = other.cacheMiss;
    this.cacheMemSize = other.cacheMemSize;
  }

  public cacheStat deepCopy() {
    return new cacheStat(this);
  }

  @Override
  public void clear() {
    this.cacheType = null;
    setCacheMaxSizeIsSet(false);
    this.cacheMaxSize = 0;
    setCacheSizeIsSet(false);
    this.cacheSize = 0;
    setCacheHitIsSet(false);
    this.cacheHit = 0;
    setCacheMissIsSet(false);
    this.cacheMiss = 0;
    setCacheMemSizeIsSet(false);
    this.cacheMemSize = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCacheType() {
    return this.cacheType;
  }

  public cacheStat setCacheType(@org.apache.thrift.annotation.Nullable java.lang.String cacheType) {
    this.cacheType = cacheType;
    return this;
  }

  public void unsetCacheType() {
    this.cacheType = null;
  }

  /** Returns true if field cacheType is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheType() {
    return this.cacheType != null;
  }

  public void setCacheTypeIsSet(boolean value) {
    if (!value) {
      this.cacheType = null;
    }
  }

  public long getCacheMaxSize() {
    return this.cacheMaxSize;
  }

  public cacheStat setCacheMaxSize(long cacheMaxSize) {
    this.cacheMaxSize = cacheMaxSize;
    setCacheMaxSizeIsSet(true);
    return this;
  }

  public void unsetCacheMaxSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEMAXSIZE_ISSET_ID);
  }

  /** Returns true if field cacheMaxSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheMaxSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEMAXSIZE_ISSET_ID);
  }

  public void setCacheMaxSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEMAXSIZE_ISSET_ID, value);
  }

  public long getCacheSize() {
    return this.cacheSize;
  }

  public cacheStat setCacheSize(long cacheSize) {
    this.cacheSize = cacheSize;
    setCacheSizeIsSet(true);
    return this;
  }

  public void unsetCacheSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHESIZE_ISSET_ID);
  }

  /** Returns true if field cacheSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHESIZE_ISSET_ID);
  }

  public void setCacheSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHESIZE_ISSET_ID, value);
  }

  public long getCacheHit() {
    return this.cacheHit;
  }

  public cacheStat setCacheHit(long cacheHit) {
    this.cacheHit = cacheHit;
    setCacheHitIsSet(true);
    return this;
  }

  public void unsetCacheHit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEHIT_ISSET_ID);
  }

  /** Returns true if field cacheHit is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheHit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEHIT_ISSET_ID);
  }

  public void setCacheHitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEHIT_ISSET_ID, value);
  }

  public long getCacheMiss() {
    return this.cacheMiss;
  }

  public cacheStat setCacheMiss(long cacheMiss) {
    this.cacheMiss = cacheMiss;
    setCacheMissIsSet(true);
    return this;
  }

  public void unsetCacheMiss() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEMISS_ISSET_ID);
  }

  /** Returns true if field cacheMiss is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheMiss() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEMISS_ISSET_ID);
  }

  public void setCacheMissIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEMISS_ISSET_ID, value);
  }

  public long getCacheMemSize() {
    return this.cacheMemSize;
  }

  public cacheStat setCacheMemSize(long cacheMemSize) {
    this.cacheMemSize = cacheMemSize;
    setCacheMemSizeIsSet(true);
    return this;
  }

  public void unsetCacheMemSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CACHEMEMSIZE_ISSET_ID);
  }

  /** Returns true if field cacheMemSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCacheMemSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CACHEMEMSIZE_ISSET_ID);
  }

  public void setCacheMemSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CACHEMEMSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CACHE_TYPE:
      if (value == null) {
        unsetCacheType();
      } else {
        setCacheType((java.lang.String)value);
      }
      break;

    case CACHE_MAX_SIZE:
      if (value == null) {
        unsetCacheMaxSize();
      } else {
        setCacheMaxSize((java.lang.Long)value);
      }
      break;

    case CACHE_SIZE:
      if (value == null) {
        unsetCacheSize();
      } else {
        setCacheSize((java.lang.Long)value);
      }
      break;

    case CACHE_HIT:
      if (value == null) {
        unsetCacheHit();
      } else {
        setCacheHit((java.lang.Long)value);
      }
      break;

    case CACHE_MISS:
      if (value == null) {
        unsetCacheMiss();
      } else {
        setCacheMiss((java.lang.Long)value);
      }
      break;

    case CACHE_MEM_SIZE:
      if (value == null) {
        unsetCacheMemSize();
      } else {
        setCacheMemSize((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CACHE_TYPE:
      return getCacheType();

    case CACHE_MAX_SIZE:
      return getCacheMaxSize();

    case CACHE_SIZE:
      return getCacheSize();

    case CACHE_HIT:
      return getCacheHit();

    case CACHE_MISS:
      return getCacheMiss();

    case CACHE_MEM_SIZE:
      return getCacheMemSize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CACHE_TYPE:
      return isSetCacheType();
    case CACHE_MAX_SIZE:
      return isSetCacheMaxSize();
    case CACHE_SIZE:
      return isSetCacheSize();
    case CACHE_HIT:
      return isSetCacheHit();
    case CACHE_MISS:
      return isSetCacheMiss();
    case CACHE_MEM_SIZE:
      return isSetCacheMemSize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof cacheStat)
      return this.equals((cacheStat)that);
    return false;
  }

  public boolean equals(cacheStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cacheType = true && this.isSetCacheType();
    boolean that_present_cacheType = true && that.isSetCacheType();
    if (this_present_cacheType || that_present_cacheType) {
      if (!(this_present_cacheType && that_present_cacheType))
        return false;
      if (!this.cacheType.equals(that.cacheType))
        return false;
    }

    boolean this_present_cacheMaxSize = true;
    boolean that_present_cacheMaxSize = true;
    if (this_present_cacheMaxSize || that_present_cacheMaxSize) {
      if (!(this_present_cacheMaxSize && that_present_cacheMaxSize))
        return false;
      if (this.cacheMaxSize != that.cacheMaxSize)
        return false;
    }

    boolean this_present_cacheSize = true;
    boolean that_present_cacheSize = true;
    if (this_present_cacheSize || that_present_cacheSize) {
      if (!(this_present_cacheSize && that_present_cacheSize))
        return false;
      if (this.cacheSize != that.cacheSize)
        return false;
    }

    boolean this_present_cacheHit = true;
    boolean that_present_cacheHit = true;
    if (this_present_cacheHit || that_present_cacheHit) {
      if (!(this_present_cacheHit && that_present_cacheHit))
        return false;
      if (this.cacheHit != that.cacheHit)
        return false;
    }

    boolean this_present_cacheMiss = true;
    boolean that_present_cacheMiss = true;
    if (this_present_cacheMiss || that_present_cacheMiss) {
      if (!(this_present_cacheMiss && that_present_cacheMiss))
        return false;
      if (this.cacheMiss != that.cacheMiss)
        return false;
    }

    boolean this_present_cacheMemSize = true;
    boolean that_present_cacheMemSize = true;
    if (this_present_cacheMemSize || that_present_cacheMemSize) {
      if (!(this_present_cacheMemSize && that_present_cacheMemSize))
        return false;
      if (this.cacheMemSize != that.cacheMemSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCacheType()) ? 131071 : 524287);
    if (isSetCacheType())
      hashCode = hashCode * 8191 + cacheType.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheMaxSize);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheSize);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheHit);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheMiss);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cacheMemSize);

    return hashCode;
  }

  @Override
  public int compareTo(cacheStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCacheType()).compareTo(other.isSetCacheType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheType, other.cacheType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheMaxSize()).compareTo(other.isSetCacheMaxSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheMaxSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheMaxSize, other.cacheMaxSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheSize()).compareTo(other.isSetCacheSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheSize, other.cacheSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheHit()).compareTo(other.isSetCacheHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheHit, other.cacheHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheMiss()).compareTo(other.isSetCacheMiss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheMiss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheMiss, other.cacheMiss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCacheMemSize()).compareTo(other.isSetCacheMemSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCacheMemSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cacheMemSize, other.cacheMemSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("cacheStat(");
    boolean first = true;

    sb.append("cacheType:");
    if (this.cacheType == null) {
      sb.append("null");
    } else {
      sb.append(this.cacheType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheMaxSize:");
    sb.append(this.cacheMaxSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheSize:");
    sb.append(this.cacheSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheHit:");
    sb.append(this.cacheHit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheMiss:");
    sb.append(this.cacheMiss);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cacheMemSize:");
    sb.append(this.cacheMemSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class cacheStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public cacheStatStandardScheme getScheme() {
      return new cacheStatStandardScheme();
    }
  }

  private static class cacheStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<cacheStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, cacheStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CACHE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cacheType = iprot.readString();
              struct.setCacheTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CACHE_MAX_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheMaxSize = iprot.readI64();
              struct.setCacheMaxSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CACHE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheSize = iprot.readI64();
              struct.setCacheSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CACHE_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheHit = iprot.readI64();
              struct.setCacheHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CACHE_MISS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheMiss = iprot.readI64();
              struct.setCacheMissIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CACHE_MEM_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cacheMemSize = iprot.readI64();
              struct.setCacheMemSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, cacheStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cacheType != null) {
        oprot.writeFieldBegin(CACHE_TYPE_FIELD_DESC);
        oprot.writeString(struct.cacheType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CACHE_MAX_SIZE_FIELD_DESC);
      oprot.writeI64(struct.cacheMaxSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.cacheSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_HIT_FIELD_DESC);
      oprot.writeI64(struct.cacheHit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_MISS_FIELD_DESC);
      oprot.writeI64(struct.cacheMiss);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CACHE_MEM_SIZE_FIELD_DESC);
      oprot.writeI64(struct.cacheMemSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class cacheStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public cacheStatTupleScheme getScheme() {
      return new cacheStatTupleScheme();
    }
  }

  private static class cacheStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<cacheStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, cacheStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCacheType()) {
        optionals.set(0);
      }
      if (struct.isSetCacheMaxSize()) {
        optionals.set(1);
      }
      if (struct.isSetCacheSize()) {
        optionals.set(2);
      }
      if (struct.isSetCacheHit()) {
        optionals.set(3);
      }
      if (struct.isSetCacheMiss()) {
        optionals.set(4);
      }
      if (struct.isSetCacheMemSize()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCacheType()) {
        oprot.writeString(struct.cacheType);
      }
      if (struct.isSetCacheMaxSize()) {
        oprot.writeI64(struct.cacheMaxSize);
      }
      if (struct.isSetCacheSize()) {
        oprot.writeI64(struct.cacheSize);
      }
      if (struct.isSetCacheHit()) {
        oprot.writeI64(struct.cacheHit);
      }
      if (struct.isSetCacheMiss()) {
        oprot.writeI64(struct.cacheMiss);
      }
      if (struct.isSetCacheMemSize()) {
        oprot.writeI64(struct.cacheMemSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, cacheStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.cacheType = iprot.readString();
        struct.setCacheTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cacheMaxSize = iprot.readI64();
        struct.setCacheMaxSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cacheSize = iprot.readI64();
        struct.setCacheSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cacheHit = iprot.readI64();
        struct.setCacheHitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cacheMiss = iprot.readI64();
        struct.setCacheMissIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cacheMemSize = iprot.readI64();
        struct.setCacheMemSizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

