/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.base.monitor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * system stat
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class systemStat implements org.apache.thrift.TBase<systemStat, systemStat._Fields>, java.io.Serializable, Cloneable, Comparable<systemStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("systemStat");

  private static final org.apache.thrift.protocol.TField CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SYSLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("sysload", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DISKS_FIELD_DESC = new org.apache.thrift.protocol.TField("disks", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField NETWORKS_FIELD_DESC = new org.apache.thrift.protocol.TField("networks", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("seconds", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new systemStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new systemStatTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable cpuStat cpu; // required
  public @org.apache.thrift.annotation.Nullable memoryStat memory; // required
  public @org.apache.thrift.annotation.Nullable systemLoad sysload; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,diskStat> disks; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,networkStat> networks; // required
  public long timestamp; // required
  public int seconds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CPU((short)1, "cpu"),
    MEMORY((short)2, "memory"),
    SYSLOAD((short)3, "sysload"),
    DISKS((short)4, "disks"),
    NETWORKS((short)5, "networks"),
    TIMESTAMP((short)6, "timestamp"),
    SECONDS((short)7, "seconds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPU
          return CPU;
        case 2: // MEMORY
          return MEMORY;
        case 3: // SYSLOAD
          return SYSLOAD;
        case 4: // DISKS
          return DISKS;
        case 5: // NETWORKS
          return NETWORKS;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        case 7: // SECONDS
          return SECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __SECONDS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPU, new org.apache.thrift.meta_data.FieldMetaData("cpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, cpuStat.class)));
    tmpMap.put(_Fields.MEMORY, new org.apache.thrift.meta_data.FieldMetaData("memory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, memoryStat.class)));
    tmpMap.put(_Fields.SYSLOAD, new org.apache.thrift.meta_data.FieldMetaData("sysload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, systemLoad.class)));
    tmpMap.put(_Fields.DISKS, new org.apache.thrift.meta_data.FieldMetaData("disks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "diskStats")));
    tmpMap.put(_Fields.NETWORKS, new org.apache.thrift.meta_data.FieldMetaData("networks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "networkStats")));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SECONDS, new org.apache.thrift.meta_data.FieldMetaData("seconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(systemStat.class, metaDataMap);
  }

  public systemStat() {
  }

  public systemStat(
    cpuStat cpu,
    memoryStat memory,
    systemLoad sysload,
    java.util.Map<java.lang.String,diskStat> disks,
    java.util.Map<java.lang.String,networkStat> networks,
    long timestamp,
    int seconds)
  {
    this();
    this.cpu = cpu;
    this.memory = memory;
    this.sysload = sysload;
    this.disks = disks;
    this.networks = networks;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.seconds = seconds;
    setSecondsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public systemStat(systemStat other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCpu()) {
      this.cpu = new cpuStat(other.cpu);
    }
    if (other.isSetMemory()) {
      this.memory = new memoryStat(other.memory);
    }
    if (other.isSetSysload()) {
      this.sysload = new systemLoad(other.sysload);
    }
    if (other.isSetDisks()) {
      java.util.Map<java.lang.String,diskStat> __this__disks = new java.util.HashMap<java.lang.String,diskStat>(other.disks.size());
      for (java.util.Map.Entry<java.lang.String, diskStat> other_element : other.disks.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        diskStat other_element_value = other_element.getValue();

        java.lang.String __this__disks_copy_key = other_element_key;

        diskStat __this__disks_copy_value = new diskStat(other_element_value);

        __this__disks.put(__this__disks_copy_key, __this__disks_copy_value);
      }
      this.disks = __this__disks;
    }
    if (other.isSetNetworks()) {
      java.util.Map<java.lang.String,networkStat> __this__networks = new java.util.HashMap<java.lang.String,networkStat>(other.networks.size());
      for (java.util.Map.Entry<java.lang.String, networkStat> other_element : other.networks.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        networkStat other_element_value = other_element.getValue();

        java.lang.String __this__networks_copy_key = other_element_key;

        networkStat __this__networks_copy_value = new networkStat(other_element_value);

        __this__networks.put(__this__networks_copy_key, __this__networks_copy_value);
      }
      this.networks = __this__networks;
    }
    this.timestamp = other.timestamp;
    this.seconds = other.seconds;
  }

  public systemStat deepCopy() {
    return new systemStat(this);
  }

  @Override
  public void clear() {
    this.cpu = null;
    this.memory = null;
    this.sysload = null;
    this.disks = null;
    this.networks = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setSecondsIsSet(false);
    this.seconds = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public cpuStat getCpu() {
    return this.cpu;
  }

  public systemStat setCpu(@org.apache.thrift.annotation.Nullable cpuStat cpu) {
    this.cpu = cpu;
    return this;
  }

  public void unsetCpu() {
    this.cpu = null;
  }

  /** Returns true if field cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu() {
    return this.cpu != null;
  }

  public void setCpuIsSet(boolean value) {
    if (!value) {
      this.cpu = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public memoryStat getMemory() {
    return this.memory;
  }

  public systemStat setMemory(@org.apache.thrift.annotation.Nullable memoryStat memory) {
    this.memory = memory;
    return this;
  }

  public void unsetMemory() {
    this.memory = null;
  }

  /** Returns true if field memory is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory() {
    return this.memory != null;
  }

  public void setMemoryIsSet(boolean value) {
    if (!value) {
      this.memory = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public systemLoad getSysload() {
    return this.sysload;
  }

  public systemStat setSysload(@org.apache.thrift.annotation.Nullable systemLoad sysload) {
    this.sysload = sysload;
    return this;
  }

  public void unsetSysload() {
    this.sysload = null;
  }

  /** Returns true if field sysload is set (has been assigned a value) and false otherwise */
  public boolean isSetSysload() {
    return this.sysload != null;
  }

  public void setSysloadIsSet(boolean value) {
    if (!value) {
      this.sysload = null;
    }
  }

  public int getDisksSize() {
    return (this.disks == null) ? 0 : this.disks.size();
  }

  public void putToDisks(java.lang.String key, diskStat val) {
    if (this.disks == null) {
      this.disks = new java.util.HashMap<java.lang.String,diskStat>();
    }
    this.disks.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,diskStat> getDisks() {
    return this.disks;
  }

  public systemStat setDisks(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,diskStat> disks) {
    this.disks = disks;
    return this;
  }

  public void unsetDisks() {
    this.disks = null;
  }

  /** Returns true if field disks is set (has been assigned a value) and false otherwise */
  public boolean isSetDisks() {
    return this.disks != null;
  }

  public void setDisksIsSet(boolean value) {
    if (!value) {
      this.disks = null;
    }
  }

  public int getNetworksSize() {
    return (this.networks == null) ? 0 : this.networks.size();
  }

  public void putToNetworks(java.lang.String key, networkStat val) {
    if (this.networks == null) {
      this.networks = new java.util.HashMap<java.lang.String,networkStat>();
    }
    this.networks.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,networkStat> getNetworks() {
    return this.networks;
  }

  public systemStat setNetworks(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,networkStat> networks) {
    this.networks = networks;
    return this;
  }

  public void unsetNetworks() {
    this.networks = null;
  }

  /** Returns true if field networks is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworks() {
    return this.networks != null;
  }

  public void setNetworksIsSet(boolean value) {
    if (!value) {
      this.networks = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public systemStat setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getSeconds() {
    return this.seconds;
  }

  public systemStat setSeconds(int seconds) {
    this.seconds = seconds;
    setSecondsIsSet(true);
    return this;
  }

  public void unsetSeconds() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECONDS_ISSET_ID);
  }

  /** Returns true if field seconds is set (has been assigned a value) and false otherwise */
  public boolean isSetSeconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECONDS_ISSET_ID);
  }

  public void setSecondsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CPU:
      if (value == null) {
        unsetCpu();
      } else {
        setCpu((cpuStat)value);
      }
      break;

    case MEMORY:
      if (value == null) {
        unsetMemory();
      } else {
        setMemory((memoryStat)value);
      }
      break;

    case SYSLOAD:
      if (value == null) {
        unsetSysload();
      } else {
        setSysload((systemLoad)value);
      }
      break;

    case DISKS:
      if (value == null) {
        unsetDisks();
      } else {
        setDisks((java.util.Map<java.lang.String,diskStat>)value);
      }
      break;

    case NETWORKS:
      if (value == null) {
        unsetNetworks();
      } else {
        setNetworks((java.util.Map<java.lang.String,networkStat>)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case SECONDS:
      if (value == null) {
        unsetSeconds();
      } else {
        setSeconds((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CPU:
      return getCpu();

    case MEMORY:
      return getMemory();

    case SYSLOAD:
      return getSysload();

    case DISKS:
      return getDisks();

    case NETWORKS:
      return getNetworks();

    case TIMESTAMP:
      return getTimestamp();

    case SECONDS:
      return getSeconds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CPU:
      return isSetCpu();
    case MEMORY:
      return isSetMemory();
    case SYSLOAD:
      return isSetSysload();
    case DISKS:
      return isSetDisks();
    case NETWORKS:
      return isSetNetworks();
    case TIMESTAMP:
      return isSetTimestamp();
    case SECONDS:
      return isSetSeconds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof systemStat)
      return this.equals((systemStat)that);
    return false;
  }

  public boolean equals(systemStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cpu = true && this.isSetCpu();
    boolean that_present_cpu = true && that.isSetCpu();
    if (this_present_cpu || that_present_cpu) {
      if (!(this_present_cpu && that_present_cpu))
        return false;
      if (!this.cpu.equals(that.cpu))
        return false;
    }

    boolean this_present_memory = true && this.isSetMemory();
    boolean that_present_memory = true && that.isSetMemory();
    if (this_present_memory || that_present_memory) {
      if (!(this_present_memory && that_present_memory))
        return false;
      if (!this.memory.equals(that.memory))
        return false;
    }

    boolean this_present_sysload = true && this.isSetSysload();
    boolean that_present_sysload = true && that.isSetSysload();
    if (this_present_sysload || that_present_sysload) {
      if (!(this_present_sysload && that_present_sysload))
        return false;
      if (!this.sysload.equals(that.sysload))
        return false;
    }

    boolean this_present_disks = true && this.isSetDisks();
    boolean that_present_disks = true && that.isSetDisks();
    if (this_present_disks || that_present_disks) {
      if (!(this_present_disks && that_present_disks))
        return false;
      if (!this.disks.equals(that.disks))
        return false;
    }

    boolean this_present_networks = true && this.isSetNetworks();
    boolean that_present_networks = true && that.isSetNetworks();
    if (this_present_networks || that_present_networks) {
      if (!(this_present_networks && that_present_networks))
        return false;
      if (!this.networks.equals(that.networks))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_seconds = true;
    boolean that_present_seconds = true;
    if (this_present_seconds || that_present_seconds) {
      if (!(this_present_seconds && that_present_seconds))
        return false;
      if (this.seconds != that.seconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCpu()) ? 131071 : 524287);
    if (isSetCpu())
      hashCode = hashCode * 8191 + cpu.hashCode();

    hashCode = hashCode * 8191 + ((isSetMemory()) ? 131071 : 524287);
    if (isSetMemory())
      hashCode = hashCode * 8191 + memory.hashCode();

    hashCode = hashCode * 8191 + ((isSetSysload()) ? 131071 : 524287);
    if (isSetSysload())
      hashCode = hashCode * 8191 + sysload.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisks()) ? 131071 : 524287);
    if (isSetDisks())
      hashCode = hashCode * 8191 + disks.hashCode();

    hashCode = hashCode * 8191 + ((isSetNetworks()) ? 131071 : 524287);
    if (isSetNetworks())
      hashCode = hashCode * 8191 + networks.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + seconds;

    return hashCode;
  }

  @Override
  public int compareTo(systemStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCpu()).compareTo(other.isSetCpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu, other.cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemory()).compareTo(other.isSetMemory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, other.memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysload()).compareTo(other.isSetSysload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysload, other.sysload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisks()).compareTo(other.isSetDisks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disks, other.disks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNetworks()).compareTo(other.isSetNetworks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networks, other.networks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSeconds()).compareTo(other.isSetSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seconds, other.seconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("systemStat(");
    boolean first = true;

    sb.append("cpu:");
    if (this.cpu == null) {
      sb.append("null");
    } else {
      sb.append(this.cpu);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memory:");
    if (this.memory == null) {
      sb.append("null");
    } else {
      sb.append(this.memory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sysload:");
    if (this.sysload == null) {
      sb.append("null");
    } else {
      sb.append(this.sysload);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("disks:");
    if (this.disks == null) {
      sb.append("null");
    } else {
      sb.append(this.disks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("networks:");
    if (this.networks == null) {
      sb.append("null");
    } else {
      sb.append(this.networks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seconds:");
    sb.append(this.seconds);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cpu != null) {
      cpu.validate();
    }
    if (memory != null) {
      memory.validate();
    }
    if (sysload != null) {
      sysload.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class systemStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public systemStatStandardScheme getScheme() {
      return new systemStatStandardScheme();
    }
  }

  private static class systemStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<systemStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, systemStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cpu = new cpuStat();
              struct.cpu.read(iprot);
              struct.setCpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.memory = new memoryStat();
              struct.memory.read(iprot);
              struct.setMemoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYSLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sysload = new systemLoad();
              struct.sysload.read(iprot);
              struct.setSysloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.disks = new java.util.HashMap<java.lang.String,diskStat>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable diskStat _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = new diskStat();
                  _val2.read(iprot);
                  struct.disks.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setDisksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NETWORKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.networks = new java.util.HashMap<java.lang.String,networkStat>(2*_map4.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key5;
                @org.apache.thrift.annotation.Nullable networkStat _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = new networkStat();
                  _val6.read(iprot);
                  struct.networks.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setNetworksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seconds = iprot.readI32();
              struct.setSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, systemStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cpu != null) {
        oprot.writeFieldBegin(CPU_FIELD_DESC);
        struct.cpu.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.memory != null) {
        oprot.writeFieldBegin(MEMORY_FIELD_DESC);
        struct.memory.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sysload != null) {
        oprot.writeFieldBegin(SYSLOAD_FIELD_DESC);
        struct.sysload.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.disks != null) {
        oprot.writeFieldBegin(DISKS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.disks.size()));
          for (java.util.Map.Entry<java.lang.String, diskStat> _iter8 : struct.disks.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            _iter8.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.networks != null) {
        oprot.writeFieldBegin(NETWORKS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.networks.size()));
          for (java.util.Map.Entry<java.lang.String, networkStat> _iter9 : struct.networks.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            _iter9.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECONDS_FIELD_DESC);
      oprot.writeI32(struct.seconds);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class systemStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public systemStatTupleScheme getScheme() {
      return new systemStatTupleScheme();
    }
  }

  private static class systemStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<systemStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, systemStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCpu()) {
        optionals.set(0);
      }
      if (struct.isSetMemory()) {
        optionals.set(1);
      }
      if (struct.isSetSysload()) {
        optionals.set(2);
      }
      if (struct.isSetDisks()) {
        optionals.set(3);
      }
      if (struct.isSetNetworks()) {
        optionals.set(4);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetSeconds()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCpu()) {
        struct.cpu.write(oprot);
      }
      if (struct.isSetMemory()) {
        struct.memory.write(oprot);
      }
      if (struct.isSetSysload()) {
        struct.sysload.write(oprot);
      }
      if (struct.isSetDisks()) {
        {
          oprot.writeI32(struct.disks.size());
          for (java.util.Map.Entry<java.lang.String, diskStat> _iter10 : struct.disks.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            _iter10.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetNetworks()) {
        {
          oprot.writeI32(struct.networks.size());
          for (java.util.Map.Entry<java.lang.String, networkStat> _iter11 : struct.networks.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            _iter11.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetSeconds()) {
        oprot.writeI32(struct.seconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, systemStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.cpu = new cpuStat();
        struct.cpu.read(iprot);
        struct.setCpuIsSet(true);
      }
      if (incoming.get(1)) {
        struct.memory = new memoryStat();
        struct.memory.read(iprot);
        struct.setMemoryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sysload = new systemLoad();
        struct.sysload.read(iprot);
        struct.setSysloadIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.disks = new java.util.HashMap<java.lang.String,diskStat>(2*_map12.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key13;
          @org.apache.thrift.annotation.Nullable diskStat _val14;
          for (int _i15 = 0; _i15 < _map12.size; ++_i15)
          {
            _key13 = iprot.readString();
            _val14 = new diskStat();
            _val14.read(iprot);
            struct.disks.put(_key13, _val14);
          }
        }
        struct.setDisksIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.networks = new java.util.HashMap<java.lang.String,networkStat>(2*_map16.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key17;
          @org.apache.thrift.annotation.Nullable networkStat _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = new networkStat();
            _val18.read(iprot);
            struct.networks.put(_key17, _val18);
          }
        }
        struct.setNetworksIsSet(true);
      }
      if (incoming.get(5)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.seconds = iprot.readI32();
        struct.setSecondsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

