/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.base.monitor;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * CPU usage
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class cpuStat implements org.apache.thrift.TBase<cpuStat, cpuStat._Fields>, java.io.Serializable, Cloneable, Comparable<cpuStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cpuStat");

  private static final org.apache.thrift.protocol.TField USER_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("userCPU", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KERNEL_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("kernelCPU", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IDLE_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("idleCPU", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IOWAIT_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("iowaitCPU", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SWAP_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("swapCPU", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NICE_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("niceCPU", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCPU", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cpuStatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cpuStatTupleSchemeFactory();

  public int userCPU; // required
  public int kernelCPU; // required
  public int idleCPU; // required
  public int iowaitCPU; // required
  public int swapCPU; // required
  public int niceCPU; // required
  public int totalCPU; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_CPU((short)1, "userCPU"),
    KERNEL_CPU((short)2, "kernelCPU"),
    IDLE_CPU((short)3, "idleCPU"),
    IOWAIT_CPU((short)4, "iowaitCPU"),
    SWAP_CPU((short)5, "swapCPU"),
    NICE_CPU((short)6, "niceCPU"),
    TOTAL_CPU((short)7, "totalCPU");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_CPU
          return USER_CPU;
        case 2: // KERNEL_CPU
          return KERNEL_CPU;
        case 3: // IDLE_CPU
          return IDLE_CPU;
        case 4: // IOWAIT_CPU
          return IOWAIT_CPU;
        case 5: // SWAP_CPU
          return SWAP_CPU;
        case 6: // NICE_CPU
          return NICE_CPU;
        case 7: // TOTAL_CPU
          return TOTAL_CPU;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERCPU_ISSET_ID = 0;
  private static final int __KERNELCPU_ISSET_ID = 1;
  private static final int __IDLECPU_ISSET_ID = 2;
  private static final int __IOWAITCPU_ISSET_ID = 3;
  private static final int __SWAPCPU_ISSET_ID = 4;
  private static final int __NICECPU_ISSET_ID = 5;
  private static final int __TOTALCPU_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_CPU, new org.apache.thrift.meta_data.FieldMetaData("userCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KERNEL_CPU, new org.apache.thrift.meta_data.FieldMetaData("kernelCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDLE_CPU, new org.apache.thrift.meta_data.FieldMetaData("idleCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IOWAIT_CPU, new org.apache.thrift.meta_data.FieldMetaData("iowaitCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SWAP_CPU, new org.apache.thrift.meta_data.FieldMetaData("swapCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NICE_CPU, new org.apache.thrift.meta_data.FieldMetaData("niceCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_CPU, new org.apache.thrift.meta_data.FieldMetaData("totalCPU", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cpuStat.class, metaDataMap);
  }

  public cpuStat() {
  }

  public cpuStat(
    int userCPU,
    int kernelCPU,
    int idleCPU,
    int iowaitCPU,
    int swapCPU,
    int niceCPU,
    int totalCPU)
  {
    this();
    this.userCPU = userCPU;
    setUserCPUIsSet(true);
    this.kernelCPU = kernelCPU;
    setKernelCPUIsSet(true);
    this.idleCPU = idleCPU;
    setIdleCPUIsSet(true);
    this.iowaitCPU = iowaitCPU;
    setIowaitCPUIsSet(true);
    this.swapCPU = swapCPU;
    setSwapCPUIsSet(true);
    this.niceCPU = niceCPU;
    setNiceCPUIsSet(true);
    this.totalCPU = totalCPU;
    setTotalCPUIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public cpuStat(cpuStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userCPU = other.userCPU;
    this.kernelCPU = other.kernelCPU;
    this.idleCPU = other.idleCPU;
    this.iowaitCPU = other.iowaitCPU;
    this.swapCPU = other.swapCPU;
    this.niceCPU = other.niceCPU;
    this.totalCPU = other.totalCPU;
  }

  public cpuStat deepCopy() {
    return new cpuStat(this);
  }

  @Override
  public void clear() {
    setUserCPUIsSet(false);
    this.userCPU = 0;
    setKernelCPUIsSet(false);
    this.kernelCPU = 0;
    setIdleCPUIsSet(false);
    this.idleCPU = 0;
    setIowaitCPUIsSet(false);
    this.iowaitCPU = 0;
    setSwapCPUIsSet(false);
    this.swapCPU = 0;
    setNiceCPUIsSet(false);
    this.niceCPU = 0;
    setTotalCPUIsSet(false);
    this.totalCPU = 0;
  }

  public int getUserCPU() {
    return this.userCPU;
  }

  public cpuStat setUserCPU(int userCPU) {
    this.userCPU = userCPU;
    setUserCPUIsSet(true);
    return this;
  }

  public void unsetUserCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERCPU_ISSET_ID);
  }

  /** Returns true if field userCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERCPU_ISSET_ID);
  }

  public void setUserCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERCPU_ISSET_ID, value);
  }

  public int getKernelCPU() {
    return this.kernelCPU;
  }

  public cpuStat setKernelCPU(int kernelCPU) {
    this.kernelCPU = kernelCPU;
    setKernelCPUIsSet(true);
    return this;
  }

  public void unsetKernelCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KERNELCPU_ISSET_ID);
  }

  /** Returns true if field kernelCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetKernelCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KERNELCPU_ISSET_ID);
  }

  public void setKernelCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KERNELCPU_ISSET_ID, value);
  }

  public int getIdleCPU() {
    return this.idleCPU;
  }

  public cpuStat setIdleCPU(int idleCPU) {
    this.idleCPU = idleCPU;
    setIdleCPUIsSet(true);
    return this;
  }

  public void unsetIdleCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDLECPU_ISSET_ID);
  }

  /** Returns true if field idleCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetIdleCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDLECPU_ISSET_ID);
  }

  public void setIdleCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDLECPU_ISSET_ID, value);
  }

  public int getIowaitCPU() {
    return this.iowaitCPU;
  }

  public cpuStat setIowaitCPU(int iowaitCPU) {
    this.iowaitCPU = iowaitCPU;
    setIowaitCPUIsSet(true);
    return this;
  }

  public void unsetIowaitCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOWAITCPU_ISSET_ID);
  }

  /** Returns true if field iowaitCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetIowaitCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOWAITCPU_ISSET_ID);
  }

  public void setIowaitCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOWAITCPU_ISSET_ID, value);
  }

  public int getSwapCPU() {
    return this.swapCPU;
  }

  public cpuStat setSwapCPU(int swapCPU) {
    this.swapCPU = swapCPU;
    setSwapCPUIsSet(true);
    return this;
  }

  public void unsetSwapCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SWAPCPU_ISSET_ID);
  }

  /** Returns true if field swapCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetSwapCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SWAPCPU_ISSET_ID);
  }

  public void setSwapCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SWAPCPU_ISSET_ID, value);
  }

  public int getNiceCPU() {
    return this.niceCPU;
  }

  public cpuStat setNiceCPU(int niceCPU) {
    this.niceCPU = niceCPU;
    setNiceCPUIsSet(true);
    return this;
  }

  public void unsetNiceCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NICECPU_ISSET_ID);
  }

  /** Returns true if field niceCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetNiceCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NICECPU_ISSET_ID);
  }

  public void setNiceCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NICECPU_ISSET_ID, value);
  }

  public int getTotalCPU() {
    return this.totalCPU;
  }

  public cpuStat setTotalCPU(int totalCPU) {
    this.totalCPU = totalCPU;
    setTotalCPUIsSet(true);
    return this;
  }

  public void unsetTotalCPU() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALCPU_ISSET_ID);
  }

  /** Returns true if field totalCPU is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCPU() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALCPU_ISSET_ID);
  }

  public void setTotalCPUIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALCPU_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER_CPU:
      if (value == null) {
        unsetUserCPU();
      } else {
        setUserCPU((java.lang.Integer)value);
      }
      break;

    case KERNEL_CPU:
      if (value == null) {
        unsetKernelCPU();
      } else {
        setKernelCPU((java.lang.Integer)value);
      }
      break;

    case IDLE_CPU:
      if (value == null) {
        unsetIdleCPU();
      } else {
        setIdleCPU((java.lang.Integer)value);
      }
      break;

    case IOWAIT_CPU:
      if (value == null) {
        unsetIowaitCPU();
      } else {
        setIowaitCPU((java.lang.Integer)value);
      }
      break;

    case SWAP_CPU:
      if (value == null) {
        unsetSwapCPU();
      } else {
        setSwapCPU((java.lang.Integer)value);
      }
      break;

    case NICE_CPU:
      if (value == null) {
        unsetNiceCPU();
      } else {
        setNiceCPU((java.lang.Integer)value);
      }
      break;

    case TOTAL_CPU:
      if (value == null) {
        unsetTotalCPU();
      } else {
        setTotalCPU((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_CPU:
      return getUserCPU();

    case KERNEL_CPU:
      return getKernelCPU();

    case IDLE_CPU:
      return getIdleCPU();

    case IOWAIT_CPU:
      return getIowaitCPU();

    case SWAP_CPU:
      return getSwapCPU();

    case NICE_CPU:
      return getNiceCPU();

    case TOTAL_CPU:
      return getTotalCPU();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_CPU:
      return isSetUserCPU();
    case KERNEL_CPU:
      return isSetKernelCPU();
    case IDLE_CPU:
      return isSetIdleCPU();
    case IOWAIT_CPU:
      return isSetIowaitCPU();
    case SWAP_CPU:
      return isSetSwapCPU();
    case NICE_CPU:
      return isSetNiceCPU();
    case TOTAL_CPU:
      return isSetTotalCPU();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof cpuStat)
      return this.equals((cpuStat)that);
    return false;
  }

  public boolean equals(cpuStat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userCPU = true;
    boolean that_present_userCPU = true;
    if (this_present_userCPU || that_present_userCPU) {
      if (!(this_present_userCPU && that_present_userCPU))
        return false;
      if (this.userCPU != that.userCPU)
        return false;
    }

    boolean this_present_kernelCPU = true;
    boolean that_present_kernelCPU = true;
    if (this_present_kernelCPU || that_present_kernelCPU) {
      if (!(this_present_kernelCPU && that_present_kernelCPU))
        return false;
      if (this.kernelCPU != that.kernelCPU)
        return false;
    }

    boolean this_present_idleCPU = true;
    boolean that_present_idleCPU = true;
    if (this_present_idleCPU || that_present_idleCPU) {
      if (!(this_present_idleCPU && that_present_idleCPU))
        return false;
      if (this.idleCPU != that.idleCPU)
        return false;
    }

    boolean this_present_iowaitCPU = true;
    boolean that_present_iowaitCPU = true;
    if (this_present_iowaitCPU || that_present_iowaitCPU) {
      if (!(this_present_iowaitCPU && that_present_iowaitCPU))
        return false;
      if (this.iowaitCPU != that.iowaitCPU)
        return false;
    }

    boolean this_present_swapCPU = true;
    boolean that_present_swapCPU = true;
    if (this_present_swapCPU || that_present_swapCPU) {
      if (!(this_present_swapCPU && that_present_swapCPU))
        return false;
      if (this.swapCPU != that.swapCPU)
        return false;
    }

    boolean this_present_niceCPU = true;
    boolean that_present_niceCPU = true;
    if (this_present_niceCPU || that_present_niceCPU) {
      if (!(this_present_niceCPU && that_present_niceCPU))
        return false;
      if (this.niceCPU != that.niceCPU)
        return false;
    }

    boolean this_present_totalCPU = true;
    boolean that_present_totalCPU = true;
    if (this_present_totalCPU || that_present_totalCPU) {
      if (!(this_present_totalCPU && that_present_totalCPU))
        return false;
      if (this.totalCPU != that.totalCPU)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + userCPU;

    hashCode = hashCode * 8191 + kernelCPU;

    hashCode = hashCode * 8191 + idleCPU;

    hashCode = hashCode * 8191 + iowaitCPU;

    hashCode = hashCode * 8191 + swapCPU;

    hashCode = hashCode * 8191 + niceCPU;

    hashCode = hashCode * 8191 + totalCPU;

    return hashCode;
  }

  @Override
  public int compareTo(cpuStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserCPU()).compareTo(other.isSetUserCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCPU, other.userCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKernelCPU()).compareTo(other.isSetKernelCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKernelCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kernelCPU, other.kernelCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdleCPU()).compareTo(other.isSetIdleCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdleCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idleCPU, other.idleCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIowaitCPU()).compareTo(other.isSetIowaitCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIowaitCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iowaitCPU, other.iowaitCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSwapCPU()).compareTo(other.isSetSwapCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwapCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swapCPU, other.swapCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNiceCPU()).compareTo(other.isSetNiceCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNiceCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.niceCPU, other.niceCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalCPU()).compareTo(other.isSetTotalCPU());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCPU()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCPU, other.totalCPU);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("cpuStat(");
    boolean first = true;

    sb.append("userCPU:");
    sb.append(this.userCPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kernelCPU:");
    sb.append(this.kernelCPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idleCPU:");
    sb.append(this.idleCPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iowaitCPU:");
    sb.append(this.iowaitCPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("swapCPU:");
    sb.append(this.swapCPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("niceCPU:");
    sb.append(this.niceCPU);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCPU:");
    sb.append(this.totalCPU);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class cpuStatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public cpuStatStandardScheme getScheme() {
      return new cpuStatStandardScheme();
    }
  }

  private static class cpuStatStandardScheme extends org.apache.thrift.scheme.StandardScheme<cpuStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, cpuStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userCPU = iprot.readI32();
              struct.setUserCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KERNEL_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kernelCPU = iprot.readI32();
              struct.setKernelCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDLE_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idleCPU = iprot.readI32();
              struct.setIdleCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IOWAIT_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iowaitCPU = iprot.readI32();
              struct.setIowaitCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SWAP_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.swapCPU = iprot.readI32();
              struct.setSwapCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NICE_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.niceCPU = iprot.readI32();
              struct.setNiceCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCPU = iprot.readI32();
              struct.setTotalCPUIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, cpuStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_CPU_FIELD_DESC);
      oprot.writeI32(struct.userCPU);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KERNEL_CPU_FIELD_DESC);
      oprot.writeI32(struct.kernelCPU);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IDLE_CPU_FIELD_DESC);
      oprot.writeI32(struct.idleCPU);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IOWAIT_CPU_FIELD_DESC);
      oprot.writeI32(struct.iowaitCPU);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SWAP_CPU_FIELD_DESC);
      oprot.writeI32(struct.swapCPU);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NICE_CPU_FIELD_DESC);
      oprot.writeI32(struct.niceCPU);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_CPU_FIELD_DESC);
      oprot.writeI32(struct.totalCPU);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class cpuStatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public cpuStatTupleScheme getScheme() {
      return new cpuStatTupleScheme();
    }
  }

  private static class cpuStatTupleScheme extends org.apache.thrift.scheme.TupleScheme<cpuStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, cpuStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserCPU()) {
        optionals.set(0);
      }
      if (struct.isSetKernelCPU()) {
        optionals.set(1);
      }
      if (struct.isSetIdleCPU()) {
        optionals.set(2);
      }
      if (struct.isSetIowaitCPU()) {
        optionals.set(3);
      }
      if (struct.isSetSwapCPU()) {
        optionals.set(4);
      }
      if (struct.isSetNiceCPU()) {
        optionals.set(5);
      }
      if (struct.isSetTotalCPU()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetUserCPU()) {
        oprot.writeI32(struct.userCPU);
      }
      if (struct.isSetKernelCPU()) {
        oprot.writeI32(struct.kernelCPU);
      }
      if (struct.isSetIdleCPU()) {
        oprot.writeI32(struct.idleCPU);
      }
      if (struct.isSetIowaitCPU()) {
        oprot.writeI32(struct.iowaitCPU);
      }
      if (struct.isSetSwapCPU()) {
        oprot.writeI32(struct.swapCPU);
      }
      if (struct.isSetNiceCPU()) {
        oprot.writeI32(struct.niceCPU);
      }
      if (struct.isSetTotalCPU()) {
        oprot.writeI32(struct.totalCPU);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, cpuStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.userCPU = iprot.readI32();
        struct.setUserCPUIsSet(true);
      }
      if (incoming.get(1)) {
        struct.kernelCPU = iprot.readI32();
        struct.setKernelCPUIsSet(true);
      }
      if (incoming.get(2)) {
        struct.idleCPU = iprot.readI32();
        struct.setIdleCPUIsSet(true);
      }
      if (incoming.get(3)) {
        struct.iowaitCPU = iprot.readI32();
        struct.setIowaitCPUIsSet(true);
      }
      if (incoming.get(4)) {
        struct.swapCPU = iprot.readI32();
        struct.setSwapCPUIsSet(true);
      }
      if (incoming.get(5)) {
        struct.niceCPU = iprot.readI32();
        struct.setNiceCPUIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalCPU = iprot.readI32();
        struct.setTotalCPUIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

