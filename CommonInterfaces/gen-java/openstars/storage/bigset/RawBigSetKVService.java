/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.storage.bigset;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class RawBigSetKVService {

  public interface Iface {

    public TPutItemResult bsgPutItem(long rootID, TItem item) throws org.apache.thrift.TException;

    public boolean bsgRemoveItem(long key, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TExistedResult bsgExisted(long rootID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TItemResult bsgGetItem(long rootID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TItemSetResult bsgGetSlice(long rootID, int fromIdx, int count) throws org.apache.thrift.TException;

    public TItemSetResult bsgGetSliceFromItem(long rootID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException;

    public TItemSetResult bsgGetSliceR(long rootID, int fromIdx, int count) throws org.apache.thrift.TException;

    public TItemSetResult bsgGetSliceFromItemR(long rootID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException;

    public TItemSetResult bsgRangeQuery(long rootID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException;

    public TMultiPutItemResult bsgMultiPut(long rootID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException;

    public long getTotalCount(long rootID) throws org.apache.thrift.TException;

    public long removeAll(long rootID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void bsgPutItem(long rootID, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException;

    public void bsgRemoveItem(long key, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void bsgExisted(long rootID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException;

    public void bsgGetItem(long rootID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException;

    public void bsgGetSlice(long rootID, int fromIdx, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsgGetSliceFromItem(long rootID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsgGetSliceR(long rootID, int fromIdx, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsgGetSliceFromItemR(long rootID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsgRangeQuery(long rootID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void bsgMultiPut(long rootID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException;

    public void getTotalCount(long rootID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void removeAll(long rootID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TPutItemResult bsgPutItem(long rootID, TItem item) throws org.apache.thrift.TException
    {
      send_bsgPutItem(rootID, item);
      return recv_bsgPutItem();
    }

    public void send_bsgPutItem(long rootID, TItem item) throws org.apache.thrift.TException
    {
      bsgPutItem_args args = new bsgPutItem_args();
      args.setRootID(rootID);
      args.setItem(item);
      sendBase("bsgPutItem", args);
    }

    public TPutItemResult recv_bsgPutItem() throws org.apache.thrift.TException
    {
      bsgPutItem_result result = new bsgPutItem_result();
      receiveBase(result, "bsgPutItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgPutItem failed: unknown result");
    }

    public boolean bsgRemoveItem(long key, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_bsgRemoveItem(key, itemKey);
      return recv_bsgRemoveItem();
    }

    public void send_bsgRemoveItem(long key, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      bsgRemoveItem_args args = new bsgRemoveItem_args();
      args.setKey(key);
      args.setItemKey(itemKey);
      sendBase("bsgRemoveItem", args);
    }

    public boolean recv_bsgRemoveItem() throws org.apache.thrift.TException
    {
      bsgRemoveItem_result result = new bsgRemoveItem_result();
      receiveBase(result, "bsgRemoveItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgRemoveItem failed: unknown result");
    }

    public TExistedResult bsgExisted(long rootID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_bsgExisted(rootID, itemKey);
      return recv_bsgExisted();
    }

    public void send_bsgExisted(long rootID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      bsgExisted_args args = new bsgExisted_args();
      args.setRootID(rootID);
      args.setItemKey(itemKey);
      sendBase("bsgExisted", args);
    }

    public TExistedResult recv_bsgExisted() throws org.apache.thrift.TException
    {
      bsgExisted_result result = new bsgExisted_result();
      receiveBase(result, "bsgExisted");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgExisted failed: unknown result");
    }

    public TItemResult bsgGetItem(long rootID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_bsgGetItem(rootID, itemKey);
      return recv_bsgGetItem();
    }

    public void send_bsgGetItem(long rootID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      bsgGetItem_args args = new bsgGetItem_args();
      args.setRootID(rootID);
      args.setItemKey(itemKey);
      sendBase("bsgGetItem", args);
    }

    public TItemResult recv_bsgGetItem() throws org.apache.thrift.TException
    {
      bsgGetItem_result result = new bsgGetItem_result();
      receiveBase(result, "bsgGetItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgGetItem failed: unknown result");
    }

    public TItemSetResult bsgGetSlice(long rootID, int fromIdx, int count) throws org.apache.thrift.TException
    {
      send_bsgGetSlice(rootID, fromIdx, count);
      return recv_bsgGetSlice();
    }

    public void send_bsgGetSlice(long rootID, int fromIdx, int count) throws org.apache.thrift.TException
    {
      bsgGetSlice_args args = new bsgGetSlice_args();
      args.setRootID(rootID);
      args.setFromIdx(fromIdx);
      args.setCount(count);
      sendBase("bsgGetSlice", args);
    }

    public TItemSetResult recv_bsgGetSlice() throws org.apache.thrift.TException
    {
      bsgGetSlice_result result = new bsgGetSlice_result();
      receiveBase(result, "bsgGetSlice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgGetSlice failed: unknown result");
    }

    public TItemSetResult bsgGetSliceFromItem(long rootID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      send_bsgGetSliceFromItem(rootID, fromKey, count);
      return recv_bsgGetSliceFromItem();
    }

    public void send_bsgGetSliceFromItem(long rootID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      bsgGetSliceFromItem_args args = new bsgGetSliceFromItem_args();
      args.setRootID(rootID);
      args.setFromKey(fromKey);
      args.setCount(count);
      sendBase("bsgGetSliceFromItem", args);
    }

    public TItemSetResult recv_bsgGetSliceFromItem() throws org.apache.thrift.TException
    {
      bsgGetSliceFromItem_result result = new bsgGetSliceFromItem_result();
      receiveBase(result, "bsgGetSliceFromItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgGetSliceFromItem failed: unknown result");
    }

    public TItemSetResult bsgGetSliceR(long rootID, int fromIdx, int count) throws org.apache.thrift.TException
    {
      send_bsgGetSliceR(rootID, fromIdx, count);
      return recv_bsgGetSliceR();
    }

    public void send_bsgGetSliceR(long rootID, int fromIdx, int count) throws org.apache.thrift.TException
    {
      bsgGetSliceR_args args = new bsgGetSliceR_args();
      args.setRootID(rootID);
      args.setFromIdx(fromIdx);
      args.setCount(count);
      sendBase("bsgGetSliceR", args);
    }

    public TItemSetResult recv_bsgGetSliceR() throws org.apache.thrift.TException
    {
      bsgGetSliceR_result result = new bsgGetSliceR_result();
      receiveBase(result, "bsgGetSliceR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgGetSliceR failed: unknown result");
    }

    public TItemSetResult bsgGetSliceFromItemR(long rootID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      send_bsgGetSliceFromItemR(rootID, fromKey, count);
      return recv_bsgGetSliceFromItemR();
    }

    public void send_bsgGetSliceFromItemR(long rootID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      bsgGetSliceFromItemR_args args = new bsgGetSliceFromItemR_args();
      args.setRootID(rootID);
      args.setFromKey(fromKey);
      args.setCount(count);
      sendBase("bsgGetSliceFromItemR", args);
    }

    public TItemSetResult recv_bsgGetSliceFromItemR() throws org.apache.thrift.TException
    {
      bsgGetSliceFromItemR_result result = new bsgGetSliceFromItemR_result();
      receiveBase(result, "bsgGetSliceFromItemR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgGetSliceFromItemR failed: unknown result");
    }

    public TItemSetResult bsgRangeQuery(long rootID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException
    {
      send_bsgRangeQuery(rootID, startKey, endKey);
      return recv_bsgRangeQuery();
    }

    public void send_bsgRangeQuery(long rootID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException
    {
      bsgRangeQuery_args args = new bsgRangeQuery_args();
      args.setRootID(rootID);
      args.setStartKey(startKey);
      args.setEndKey(endKey);
      sendBase("bsgRangeQuery", args);
    }

    public TItemSetResult recv_bsgRangeQuery() throws org.apache.thrift.TException
    {
      bsgRangeQuery_result result = new bsgRangeQuery_result();
      receiveBase(result, "bsgRangeQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgRangeQuery failed: unknown result");
    }

    public TMultiPutItemResult bsgMultiPut(long rootID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException
    {
      send_bsgMultiPut(rootID, setData, getAddedItems, getReplacedItems);
      return recv_bsgMultiPut();
    }

    public void send_bsgMultiPut(long rootID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException
    {
      bsgMultiPut_args args = new bsgMultiPut_args();
      args.setRootID(rootID);
      args.setSetData(setData);
      args.setGetAddedItems(getAddedItems);
      args.setGetReplacedItems(getReplacedItems);
      sendBase("bsgMultiPut", args);
    }

    public TMultiPutItemResult recv_bsgMultiPut() throws org.apache.thrift.TException
    {
      bsgMultiPut_result result = new bsgMultiPut_result();
      receiveBase(result, "bsgMultiPut");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bsgMultiPut failed: unknown result");
    }

    public long getTotalCount(long rootID) throws org.apache.thrift.TException
    {
      send_getTotalCount(rootID);
      return recv_getTotalCount();
    }

    public void send_getTotalCount(long rootID) throws org.apache.thrift.TException
    {
      getTotalCount_args args = new getTotalCount_args();
      args.setRootID(rootID);
      sendBase("getTotalCount", args);
    }

    public long recv_getTotalCount() throws org.apache.thrift.TException
    {
      getTotalCount_result result = new getTotalCount_result();
      receiveBase(result, "getTotalCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalCount failed: unknown result");
    }

    public long removeAll(long rootID) throws org.apache.thrift.TException
    {
      send_removeAll(rootID);
      return recv_removeAll();
    }

    public void send_removeAll(long rootID) throws org.apache.thrift.TException
    {
      removeAll_args args = new removeAll_args();
      args.setRootID(rootID);
      sendBase("removeAll", args);
    }

    public long recv_removeAll() throws org.apache.thrift.TException
    {
      removeAll_result result = new removeAll_result();
      receiveBase(result, "removeAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeAll failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void bsgPutItem(long rootID, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgPutItem_call method_call = new bsgPutItem_call(rootID, item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgPutItem_call extends org.apache.thrift.async.TAsyncMethodCall<TPutItemResult> {
      private long rootID;
      private TItem item;
      public bsgPutItem_call(long rootID, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.item = item;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgPutItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgPutItem_args args = new bsgPutItem_args();
        args.setRootID(rootID);
        args.setItem(item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPutItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgPutItem();
      }
    }

    public void bsgRemoveItem(long key, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgRemoveItem_call method_call = new bsgRemoveItem_call(key, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgRemoveItem_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private long key;
      private java.nio.ByteBuffer itemKey;
      public bsgRemoveItem_call(long key, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgRemoveItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgRemoveItem_args args = new bsgRemoveItem_args();
        args.setKey(key);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgRemoveItem();
      }
    }

    public void bsgExisted(long rootID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgExisted_call method_call = new bsgExisted_call(rootID, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgExisted_call extends org.apache.thrift.async.TAsyncMethodCall<TExistedResult> {
      private long rootID;
      private java.nio.ByteBuffer itemKey;
      public bsgExisted_call(long rootID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgExisted", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgExisted_args args = new bsgExisted_args();
        args.setRootID(rootID);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TExistedResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgExisted();
      }
    }

    public void bsgGetItem(long rootID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgGetItem_call method_call = new bsgGetItem_call(rootID, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgGetItem_call extends org.apache.thrift.async.TAsyncMethodCall<TItemResult> {
      private long rootID;
      private java.nio.ByteBuffer itemKey;
      public bsgGetItem_call(long rootID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgGetItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgGetItem_args args = new bsgGetItem_args();
        args.setRootID(rootID);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgGetItem();
      }
    }

    public void bsgGetSlice(long rootID, int fromIdx, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgGetSlice_call method_call = new bsgGetSlice_call(rootID, fromIdx, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgGetSlice_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long rootID;
      private int fromIdx;
      private int count;
      public bsgGetSlice_call(long rootID, int fromIdx, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.fromIdx = fromIdx;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgGetSlice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgGetSlice_args args = new bsgGetSlice_args();
        args.setRootID(rootID);
        args.setFromIdx(fromIdx);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgGetSlice();
      }
    }

    public void bsgGetSliceFromItem(long rootID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgGetSliceFromItem_call method_call = new bsgGetSliceFromItem_call(rootID, fromKey, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgGetSliceFromItem_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long rootID;
      private java.nio.ByteBuffer fromKey;
      private int count;
      public bsgGetSliceFromItem_call(long rootID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.fromKey = fromKey;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgGetSliceFromItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgGetSliceFromItem_args args = new bsgGetSliceFromItem_args();
        args.setRootID(rootID);
        args.setFromKey(fromKey);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgGetSliceFromItem();
      }
    }

    public void bsgGetSliceR(long rootID, int fromIdx, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgGetSliceR_call method_call = new bsgGetSliceR_call(rootID, fromIdx, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgGetSliceR_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long rootID;
      private int fromIdx;
      private int count;
      public bsgGetSliceR_call(long rootID, int fromIdx, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.fromIdx = fromIdx;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgGetSliceR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgGetSliceR_args args = new bsgGetSliceR_args();
        args.setRootID(rootID);
        args.setFromIdx(fromIdx);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgGetSliceR();
      }
    }

    public void bsgGetSliceFromItemR(long rootID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgGetSliceFromItemR_call method_call = new bsgGetSliceFromItemR_call(rootID, fromKey, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgGetSliceFromItemR_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long rootID;
      private java.nio.ByteBuffer fromKey;
      private int count;
      public bsgGetSliceFromItemR_call(long rootID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.fromKey = fromKey;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgGetSliceFromItemR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgGetSliceFromItemR_args args = new bsgGetSliceFromItemR_args();
        args.setRootID(rootID);
        args.setFromKey(fromKey);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgGetSliceFromItemR();
      }
    }

    public void bsgRangeQuery(long rootID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgRangeQuery_call method_call = new bsgRangeQuery_call(rootID, startKey, endKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgRangeQuery_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long rootID;
      private java.nio.ByteBuffer startKey;
      private java.nio.ByteBuffer endKey;
      public bsgRangeQuery_call(long rootID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.startKey = startKey;
        this.endKey = endKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgRangeQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgRangeQuery_args args = new bsgRangeQuery_args();
        args.setRootID(rootID);
        args.setStartKey(startKey);
        args.setEndKey(endKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgRangeQuery();
      }
    }

    public void bsgMultiPut(long rootID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bsgMultiPut_call method_call = new bsgMultiPut_call(rootID, setData, getAddedItems, getReplacedItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bsgMultiPut_call extends org.apache.thrift.async.TAsyncMethodCall<TMultiPutItemResult> {
      private long rootID;
      private TItemSet setData;
      private boolean getAddedItems;
      private boolean getReplacedItems;
      public bsgMultiPut_call(long rootID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
        this.setData = setData;
        this.getAddedItems = getAddedItems;
        this.getReplacedItems = getReplacedItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bsgMultiPut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bsgMultiPut_args args = new bsgMultiPut_args();
        args.setRootID(rootID);
        args.setSetData(setData);
        args.setGetAddedItems(getAddedItems);
        args.setGetReplacedItems(getReplacedItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMultiPutItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bsgMultiPut();
      }
    }

    public void getTotalCount(long rootID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalCount_call method_call = new getTotalCount_call(rootID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private long rootID;
      public getTotalCount_call(long rootID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalCount_args args = new getTotalCount_args();
        args.setRootID(rootID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalCount();
      }
    }

    public void removeAll(long rootID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeAll_call method_call = new removeAll_call(rootID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeAll_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private long rootID;
      public removeAll_call(long rootID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rootID = rootID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeAll_args args = new removeAll_args();
        args.setRootID(rootID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeAll();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("bsgPutItem", new bsgPutItem());
      processMap.put("bsgRemoveItem", new bsgRemoveItem());
      processMap.put("bsgExisted", new bsgExisted());
      processMap.put("bsgGetItem", new bsgGetItem());
      processMap.put("bsgGetSlice", new bsgGetSlice());
      processMap.put("bsgGetSliceFromItem", new bsgGetSliceFromItem());
      processMap.put("bsgGetSliceR", new bsgGetSliceR());
      processMap.put("bsgGetSliceFromItemR", new bsgGetSliceFromItemR());
      processMap.put("bsgRangeQuery", new bsgRangeQuery());
      processMap.put("bsgMultiPut", new bsgMultiPut());
      processMap.put("getTotalCount", new getTotalCount());
      processMap.put("removeAll", new removeAll());
      return processMap;
    }

    public static class bsgPutItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgPutItem_args> {
      public bsgPutItem() {
        super("bsgPutItem");
      }

      public bsgPutItem_args getEmptyArgsInstance() {
        return new bsgPutItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgPutItem_result getResult(I iface, bsgPutItem_args args) throws org.apache.thrift.TException {
        bsgPutItem_result result = new bsgPutItem_result();
        result.success = iface.bsgPutItem(args.rootID, args.item);
        return result;
      }
    }

    public static class bsgRemoveItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgRemoveItem_args> {
      public bsgRemoveItem() {
        super("bsgRemoveItem");
      }

      public bsgRemoveItem_args getEmptyArgsInstance() {
        return new bsgRemoveItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgRemoveItem_result getResult(I iface, bsgRemoveItem_args args) throws org.apache.thrift.TException {
        bsgRemoveItem_result result = new bsgRemoveItem_result();
        result.success = iface.bsgRemoveItem(args.key, args.itemKey);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class bsgExisted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgExisted_args> {
      public bsgExisted() {
        super("bsgExisted");
      }

      public bsgExisted_args getEmptyArgsInstance() {
        return new bsgExisted_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgExisted_result getResult(I iface, bsgExisted_args args) throws org.apache.thrift.TException {
        bsgExisted_result result = new bsgExisted_result();
        result.success = iface.bsgExisted(args.rootID, args.itemKey);
        return result;
      }
    }

    public static class bsgGetItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgGetItem_args> {
      public bsgGetItem() {
        super("bsgGetItem");
      }

      public bsgGetItem_args getEmptyArgsInstance() {
        return new bsgGetItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgGetItem_result getResult(I iface, bsgGetItem_args args) throws org.apache.thrift.TException {
        bsgGetItem_result result = new bsgGetItem_result();
        result.success = iface.bsgGetItem(args.rootID, args.itemKey);
        return result;
      }
    }

    public static class bsgGetSlice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgGetSlice_args> {
      public bsgGetSlice() {
        super("bsgGetSlice");
      }

      public bsgGetSlice_args getEmptyArgsInstance() {
        return new bsgGetSlice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgGetSlice_result getResult(I iface, bsgGetSlice_args args) throws org.apache.thrift.TException {
        bsgGetSlice_result result = new bsgGetSlice_result();
        result.success = iface.bsgGetSlice(args.rootID, args.fromIdx, args.count);
        return result;
      }
    }

    public static class bsgGetSliceFromItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgGetSliceFromItem_args> {
      public bsgGetSliceFromItem() {
        super("bsgGetSliceFromItem");
      }

      public bsgGetSliceFromItem_args getEmptyArgsInstance() {
        return new bsgGetSliceFromItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgGetSliceFromItem_result getResult(I iface, bsgGetSliceFromItem_args args) throws org.apache.thrift.TException {
        bsgGetSliceFromItem_result result = new bsgGetSliceFromItem_result();
        result.success = iface.bsgGetSliceFromItem(args.rootID, args.fromKey, args.count);
        return result;
      }
    }

    public static class bsgGetSliceR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgGetSliceR_args> {
      public bsgGetSliceR() {
        super("bsgGetSliceR");
      }

      public bsgGetSliceR_args getEmptyArgsInstance() {
        return new bsgGetSliceR_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgGetSliceR_result getResult(I iface, bsgGetSliceR_args args) throws org.apache.thrift.TException {
        bsgGetSliceR_result result = new bsgGetSliceR_result();
        result.success = iface.bsgGetSliceR(args.rootID, args.fromIdx, args.count);
        return result;
      }
    }

    public static class bsgGetSliceFromItemR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgGetSliceFromItemR_args> {
      public bsgGetSliceFromItemR() {
        super("bsgGetSliceFromItemR");
      }

      public bsgGetSliceFromItemR_args getEmptyArgsInstance() {
        return new bsgGetSliceFromItemR_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgGetSliceFromItemR_result getResult(I iface, bsgGetSliceFromItemR_args args) throws org.apache.thrift.TException {
        bsgGetSliceFromItemR_result result = new bsgGetSliceFromItemR_result();
        result.success = iface.bsgGetSliceFromItemR(args.rootID, args.fromKey, args.count);
        return result;
      }
    }

    public static class bsgRangeQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgRangeQuery_args> {
      public bsgRangeQuery() {
        super("bsgRangeQuery");
      }

      public bsgRangeQuery_args getEmptyArgsInstance() {
        return new bsgRangeQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgRangeQuery_result getResult(I iface, bsgRangeQuery_args args) throws org.apache.thrift.TException {
        bsgRangeQuery_result result = new bsgRangeQuery_result();
        result.success = iface.bsgRangeQuery(args.rootID, args.startKey, args.endKey);
        return result;
      }
    }

    public static class bsgMultiPut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bsgMultiPut_args> {
      public bsgMultiPut() {
        super("bsgMultiPut");
      }

      public bsgMultiPut_args getEmptyArgsInstance() {
        return new bsgMultiPut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public bsgMultiPut_result getResult(I iface, bsgMultiPut_args args) throws org.apache.thrift.TException {
        bsgMultiPut_result result = new bsgMultiPut_result();
        result.success = iface.bsgMultiPut(args.rootID, args.setData, args.getAddedItems, args.getReplacedItems);
        return result;
      }
    }

    public static class getTotalCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalCount_args> {
      public getTotalCount() {
        super("getTotalCount");
      }

      public getTotalCount_args getEmptyArgsInstance() {
        return new getTotalCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getTotalCount_result getResult(I iface, getTotalCount_args args) throws org.apache.thrift.TException {
        getTotalCount_result result = new getTotalCount_result();
        result.success = iface.getTotalCount(args.rootID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class removeAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAll_args> {
      public removeAll() {
        super("removeAll");
      }

      public removeAll_args getEmptyArgsInstance() {
        return new removeAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public removeAll_result getResult(I iface, removeAll_args args) throws org.apache.thrift.TException {
        removeAll_result result = new removeAll_result();
        result.success = iface.removeAll(args.rootID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("bsgPutItem", new bsgPutItem());
      processMap.put("bsgRemoveItem", new bsgRemoveItem());
      processMap.put("bsgExisted", new bsgExisted());
      processMap.put("bsgGetItem", new bsgGetItem());
      processMap.put("bsgGetSlice", new bsgGetSlice());
      processMap.put("bsgGetSliceFromItem", new bsgGetSliceFromItem());
      processMap.put("bsgGetSliceR", new bsgGetSliceR());
      processMap.put("bsgGetSliceFromItemR", new bsgGetSliceFromItemR());
      processMap.put("bsgRangeQuery", new bsgRangeQuery());
      processMap.put("bsgMultiPut", new bsgMultiPut());
      processMap.put("getTotalCount", new getTotalCount());
      processMap.put("removeAll", new removeAll());
      return processMap;
    }

    public static class bsgPutItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgPutItem_args, TPutItemResult> {
      public bsgPutItem() {
        super("bsgPutItem");
      }

      public bsgPutItem_args getEmptyArgsInstance() {
        return new bsgPutItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPutItemResult>() { 
          public void onComplete(TPutItemResult o) {
            bsgPutItem_result result = new bsgPutItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgPutItem_result result = new bsgPutItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgPutItem_args args, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgPutItem(args.rootID, args.item,resultHandler);
      }
    }

    public static class bsgRemoveItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgRemoveItem_args, java.lang.Boolean> {
      public bsgRemoveItem() {
        super("bsgRemoveItem");
      }

      public bsgRemoveItem_args getEmptyArgsInstance() {
        return new bsgRemoveItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            bsgRemoveItem_result result = new bsgRemoveItem_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgRemoveItem_result result = new bsgRemoveItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgRemoveItem_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.bsgRemoveItem(args.key, args.itemKey,resultHandler);
      }
    }

    public static class bsgExisted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgExisted_args, TExistedResult> {
      public bsgExisted() {
        super("bsgExisted");
      }

      public bsgExisted_args getEmptyArgsInstance() {
        return new bsgExisted_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TExistedResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TExistedResult>() { 
          public void onComplete(TExistedResult o) {
            bsgExisted_result result = new bsgExisted_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgExisted_result result = new bsgExisted_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgExisted_args args, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgExisted(args.rootID, args.itemKey,resultHandler);
      }
    }

    public static class bsgGetItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgGetItem_args, TItemResult> {
      public bsgGetItem() {
        super("bsgGetItem");
      }

      public bsgGetItem_args getEmptyArgsInstance() {
        return new bsgGetItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemResult>() { 
          public void onComplete(TItemResult o) {
            bsgGetItem_result result = new bsgGetItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgGetItem_result result = new bsgGetItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgGetItem_args args, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgGetItem(args.rootID, args.itemKey,resultHandler);
      }
    }

    public static class bsgGetSlice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgGetSlice_args, TItemSetResult> {
      public bsgGetSlice() {
        super("bsgGetSlice");
      }

      public bsgGetSlice_args getEmptyArgsInstance() {
        return new bsgGetSlice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsgGetSlice_result result = new bsgGetSlice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgGetSlice_result result = new bsgGetSlice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgGetSlice_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgGetSlice(args.rootID, args.fromIdx, args.count,resultHandler);
      }
    }

    public static class bsgGetSliceFromItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgGetSliceFromItem_args, TItemSetResult> {
      public bsgGetSliceFromItem() {
        super("bsgGetSliceFromItem");
      }

      public bsgGetSliceFromItem_args getEmptyArgsInstance() {
        return new bsgGetSliceFromItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsgGetSliceFromItem_result result = new bsgGetSliceFromItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgGetSliceFromItem_result result = new bsgGetSliceFromItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgGetSliceFromItem_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgGetSliceFromItem(args.rootID, args.fromKey, args.count,resultHandler);
      }
    }

    public static class bsgGetSliceR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgGetSliceR_args, TItemSetResult> {
      public bsgGetSliceR() {
        super("bsgGetSliceR");
      }

      public bsgGetSliceR_args getEmptyArgsInstance() {
        return new bsgGetSliceR_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsgGetSliceR_result result = new bsgGetSliceR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgGetSliceR_result result = new bsgGetSliceR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgGetSliceR_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgGetSliceR(args.rootID, args.fromIdx, args.count,resultHandler);
      }
    }

    public static class bsgGetSliceFromItemR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgGetSliceFromItemR_args, TItemSetResult> {
      public bsgGetSliceFromItemR() {
        super("bsgGetSliceFromItemR");
      }

      public bsgGetSliceFromItemR_args getEmptyArgsInstance() {
        return new bsgGetSliceFromItemR_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsgGetSliceFromItemR_result result = new bsgGetSliceFromItemR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgGetSliceFromItemR_result result = new bsgGetSliceFromItemR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgGetSliceFromItemR_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgGetSliceFromItemR(args.rootID, args.fromKey, args.count,resultHandler);
      }
    }

    public static class bsgRangeQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgRangeQuery_args, TItemSetResult> {
      public bsgRangeQuery() {
        super("bsgRangeQuery");
      }

      public bsgRangeQuery_args getEmptyArgsInstance() {
        return new bsgRangeQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            bsgRangeQuery_result result = new bsgRangeQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgRangeQuery_result result = new bsgRangeQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgRangeQuery_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgRangeQuery(args.rootID, args.startKey, args.endKey,resultHandler);
      }
    }

    public static class bsgMultiPut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bsgMultiPut_args, TMultiPutItemResult> {
      public bsgMultiPut() {
        super("bsgMultiPut");
      }

      public bsgMultiPut_args getEmptyArgsInstance() {
        return new bsgMultiPut_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult>() { 
          public void onComplete(TMultiPutItemResult o) {
            bsgMultiPut_result result = new bsgMultiPut_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bsgMultiPut_result result = new bsgMultiPut_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bsgMultiPut_args args, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.bsgMultiPut(args.rootID, args.setData, args.getAddedItems, args.getReplacedItems,resultHandler);
      }
    }

    public static class getTotalCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalCount_args, java.lang.Long> {
      public getTotalCount() {
        super("getTotalCount");
      }

      public getTotalCount_args getEmptyArgsInstance() {
        return new getTotalCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            getTotalCount_result result = new getTotalCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTotalCount_result result = new getTotalCount_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTotalCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getTotalCount(args.rootID,resultHandler);
      }
    }

    public static class removeAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeAll_args, java.lang.Long> {
      public removeAll() {
        super("removeAll");
      }

      public removeAll_args getEmptyArgsInstance() {
        return new removeAll_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            removeAll_result result = new removeAll_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeAll_result result = new removeAll_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeAll_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.removeAll(args.rootID,resultHandler);
      }
    }

  }

  public static class bsgPutItem_args implements org.apache.thrift.TBase<bsgPutItem_args, bsgPutItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgPutItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgPutItem_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgPutItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgPutItem_argsTupleSchemeFactory();

    public long rootID; // required
    public @org.apache.thrift.annotation.Nullable TItem item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      ITEM((short)2, "item");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // ITEM
            return ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItem.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgPutItem_args.class, metaDataMap);
    }

    public bsgPutItem_args() {
    }

    public bsgPutItem_args(
      long rootID,
      TItem item)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.item = item;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgPutItem_args(bsgPutItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      if (other.isSetItem()) {
        this.item = new TItem(other.item);
      }
    }

    public bsgPutItem_args deepCopy() {
      return new bsgPutItem_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      this.item = null;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgPutItem_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public TItem getItem() {
      return this.item;
    }

    public bsgPutItem_args setItem(@org.apache.thrift.annotation.Nullable TItem item) {
      this.item = item;
      return this;
    }

    public void unsetItem() {
      this.item = null;
    }

    /** Returns true if field item is set (has been assigned a value) and false otherwise */
    public boolean isSetItem() {
      return this.item != null;
    }

    public void setItemIsSet(boolean value) {
      if (!value) {
        this.item = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case ITEM:
        if (value == null) {
          unsetItem();
        } else {
          setItem((TItem)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case ITEM:
        return getItem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case ITEM:
        return isSetItem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgPutItem_args)
        return this.equals((bsgPutItem_args)that);
      return false;
    }

    public boolean equals(bsgPutItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_item = true && this.isSetItem();
      boolean that_present_item = true && that.isSetItem();
      if (this_present_item || that_present_item) {
        if (!(this_present_item && that_present_item))
          return false;
        if (!this.item.equals(that.item))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + ((isSetItem()) ? 131071 : 524287);
      if (isSetItem())
        hashCode = hashCode * 8191 + item.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgPutItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgPutItem_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("item:");
      if (this.item == null) {
        sb.append("null");
      } else {
        sb.append(this.item);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (item != null) {
        item.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgPutItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgPutItem_argsStandardScheme getScheme() {
        return new bsgPutItem_argsStandardScheme();
      }
    }

    private static class bsgPutItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgPutItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgPutItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.item = new TItem();
                struct.item.read(iprot);
                struct.setItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgPutItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        if (struct.item != null) {
          oprot.writeFieldBegin(ITEM_FIELD_DESC);
          struct.item.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgPutItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgPutItem_argsTupleScheme getScheme() {
        return new bsgPutItem_argsTupleScheme();
      }
    }

    private static class bsgPutItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgPutItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgPutItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetItem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetItem()) {
          struct.item.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgPutItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item = new TItem();
          struct.item.read(iprot);
          struct.setItemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgPutItem_result implements org.apache.thrift.TBase<bsgPutItem_result, bsgPutItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgPutItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgPutItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgPutItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgPutItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TPutItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPutItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgPutItem_result.class, metaDataMap);
    }

    public bsgPutItem_result() {
    }

    public bsgPutItem_result(
      TPutItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgPutItem_result(bsgPutItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPutItemResult(other.success);
      }
    }

    public bsgPutItem_result deepCopy() {
      return new bsgPutItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TPutItemResult getSuccess() {
      return this.success;
    }

    public bsgPutItem_result setSuccess(@org.apache.thrift.annotation.Nullable TPutItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPutItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgPutItem_result)
        return this.equals((bsgPutItem_result)that);
      return false;
    }

    public boolean equals(bsgPutItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgPutItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgPutItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgPutItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgPutItem_resultStandardScheme getScheme() {
        return new bsgPutItem_resultStandardScheme();
      }
    }

    private static class bsgPutItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgPutItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgPutItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPutItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgPutItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgPutItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgPutItem_resultTupleScheme getScheme() {
        return new bsgPutItem_resultTupleScheme();
      }
    }

    private static class bsgPutItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgPutItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgPutItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgPutItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPutItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgRemoveItem_args implements org.apache.thrift.TBase<bsgRemoveItem_args, bsgRemoveItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgRemoveItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgRemoveItem_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgRemoveItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgRemoveItem_argsTupleSchemeFactory();

    public long key; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TMetaKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgRemoveItem_args.class, metaDataMap);
    }

    public bsgRemoveItem_args() {
    }

    public bsgRemoveItem_args(
      long key,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.key = key;
      setKeyIsSet(true);
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgRemoveItem_args(bsgRemoveItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.key = other.key;
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public bsgRemoveItem_args deepCopy() {
      return new bsgRemoveItem_args(this);
    }

    @Override
    public void clear() {
      setKeyIsSet(false);
      this.key = 0;
      this.itemKey = null;
    }

    public long getKey() {
      return this.key;
    }

    public bsgRemoveItem_args setKey(long key) {
      this.key = key;
      setKeyIsSet(true);
      return this;
    }

    public void unsetKey() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_ISSET_ID);
    }

    public void setKeyIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_ISSET_ID, value);
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public bsgRemoveItem_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public bsgRemoveItem_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((java.lang.Long)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgRemoveItem_args)
        return this.equals((bsgRemoveItem_args)that);
      return false;
    }

    public boolean equals(bsgRemoveItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_key = true;
      boolean that_present_key = true;
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (this.key != that.key)
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(key);

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgRemoveItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgRemoveItem_args(");
      boolean first = true;

      sb.append("key:");
      sb.append(this.key);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgRemoveItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgRemoveItem_argsStandardScheme getScheme() {
        return new bsgRemoveItem_argsStandardScheme();
      }
    }

    private static class bsgRemoveItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgRemoveItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgRemoveItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.key = iprot.readI64();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgRemoveItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeI64(struct.key);
        oprot.writeFieldEnd();
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgRemoveItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgRemoveItem_argsTupleScheme getScheme() {
        return new bsgRemoveItem_argsTupleScheme();
      }
    }

    private static class bsgRemoveItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgRemoveItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgRemoveItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKey()) {
          oprot.writeI64(struct.key);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgRemoveItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.key = iprot.readI64();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgRemoveItem_result implements org.apache.thrift.TBase<bsgRemoveItem_result, bsgRemoveItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgRemoveItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgRemoveItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgRemoveItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgRemoveItem_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgRemoveItem_result.class, metaDataMap);
    }

    public bsgRemoveItem_result() {
    }

    public bsgRemoveItem_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgRemoveItem_result(bsgRemoveItem_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public bsgRemoveItem_result deepCopy() {
      return new bsgRemoveItem_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public bsgRemoveItem_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgRemoveItem_result)
        return this.equals((bsgRemoveItem_result)that);
      return false;
    }

    public boolean equals(bsgRemoveItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(bsgRemoveItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgRemoveItem_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgRemoveItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgRemoveItem_resultStandardScheme getScheme() {
        return new bsgRemoveItem_resultStandardScheme();
      }
    }

    private static class bsgRemoveItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgRemoveItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgRemoveItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgRemoveItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgRemoveItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgRemoveItem_resultTupleScheme getScheme() {
        return new bsgRemoveItem_resultTupleScheme();
      }
    }

    private static class bsgRemoveItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgRemoveItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgRemoveItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgRemoveItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgExisted_args implements org.apache.thrift.TBase<bsgExisted_args, bsgExisted_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgExisted_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgExisted_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgExisted_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgExisted_argsTupleSchemeFactory();

    public long rootID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgExisted_args.class, metaDataMap);
    }

    public bsgExisted_args() {
    }

    public bsgExisted_args(
      long rootID,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgExisted_args(bsgExisted_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public bsgExisted_args deepCopy() {
      return new bsgExisted_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      this.itemKey = null;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgExisted_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public bsgExisted_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public bsgExisted_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgExisted_args)
        return this.equals((bsgExisted_args)that);
      return false;
    }

    public boolean equals(bsgExisted_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgExisted_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgExisted_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgExisted_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgExisted_argsStandardScheme getScheme() {
        return new bsgExisted_argsStandardScheme();
      }
    }

    private static class bsgExisted_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgExisted_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgExisted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgExisted_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgExisted_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgExisted_argsTupleScheme getScheme() {
        return new bsgExisted_argsTupleScheme();
      }
    }

    private static class bsgExisted_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgExisted_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgExisted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgExisted_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgExisted_result implements org.apache.thrift.TBase<bsgExisted_result, bsgExisted_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgExisted_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgExisted_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgExisted_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgExisted_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TExistedResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExistedResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgExisted_result.class, metaDataMap);
    }

    public bsgExisted_result() {
    }

    public bsgExisted_result(
      TExistedResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgExisted_result(bsgExisted_result other) {
      if (other.isSetSuccess()) {
        this.success = new TExistedResult(other.success);
      }
    }

    public bsgExisted_result deepCopy() {
      return new bsgExisted_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TExistedResult getSuccess() {
      return this.success;
    }

    public bsgExisted_result setSuccess(@org.apache.thrift.annotation.Nullable TExistedResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TExistedResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgExisted_result)
        return this.equals((bsgExisted_result)that);
      return false;
    }

    public boolean equals(bsgExisted_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgExisted_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgExisted_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgExisted_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgExisted_resultStandardScheme getScheme() {
        return new bsgExisted_resultStandardScheme();
      }
    }

    private static class bsgExisted_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgExisted_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgExisted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TExistedResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgExisted_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgExisted_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgExisted_resultTupleScheme getScheme() {
        return new bsgExisted_resultTupleScheme();
      }
    }

    private static class bsgExisted_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgExisted_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgExisted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgExisted_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TExistedResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetItem_args implements org.apache.thrift.TBase<bsgGetItem_args, bsgGetItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetItem_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetItem_argsTupleSchemeFactory();

    public long rootID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetItem_args.class, metaDataMap);
    }

    public bsgGetItem_args() {
    }

    public bsgGetItem_args(
      long rootID,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetItem_args(bsgGetItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public bsgGetItem_args deepCopy() {
      return new bsgGetItem_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      this.itemKey = null;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgGetItem_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public bsgGetItem_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public bsgGetItem_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetItem_args)
        return this.equals((bsgGetItem_args)that);
      return false;
    }

    public boolean equals(bsgGetItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetItem_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetItem_argsStandardScheme getScheme() {
        return new bsgGetItem_argsStandardScheme();
      }
    }

    private static class bsgGetItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetItem_argsTupleScheme getScheme() {
        return new bsgGetItem_argsTupleScheme();
      }
    }

    private static class bsgGetItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetItem_result implements org.apache.thrift.TBase<bsgGetItem_result, bsgGetItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetItem_result.class, metaDataMap);
    }

    public bsgGetItem_result() {
    }

    public bsgGetItem_result(
      TItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetItem_result(bsgGetItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemResult(other.success);
      }
    }

    public bsgGetItem_result deepCopy() {
      return new bsgGetItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemResult getSuccess() {
      return this.success;
    }

    public bsgGetItem_result setSuccess(@org.apache.thrift.annotation.Nullable TItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetItem_result)
        return this.equals((bsgGetItem_result)that);
      return false;
    }

    public boolean equals(bsgGetItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetItem_resultStandardScheme getScheme() {
        return new bsgGetItem_resultStandardScheme();
      }
    }

    private static class bsgGetItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetItem_resultTupleScheme getScheme() {
        return new bsgGetItem_resultTupleScheme();
      }
    }

    private static class bsgGetItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetSlice_args implements org.apache.thrift.TBase<bsgGetSlice_args, bsgGetSlice_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetSlice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetSlice_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("fromIdx", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetSlice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetSlice_argsTupleSchemeFactory();

    public long rootID; // required
    public int fromIdx; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      FROM_IDX((short)2, "fromIdx"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // FROM_IDX
            return FROM_IDX;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private static final int __FROMIDX_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.FROM_IDX, new org.apache.thrift.meta_data.FieldMetaData("fromIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetSlice_args.class, metaDataMap);
    }

    public bsgGetSlice_args() {
    }

    public bsgGetSlice_args(
      long rootID,
      int fromIdx,
      int count)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.fromIdx = fromIdx;
      setFromIdxIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetSlice_args(bsgGetSlice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      this.fromIdx = other.fromIdx;
      this.count = other.count;
    }

    public bsgGetSlice_args deepCopy() {
      return new bsgGetSlice_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      setFromIdxIsSet(false);
      this.fromIdx = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgGetSlice_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public int getFromIdx() {
      return this.fromIdx;
    }

    public bsgGetSlice_args setFromIdx(int fromIdx) {
      this.fromIdx = fromIdx;
      setFromIdxIsSet(true);
      return this;
    }

    public void unsetFromIdx() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FROMIDX_ISSET_ID);
    }

    /** Returns true if field fromIdx is set (has been assigned a value) and false otherwise */
    public boolean isSetFromIdx() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FROMIDX_ISSET_ID);
    }

    public void setFromIdxIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FROMIDX_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public bsgGetSlice_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case FROM_IDX:
        if (value == null) {
          unsetFromIdx();
        } else {
          setFromIdx((java.lang.Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case FROM_IDX:
        return getFromIdx();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case FROM_IDX:
        return isSetFromIdx();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetSlice_args)
        return this.equals((bsgGetSlice_args)that);
      return false;
    }

    public boolean equals(bsgGetSlice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_fromIdx = true;
      boolean that_present_fromIdx = true;
      if (this_present_fromIdx || that_present_fromIdx) {
        if (!(this_present_fromIdx && that_present_fromIdx))
          return false;
        if (this.fromIdx != that.fromIdx)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + fromIdx;

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetSlice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromIdx()).compareTo(other.isSetFromIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromIdx, other.fromIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetSlice_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromIdx:");
      sb.append(this.fromIdx);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetSlice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSlice_argsStandardScheme getScheme() {
        return new bsgGetSlice_argsStandardScheme();
      }
    }

    private static class bsgGetSlice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetSlice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromIdx = iprot.readI32();
                struct.setFromIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetSlice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_IDX_FIELD_DESC);
        oprot.writeI32(struct.fromIdx);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetSlice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSlice_argsTupleScheme getScheme() {
        return new bsgGetSlice_argsTupleScheme();
      }
    }

    private static class bsgGetSlice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetSlice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetFromIdx()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetFromIdx()) {
          oprot.writeI32(struct.fromIdx);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromIdx = iprot.readI32();
          struct.setFromIdxIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetSlice_result implements org.apache.thrift.TBase<bsgGetSlice_result, bsgGetSlice_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetSlice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetSlice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetSlice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetSlice_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetSlice_result.class, metaDataMap);
    }

    public bsgGetSlice_result() {
    }

    public bsgGetSlice_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetSlice_result(bsgGetSlice_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsgGetSlice_result deepCopy() {
      return new bsgGetSlice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsgGetSlice_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetSlice_result)
        return this.equals((bsgGetSlice_result)that);
      return false;
    }

    public boolean equals(bsgGetSlice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetSlice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetSlice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetSlice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSlice_resultStandardScheme getScheme() {
        return new bsgGetSlice_resultStandardScheme();
      }
    }

    private static class bsgGetSlice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetSlice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetSlice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetSlice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSlice_resultTupleScheme getScheme() {
        return new bsgGetSlice_resultTupleScheme();
      }
    }

    private static class bsgGetSlice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetSlice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetSliceFromItem_args implements org.apache.thrift.TBase<bsgGetSliceFromItem_args, bsgGetSliceFromItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetSliceFromItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetSliceFromItem_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetSliceFromItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetSliceFromItem_argsTupleSchemeFactory();

    public long rootID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      FROM_KEY((short)2, "fromKey"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // FROM_KEY
            return FROM_KEY;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.FROM_KEY, new org.apache.thrift.meta_data.FieldMetaData("fromKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetSliceFromItem_args.class, metaDataMap);
    }

    public bsgGetSliceFromItem_args() {
    }

    public bsgGetSliceFromItem_args(
      long rootID,
      java.nio.ByteBuffer fromKey,
      int count)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetSliceFromItem_args(bsgGetSliceFromItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      if (other.isSetFromKey()) {
        this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(other.fromKey);
      }
      this.count = other.count;
    }

    public bsgGetSliceFromItem_args deepCopy() {
      return new bsgGetSliceFromItem_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      this.fromKey = null;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgGetSliceFromItem_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public byte[] getFromKey() {
      setFromKey(org.apache.thrift.TBaseHelper.rightSize(fromKey));
      return fromKey == null ? null : fromKey.array();
    }

    public java.nio.ByteBuffer bufferForFromKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(fromKey);
    }

    public bsgGetSliceFromItem_args setFromKey(byte[] fromKey) {
      this.fromKey = fromKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fromKey.clone());
      return this;
    }

    public bsgGetSliceFromItem_args setFromKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey) {
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      return this;
    }

    public void unsetFromKey() {
      this.fromKey = null;
    }

    /** Returns true if field fromKey is set (has been assigned a value) and false otherwise */
    public boolean isSetFromKey() {
      return this.fromKey != null;
    }

    public void setFromKeyIsSet(boolean value) {
      if (!value) {
        this.fromKey = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public bsgGetSliceFromItem_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case FROM_KEY:
        if (value == null) {
          unsetFromKey();
        } else {
          if (value instanceof byte[]) {
            setFromKey((byte[])value);
          } else {
            setFromKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case FROM_KEY:
        return getFromKey();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case FROM_KEY:
        return isSetFromKey();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetSliceFromItem_args)
        return this.equals((bsgGetSliceFromItem_args)that);
      return false;
    }

    public boolean equals(bsgGetSliceFromItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_fromKey = true && this.isSetFromKey();
      boolean that_present_fromKey = true && that.isSetFromKey();
      if (this_present_fromKey || that_present_fromKey) {
        if (!(this_present_fromKey && that_present_fromKey))
          return false;
        if (!this.fromKey.equals(that.fromKey))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + ((isSetFromKey()) ? 131071 : 524287);
      if (isSetFromKey())
        hashCode = hashCode * 8191 + fromKey.hashCode();

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetSliceFromItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromKey()).compareTo(other.isSetFromKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromKey, other.fromKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetSliceFromItem_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromKey:");
      if (this.fromKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fromKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetSliceFromItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceFromItem_argsStandardScheme getScheme() {
        return new bsgGetSliceFromItem_argsStandardScheme();
      }
    }

    private static class bsgGetSliceFromItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetSliceFromItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromKey = iprot.readBinary();
                struct.setFromKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetSliceFromItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        if (struct.fromKey != null) {
          oprot.writeFieldBegin(FROM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.fromKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetSliceFromItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceFromItem_argsTupleScheme getScheme() {
        return new bsgGetSliceFromItem_argsTupleScheme();
      }
    }

    private static class bsgGetSliceFromItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetSliceFromItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetFromKey()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetFromKey()) {
          oprot.writeBinary(struct.fromKey);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromKey = iprot.readBinary();
          struct.setFromKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetSliceFromItem_result implements org.apache.thrift.TBase<bsgGetSliceFromItem_result, bsgGetSliceFromItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetSliceFromItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetSliceFromItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetSliceFromItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetSliceFromItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetSliceFromItem_result.class, metaDataMap);
    }

    public bsgGetSliceFromItem_result() {
    }

    public bsgGetSliceFromItem_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetSliceFromItem_result(bsgGetSliceFromItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsgGetSliceFromItem_result deepCopy() {
      return new bsgGetSliceFromItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsgGetSliceFromItem_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetSliceFromItem_result)
        return this.equals((bsgGetSliceFromItem_result)that);
      return false;
    }

    public boolean equals(bsgGetSliceFromItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetSliceFromItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetSliceFromItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetSliceFromItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceFromItem_resultStandardScheme getScheme() {
        return new bsgGetSliceFromItem_resultStandardScheme();
      }
    }

    private static class bsgGetSliceFromItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetSliceFromItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetSliceFromItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetSliceFromItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceFromItem_resultTupleScheme getScheme() {
        return new bsgGetSliceFromItem_resultTupleScheme();
      }
    }

    private static class bsgGetSliceFromItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetSliceFromItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetSliceR_args implements org.apache.thrift.TBase<bsgGetSliceR_args, bsgGetSliceR_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetSliceR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetSliceR_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("fromIdx", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetSliceR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetSliceR_argsTupleSchemeFactory();

    public long rootID; // required
    public int fromIdx; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      FROM_IDX((short)2, "fromIdx"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // FROM_IDX
            return FROM_IDX;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private static final int __FROMIDX_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.FROM_IDX, new org.apache.thrift.meta_data.FieldMetaData("fromIdx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetSliceR_args.class, metaDataMap);
    }

    public bsgGetSliceR_args() {
    }

    public bsgGetSliceR_args(
      long rootID,
      int fromIdx,
      int count)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.fromIdx = fromIdx;
      setFromIdxIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetSliceR_args(bsgGetSliceR_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      this.fromIdx = other.fromIdx;
      this.count = other.count;
    }

    public bsgGetSliceR_args deepCopy() {
      return new bsgGetSliceR_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      setFromIdxIsSet(false);
      this.fromIdx = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgGetSliceR_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public int getFromIdx() {
      return this.fromIdx;
    }

    public bsgGetSliceR_args setFromIdx(int fromIdx) {
      this.fromIdx = fromIdx;
      setFromIdxIsSet(true);
      return this;
    }

    public void unsetFromIdx() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FROMIDX_ISSET_ID);
    }

    /** Returns true if field fromIdx is set (has been assigned a value) and false otherwise */
    public boolean isSetFromIdx() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FROMIDX_ISSET_ID);
    }

    public void setFromIdxIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FROMIDX_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public bsgGetSliceR_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case FROM_IDX:
        if (value == null) {
          unsetFromIdx();
        } else {
          setFromIdx((java.lang.Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case FROM_IDX:
        return getFromIdx();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case FROM_IDX:
        return isSetFromIdx();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetSliceR_args)
        return this.equals((bsgGetSliceR_args)that);
      return false;
    }

    public boolean equals(bsgGetSliceR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_fromIdx = true;
      boolean that_present_fromIdx = true;
      if (this_present_fromIdx || that_present_fromIdx) {
        if (!(this_present_fromIdx && that_present_fromIdx))
          return false;
        if (this.fromIdx != that.fromIdx)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + fromIdx;

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetSliceR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromIdx()).compareTo(other.isSetFromIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromIdx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromIdx, other.fromIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetSliceR_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromIdx:");
      sb.append(this.fromIdx);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetSliceR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceR_argsStandardScheme getScheme() {
        return new bsgGetSliceR_argsStandardScheme();
      }
    }

    private static class bsgGetSliceR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetSliceR_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_IDX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromIdx = iprot.readI32();
                struct.setFromIdxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetSliceR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_IDX_FIELD_DESC);
        oprot.writeI32(struct.fromIdx);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetSliceR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceR_argsTupleScheme getScheme() {
        return new bsgGetSliceR_argsTupleScheme();
      }
    }

    private static class bsgGetSliceR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetSliceR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetFromIdx()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetFromIdx()) {
          oprot.writeI32(struct.fromIdx);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromIdx = iprot.readI32();
          struct.setFromIdxIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetSliceR_result implements org.apache.thrift.TBase<bsgGetSliceR_result, bsgGetSliceR_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetSliceR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetSliceR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetSliceR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetSliceR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetSliceR_result.class, metaDataMap);
    }

    public bsgGetSliceR_result() {
    }

    public bsgGetSliceR_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetSliceR_result(bsgGetSliceR_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsgGetSliceR_result deepCopy() {
      return new bsgGetSliceR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsgGetSliceR_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetSliceR_result)
        return this.equals((bsgGetSliceR_result)that);
      return false;
    }

    public boolean equals(bsgGetSliceR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetSliceR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetSliceR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetSliceR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceR_resultStandardScheme getScheme() {
        return new bsgGetSliceR_resultStandardScheme();
      }
    }

    private static class bsgGetSliceR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetSliceR_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetSliceR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetSliceR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceR_resultTupleScheme getScheme() {
        return new bsgGetSliceR_resultTupleScheme();
      }
    }

    private static class bsgGetSliceR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetSliceR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetSliceFromItemR_args implements org.apache.thrift.TBase<bsgGetSliceFromItemR_args, bsgGetSliceFromItemR_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetSliceFromItemR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetSliceFromItemR_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetSliceFromItemR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetSliceFromItemR_argsTupleSchemeFactory();

    public long rootID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      FROM_KEY((short)2, "fromKey"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // FROM_KEY
            return FROM_KEY;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.FROM_KEY, new org.apache.thrift.meta_data.FieldMetaData("fromKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetSliceFromItemR_args.class, metaDataMap);
    }

    public bsgGetSliceFromItemR_args() {
    }

    public bsgGetSliceFromItemR_args(
      long rootID,
      java.nio.ByteBuffer fromKey,
      int count)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetSliceFromItemR_args(bsgGetSliceFromItemR_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      if (other.isSetFromKey()) {
        this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(other.fromKey);
      }
      this.count = other.count;
    }

    public bsgGetSliceFromItemR_args deepCopy() {
      return new bsgGetSliceFromItemR_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      this.fromKey = null;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgGetSliceFromItemR_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public byte[] getFromKey() {
      setFromKey(org.apache.thrift.TBaseHelper.rightSize(fromKey));
      return fromKey == null ? null : fromKey.array();
    }

    public java.nio.ByteBuffer bufferForFromKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(fromKey);
    }

    public bsgGetSliceFromItemR_args setFromKey(byte[] fromKey) {
      this.fromKey = fromKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fromKey.clone());
      return this;
    }

    public bsgGetSliceFromItemR_args setFromKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey) {
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      return this;
    }

    public void unsetFromKey() {
      this.fromKey = null;
    }

    /** Returns true if field fromKey is set (has been assigned a value) and false otherwise */
    public boolean isSetFromKey() {
      return this.fromKey != null;
    }

    public void setFromKeyIsSet(boolean value) {
      if (!value) {
        this.fromKey = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public bsgGetSliceFromItemR_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case FROM_KEY:
        if (value == null) {
          unsetFromKey();
        } else {
          if (value instanceof byte[]) {
            setFromKey((byte[])value);
          } else {
            setFromKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case FROM_KEY:
        return getFromKey();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case FROM_KEY:
        return isSetFromKey();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetSliceFromItemR_args)
        return this.equals((bsgGetSliceFromItemR_args)that);
      return false;
    }

    public boolean equals(bsgGetSliceFromItemR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_fromKey = true && this.isSetFromKey();
      boolean that_present_fromKey = true && that.isSetFromKey();
      if (this_present_fromKey || that_present_fromKey) {
        if (!(this_present_fromKey && that_present_fromKey))
          return false;
        if (!this.fromKey.equals(that.fromKey))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + ((isSetFromKey()) ? 131071 : 524287);
      if (isSetFromKey())
        hashCode = hashCode * 8191 + fromKey.hashCode();

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetSliceFromItemR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromKey()).compareTo(other.isSetFromKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromKey, other.fromKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetSliceFromItemR_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromKey:");
      if (this.fromKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fromKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetSliceFromItemR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceFromItemR_argsStandardScheme getScheme() {
        return new bsgGetSliceFromItemR_argsStandardScheme();
      }
    }

    private static class bsgGetSliceFromItemR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetSliceFromItemR_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromKey = iprot.readBinary();
                struct.setFromKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetSliceFromItemR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        if (struct.fromKey != null) {
          oprot.writeFieldBegin(FROM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.fromKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetSliceFromItemR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceFromItemR_argsTupleScheme getScheme() {
        return new bsgGetSliceFromItemR_argsTupleScheme();
      }
    }

    private static class bsgGetSliceFromItemR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetSliceFromItemR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetFromKey()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetFromKey()) {
          oprot.writeBinary(struct.fromKey);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromKey = iprot.readBinary();
          struct.setFromKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgGetSliceFromItemR_result implements org.apache.thrift.TBase<bsgGetSliceFromItemR_result, bsgGetSliceFromItemR_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgGetSliceFromItemR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgGetSliceFromItemR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgGetSliceFromItemR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgGetSliceFromItemR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgGetSliceFromItemR_result.class, metaDataMap);
    }

    public bsgGetSliceFromItemR_result() {
    }

    public bsgGetSliceFromItemR_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgGetSliceFromItemR_result(bsgGetSliceFromItemR_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsgGetSliceFromItemR_result deepCopy() {
      return new bsgGetSliceFromItemR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsgGetSliceFromItemR_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgGetSliceFromItemR_result)
        return this.equals((bsgGetSliceFromItemR_result)that);
      return false;
    }

    public boolean equals(bsgGetSliceFromItemR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgGetSliceFromItemR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgGetSliceFromItemR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgGetSliceFromItemR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceFromItemR_resultStandardScheme getScheme() {
        return new bsgGetSliceFromItemR_resultStandardScheme();
      }
    }

    private static class bsgGetSliceFromItemR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgGetSliceFromItemR_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgGetSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgGetSliceFromItemR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgGetSliceFromItemR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgGetSliceFromItemR_resultTupleScheme getScheme() {
        return new bsgGetSliceFromItemR_resultTupleScheme();
      }
    }

    private static class bsgGetSliceFromItemR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgGetSliceFromItemR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgGetSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgRangeQuery_args implements org.apache.thrift.TBase<bsgRangeQuery_args, bsgRangeQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgRangeQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgRangeQuery_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("endKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgRangeQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgRangeQuery_argsTupleSchemeFactory();

    public long rootID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer startKey; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer endKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      START_KEY((short)2, "startKey"),
      END_KEY((short)3, "endKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // START_KEY
            return START_KEY;
          case 3: // END_KEY
            return END_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("startKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("endKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgRangeQuery_args.class, metaDataMap);
    }

    public bsgRangeQuery_args() {
    }

    public bsgRangeQuery_args(
      long rootID,
      java.nio.ByteBuffer startKey,
      java.nio.ByteBuffer endKey)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
      this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgRangeQuery_args(bsgRangeQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      if (other.isSetStartKey()) {
        this.startKey = org.apache.thrift.TBaseHelper.copyBinary(other.startKey);
      }
      if (other.isSetEndKey()) {
        this.endKey = org.apache.thrift.TBaseHelper.copyBinary(other.endKey);
      }
    }

    public bsgRangeQuery_args deepCopy() {
      return new bsgRangeQuery_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      this.startKey = null;
      this.endKey = null;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgRangeQuery_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public byte[] getStartKey() {
      setStartKey(org.apache.thrift.TBaseHelper.rightSize(startKey));
      return startKey == null ? null : startKey.array();
    }

    public java.nio.ByteBuffer bufferForStartKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(startKey);
    }

    public bsgRangeQuery_args setStartKey(byte[] startKey) {
      this.startKey = startKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(startKey.clone());
      return this;
    }

    public bsgRangeQuery_args setStartKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer startKey) {
      this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
      return this;
    }

    public void unsetStartKey() {
      this.startKey = null;
    }

    /** Returns true if field startKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStartKey() {
      return this.startKey != null;
    }

    public void setStartKeyIsSet(boolean value) {
      if (!value) {
        this.startKey = null;
      }
    }

    public byte[] getEndKey() {
      setEndKey(org.apache.thrift.TBaseHelper.rightSize(endKey));
      return endKey == null ? null : endKey.array();
    }

    public java.nio.ByteBuffer bufferForEndKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(endKey);
    }

    public bsgRangeQuery_args setEndKey(byte[] endKey) {
      this.endKey = endKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(endKey.clone());
      return this;
    }

    public bsgRangeQuery_args setEndKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer endKey) {
      this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
      return this;
    }

    public void unsetEndKey() {
      this.endKey = null;
    }

    /** Returns true if field endKey is set (has been assigned a value) and false otherwise */
    public boolean isSetEndKey() {
      return this.endKey != null;
    }

    public void setEndKeyIsSet(boolean value) {
      if (!value) {
        this.endKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case START_KEY:
        if (value == null) {
          unsetStartKey();
        } else {
          if (value instanceof byte[]) {
            setStartKey((byte[])value);
          } else {
            setStartKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case END_KEY:
        if (value == null) {
          unsetEndKey();
        } else {
          if (value instanceof byte[]) {
            setEndKey((byte[])value);
          } else {
            setEndKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case START_KEY:
        return getStartKey();

      case END_KEY:
        return getEndKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case START_KEY:
        return isSetStartKey();
      case END_KEY:
        return isSetEndKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgRangeQuery_args)
        return this.equals((bsgRangeQuery_args)that);
      return false;
    }

    public boolean equals(bsgRangeQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_startKey = true && this.isSetStartKey();
      boolean that_present_startKey = true && that.isSetStartKey();
      if (this_present_startKey || that_present_startKey) {
        if (!(this_present_startKey && that_present_startKey))
          return false;
        if (!this.startKey.equals(that.startKey))
          return false;
      }

      boolean this_present_endKey = true && this.isSetEndKey();
      boolean that_present_endKey = true && that.isSetEndKey();
      if (this_present_endKey || that_present_endKey) {
        if (!(this_present_endKey && that_present_endKey))
          return false;
        if (!this.endKey.equals(that.endKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + ((isSetStartKey()) ? 131071 : 524287);
      if (isSetStartKey())
        hashCode = hashCode * 8191 + startKey.hashCode();

      hashCode = hashCode * 8191 + ((isSetEndKey()) ? 131071 : 524287);
      if (isSetEndKey())
        hashCode = hashCode * 8191 + endKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgRangeQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEndKey()).compareTo(other.isSetEndKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endKey, other.endKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgRangeQuery_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startKey:");
      if (this.startKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.startKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endKey:");
      if (this.endKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.endKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgRangeQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgRangeQuery_argsStandardScheme getScheme() {
        return new bsgRangeQuery_argsStandardScheme();
      }
    }

    private static class bsgRangeQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgRangeQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgRangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startKey = iprot.readBinary();
                struct.setStartKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endKey = iprot.readBinary();
                struct.setEndKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgRangeQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        if (struct.startKey != null) {
          oprot.writeFieldBegin(START_KEY_FIELD_DESC);
          oprot.writeBinary(struct.startKey);
          oprot.writeFieldEnd();
        }
        if (struct.endKey != null) {
          oprot.writeFieldBegin(END_KEY_FIELD_DESC);
          oprot.writeBinary(struct.endKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgRangeQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgRangeQuery_argsTupleScheme getScheme() {
        return new bsgRangeQuery_argsTupleScheme();
      }
    }

    private static class bsgRangeQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgRangeQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgRangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetStartKey()) {
          optionals.set(1);
        }
        if (struct.isSetEndKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetStartKey()) {
          oprot.writeBinary(struct.startKey);
        }
        if (struct.isSetEndKey()) {
          oprot.writeBinary(struct.endKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgRangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startKey = iprot.readBinary();
          struct.setStartKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endKey = iprot.readBinary();
          struct.setEndKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgRangeQuery_result implements org.apache.thrift.TBase<bsgRangeQuery_result, bsgRangeQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgRangeQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgRangeQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgRangeQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgRangeQuery_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgRangeQuery_result.class, metaDataMap);
    }

    public bsgRangeQuery_result() {
    }

    public bsgRangeQuery_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgRangeQuery_result(bsgRangeQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public bsgRangeQuery_result deepCopy() {
      return new bsgRangeQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public bsgRangeQuery_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgRangeQuery_result)
        return this.equals((bsgRangeQuery_result)that);
      return false;
    }

    public boolean equals(bsgRangeQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgRangeQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgRangeQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgRangeQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgRangeQuery_resultStandardScheme getScheme() {
        return new bsgRangeQuery_resultStandardScheme();
      }
    }

    private static class bsgRangeQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgRangeQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgRangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgRangeQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgRangeQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgRangeQuery_resultTupleScheme getScheme() {
        return new bsgRangeQuery_resultTupleScheme();
      }
    }

    private static class bsgRangeQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgRangeQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgRangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgRangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgMultiPut_args implements org.apache.thrift.TBase<bsgMultiPut_args, bsgMultiPut_args._Fields>, java.io.Serializable, Cloneable, Comparable<bsgMultiPut_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgMultiPut_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SET_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("setData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField GET_ADDED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("getAddedItems", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField GET_REPLACED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("getReplacedItems", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgMultiPut_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgMultiPut_argsTupleSchemeFactory();

    public long rootID; // required
    public @org.apache.thrift.annotation.Nullable TItemSet setData; // required
    public boolean getAddedItems; // required
    public boolean getReplacedItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID"),
      SET_DATA((short)2, "setData"),
      GET_ADDED_ITEMS((short)3, "getAddedItems"),
      GET_REPLACED_ITEMS((short)4, "getReplacedItems");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          case 2: // SET_DATA
            return SET_DATA;
          case 3: // GET_ADDED_ITEMS
            return GET_ADDED_ITEMS;
          case 4: // GET_REPLACED_ITEMS
            return GET_REPLACED_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private static final int __GETADDEDITEMS_ISSET_ID = 1;
    private static final int __GETREPLACEDITEMS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      tmpMap.put(_Fields.SET_DATA, new org.apache.thrift.meta_data.FieldMetaData("setData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSet.class)));
      tmpMap.put(_Fields.GET_ADDED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("getAddedItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.GET_REPLACED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("getReplacedItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgMultiPut_args.class, metaDataMap);
    }

    public bsgMultiPut_args() {
    }

    public bsgMultiPut_args(
      long rootID,
      TItemSet setData,
      boolean getAddedItems,
      boolean getReplacedItems)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
      this.setData = setData;
      this.getAddedItems = getAddedItems;
      setGetAddedItemsIsSet(true);
      this.getReplacedItems = getReplacedItems;
      setGetReplacedItemsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgMultiPut_args(bsgMultiPut_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
      if (other.isSetSetData()) {
        this.setData = new TItemSet(other.setData);
      }
      this.getAddedItems = other.getAddedItems;
      this.getReplacedItems = other.getReplacedItems;
    }

    public bsgMultiPut_args deepCopy() {
      return new bsgMultiPut_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
      this.setData = null;
      setGetAddedItemsIsSet(false);
      this.getAddedItems = false;
      setGetReplacedItemsIsSet(false);
      this.getReplacedItems = false;
    }

    public long getRootID() {
      return this.rootID;
    }

    public bsgMultiPut_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSet getSetData() {
      return this.setData;
    }

    public bsgMultiPut_args setSetData(@org.apache.thrift.annotation.Nullable TItemSet setData) {
      this.setData = setData;
      return this;
    }

    public void unsetSetData() {
      this.setData = null;
    }

    /** Returns true if field setData is set (has been assigned a value) and false otherwise */
    public boolean isSetSetData() {
      return this.setData != null;
    }

    public void setSetDataIsSet(boolean value) {
      if (!value) {
        this.setData = null;
      }
    }

    public boolean isGetAddedItems() {
      return this.getAddedItems;
    }

    public bsgMultiPut_args setGetAddedItems(boolean getAddedItems) {
      this.getAddedItems = getAddedItems;
      setGetAddedItemsIsSet(true);
      return this;
    }

    public void unsetGetAddedItems() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID);
    }

    /** Returns true if field getAddedItems is set (has been assigned a value) and false otherwise */
    public boolean isSetGetAddedItems() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID);
    }

    public void setGetAddedItemsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID, value);
    }

    public boolean isGetReplacedItems() {
      return this.getReplacedItems;
    }

    public bsgMultiPut_args setGetReplacedItems(boolean getReplacedItems) {
      this.getReplacedItems = getReplacedItems;
      setGetReplacedItemsIsSet(true);
      return this;
    }

    public void unsetGetReplacedItems() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID);
    }

    /** Returns true if field getReplacedItems is set (has been assigned a value) and false otherwise */
    public boolean isSetGetReplacedItems() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID);
    }

    public void setGetReplacedItemsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      case SET_DATA:
        if (value == null) {
          unsetSetData();
        } else {
          setSetData((TItemSet)value);
        }
        break;

      case GET_ADDED_ITEMS:
        if (value == null) {
          unsetGetAddedItems();
        } else {
          setGetAddedItems((java.lang.Boolean)value);
        }
        break;

      case GET_REPLACED_ITEMS:
        if (value == null) {
          unsetGetReplacedItems();
        } else {
          setGetReplacedItems((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      case SET_DATA:
        return getSetData();

      case GET_ADDED_ITEMS:
        return isGetAddedItems();

      case GET_REPLACED_ITEMS:
        return isGetReplacedItems();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      case SET_DATA:
        return isSetSetData();
      case GET_ADDED_ITEMS:
        return isSetGetAddedItems();
      case GET_REPLACED_ITEMS:
        return isSetGetReplacedItems();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgMultiPut_args)
        return this.equals((bsgMultiPut_args)that);
      return false;
    }

    public boolean equals(bsgMultiPut_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      boolean this_present_setData = true && this.isSetSetData();
      boolean that_present_setData = true && that.isSetSetData();
      if (this_present_setData || that_present_setData) {
        if (!(this_present_setData && that_present_setData))
          return false;
        if (!this.setData.equals(that.setData))
          return false;
      }

      boolean this_present_getAddedItems = true;
      boolean that_present_getAddedItems = true;
      if (this_present_getAddedItems || that_present_getAddedItems) {
        if (!(this_present_getAddedItems && that_present_getAddedItems))
          return false;
        if (this.getAddedItems != that.getAddedItems)
          return false;
      }

      boolean this_present_getReplacedItems = true;
      boolean that_present_getReplacedItems = true;
      if (this_present_getReplacedItems || that_present_getReplacedItems) {
        if (!(this_present_getReplacedItems && that_present_getReplacedItems))
          return false;
        if (this.getReplacedItems != that.getReplacedItems)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      hashCode = hashCode * 8191 + ((isSetSetData()) ? 131071 : 524287);
      if (isSetSetData())
        hashCode = hashCode * 8191 + setData.hashCode();

      hashCode = hashCode * 8191 + ((getAddedItems) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((getReplacedItems) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(bsgMultiPut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSetData()).compareTo(other.isSetSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setData, other.setData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGetAddedItems()).compareTo(other.isSetGetAddedItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetAddedItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getAddedItems, other.getAddedItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGetReplacedItems()).compareTo(other.isSetGetReplacedItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetReplacedItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getReplacedItems, other.getReplacedItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgMultiPut_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("setData:");
      if (this.setData == null) {
        sb.append("null");
      } else {
        sb.append(this.setData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("getAddedItems:");
      sb.append(this.getAddedItems);
      first = false;
      if (!first) sb.append(", ");
      sb.append("getReplacedItems:");
      sb.append(this.getReplacedItems);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (setData != null) {
        setData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgMultiPut_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgMultiPut_argsStandardScheme getScheme() {
        return new bsgMultiPut_argsStandardScheme();
      }
    }

    private static class bsgMultiPut_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgMultiPut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgMultiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SET_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.setData = new TItemSet();
                struct.setData.read(iprot);
                struct.setSetDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GET_ADDED_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.getAddedItems = iprot.readBool();
                struct.setGetAddedItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GET_REPLACED_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.getReplacedItems = iprot.readBool();
                struct.setGetReplacedItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgMultiPut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        if (struct.setData != null) {
          oprot.writeFieldBegin(SET_DATA_FIELD_DESC);
          struct.setData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GET_ADDED_ITEMS_FIELD_DESC);
        oprot.writeBool(struct.getAddedItems);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GET_REPLACED_ITEMS_FIELD_DESC);
        oprot.writeBool(struct.getReplacedItems);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgMultiPut_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgMultiPut_argsTupleScheme getScheme() {
        return new bsgMultiPut_argsTupleScheme();
      }
    }

    private static class bsgMultiPut_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgMultiPut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgMultiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        if (struct.isSetSetData()) {
          optionals.set(1);
        }
        if (struct.isSetGetAddedItems()) {
          optionals.set(2);
        }
        if (struct.isSetGetReplacedItems()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
        if (struct.isSetSetData()) {
          struct.setData.write(oprot);
        }
        if (struct.isSetGetAddedItems()) {
          oprot.writeBool(struct.getAddedItems);
        }
        if (struct.isSetGetReplacedItems()) {
          oprot.writeBool(struct.getReplacedItems);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgMultiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.setData = new TItemSet();
          struct.setData.read(iprot);
          struct.setSetDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.getAddedItems = iprot.readBool();
          struct.setGetAddedItemsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.getReplacedItems = iprot.readBool();
          struct.setGetReplacedItemsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bsgMultiPut_result implements org.apache.thrift.TBase<bsgMultiPut_result, bsgMultiPut_result._Fields>, java.io.Serializable, Cloneable, Comparable<bsgMultiPut_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bsgMultiPut_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bsgMultiPut_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bsgMultiPut_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TMultiPutItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMultiPutItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bsgMultiPut_result.class, metaDataMap);
    }

    public bsgMultiPut_result() {
    }

    public bsgMultiPut_result(
      TMultiPutItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bsgMultiPut_result(bsgMultiPut_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMultiPutItemResult(other.success);
      }
    }

    public bsgMultiPut_result deepCopy() {
      return new bsgMultiPut_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TMultiPutItemResult getSuccess() {
      return this.success;
    }

    public bsgMultiPut_result setSuccess(@org.apache.thrift.annotation.Nullable TMultiPutItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMultiPutItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bsgMultiPut_result)
        return this.equals((bsgMultiPut_result)that);
      return false;
    }

    public boolean equals(bsgMultiPut_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bsgMultiPut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bsgMultiPut_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bsgMultiPut_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgMultiPut_resultStandardScheme getScheme() {
        return new bsgMultiPut_resultStandardScheme();
      }
    }

    private static class bsgMultiPut_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bsgMultiPut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bsgMultiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMultiPutItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bsgMultiPut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bsgMultiPut_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bsgMultiPut_resultTupleScheme getScheme() {
        return new bsgMultiPut_resultTupleScheme();
      }
    }

    private static class bsgMultiPut_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bsgMultiPut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bsgMultiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bsgMultiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMultiPutItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTotalCount_args implements org.apache.thrift.TBase<getTotalCount_args, getTotalCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalCount_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTotalCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTotalCount_argsTupleSchemeFactory();

    public long rootID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalCount_args.class, metaDataMap);
    }

    public getTotalCount_args() {
    }

    public getTotalCount_args(
      long rootID)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalCount_args(getTotalCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
    }

    public getTotalCount_args deepCopy() {
      return new getTotalCount_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
    }

    public long getRootID() {
      return this.rootID;
    }

    public getTotalCount_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalCount_args)
        return this.equals((getTotalCount_args)that);
      return false;
    }

    public boolean equals(getTotalCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      return hashCode;
    }

    @Override
    public int compareTo(getTotalCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTotalCount_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_argsStandardScheme getScheme() {
        return new getTotalCount_argsStandardScheme();
      }
    }

    private static class getTotalCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTotalCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_argsTupleScheme getScheme() {
        return new getTotalCount_argsTupleScheme();
      }
    }

    private static class getTotalCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTotalCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTotalCount_result implements org.apache.thrift.TBase<getTotalCount_result, getTotalCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTotalCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTotalCount_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalCount_result.class, metaDataMap);
    }

    public getTotalCount_result() {
    }

    public getTotalCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalCount_result(getTotalCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTotalCount_result deepCopy() {
      return new getTotalCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getTotalCount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalCount_result)
        return this.equals((getTotalCount_result)that);
      return false;
    }

    public boolean equals(getTotalCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(getTotalCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTotalCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_resultStandardScheme getScheme() {
        return new getTotalCount_resultStandardScheme();
      }
    }

    private static class getTotalCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTotalCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_resultTupleScheme getScheme() {
        return new getTotalCount_resultTupleScheme();
      }
    }

    private static class getTotalCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTotalCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeAll_args implements org.apache.thrift.TBase<removeAll_args, removeAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAll_args");

    private static final org.apache.thrift.protocol.TField ROOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rootID", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeAll_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeAll_argsTupleSchemeFactory();

    public long rootID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOT_ID((short)1, "rootID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOT_ID
            return ROOT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROOTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOT_ID, new org.apache.thrift.meta_data.FieldMetaData("rootID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TContainerKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAll_args.class, metaDataMap);
    }

    public removeAll_args() {
    }

    public removeAll_args(
      long rootID)
    {
      this();
      this.rootID = rootID;
      setRootIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAll_args(removeAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rootID = other.rootID;
    }

    public removeAll_args deepCopy() {
      return new removeAll_args(this);
    }

    @Override
    public void clear() {
      setRootIDIsSet(false);
      this.rootID = 0;
    }

    public long getRootID() {
      return this.rootID;
    }

    public removeAll_args setRootID(long rootID) {
      this.rootID = rootID;
      setRootIDIsSet(true);
      return this;
    }

    public void unsetRootID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    /** Returns true if field rootID is set (has been assigned a value) and false otherwise */
    public boolean isSetRootID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOTID_ISSET_ID);
    }

    public void setRootIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ROOT_ID:
        if (value == null) {
          unsetRootID();
        } else {
          setRootID((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOT_ID:
        return getRootID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOT_ID:
        return isSetRootID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAll_args)
        return this.equals((removeAll_args)that);
      return false;
    }

    public boolean equals(removeAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rootID = true;
      boolean that_present_rootID = true;
      if (this_present_rootID || that_present_rootID) {
        if (!(this_present_rootID && that_present_rootID))
          return false;
        if (this.rootID != that.rootID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rootID);

      return hashCode;
    }

    @Override
    public int compareTo(removeAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRootID()).compareTo(other.isSetRootID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootID, other.rootID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeAll_args(");
      boolean first = true;

      sb.append("rootID:");
      sb.append(this.rootID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_argsStandardScheme getScheme() {
        return new removeAll_argsStandardScheme();
      }
    }

    private static class removeAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rootID = iprot.readI64();
                struct.setRootIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROOT_ID_FIELD_DESC);
        oprot.writeI64(struct.rootID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_argsTupleScheme getScheme() {
        return new removeAll_argsTupleScheme();
      }
    }

    private static class removeAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRootID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRootID()) {
          oprot.writeI64(struct.rootID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rootID = iprot.readI64();
          struct.setRootIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeAll_result implements org.apache.thrift.TBase<removeAll_result, removeAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeAll_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeAll_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAll_result.class, metaDataMap);
    }

    public removeAll_result() {
    }

    public removeAll_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAll_result(removeAll_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public removeAll_result deepCopy() {
      return new removeAll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public removeAll_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAll_result)
        return this.equals((removeAll_result)that);
      return false;
    }

    public boolean equals(removeAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(removeAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeAll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_resultStandardScheme getScheme() {
        return new removeAll_resultStandardScheme();
      }
    }

    private static class removeAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_resultTupleScheme getScheme() {
        return new removeAll_resultTupleScheme();
      }
    }

    private static class removeAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
