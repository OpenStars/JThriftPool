/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.storage.bigset;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class TMultiPutItemResult implements org.apache.thrift.TBase<TMultiPutItemResult, TMultiPutItemResult._Fields>, java.io.Serializable, Cloneable, Comparable<TMultiPutItemResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMultiPutItemResult");

  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("added", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REPLACED_FIELD_DESC = new org.apache.thrift.protocol.TField("replaced", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMultiPutItemResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMultiPutItemResultTupleSchemeFactory();

  /**
   * 
   * @see TErrorCode
   */
  public @org.apache.thrift.annotation.Nullable TErrorCode error; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> added; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TItem> replaced; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TErrorCode
     */
    ERROR((short)1, "error"),
    ADDED((short)2, "added"),
    REPLACED((short)3, "replaced");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR
          return ERROR;
        case 2: // ADDED
          return ADDED;
        case 3: // REPLACED
          return REPLACED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ADDED,_Fields.REPLACED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TErrorCode.class)));
    tmpMap.put(_Fields.ADDED, new org.apache.thrift.meta_data.FieldMetaData("added", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "TItemKey"))));
    tmpMap.put(_Fields.REPLACED, new org.apache.thrift.meta_data.FieldMetaData("replaced", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItem.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMultiPutItemResult.class, metaDataMap);
  }

  public TMultiPutItemResult() {
  }

  public TMultiPutItemResult(
    TErrorCode error)
  {
    this();
    this.error = error;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMultiPutItemResult(TMultiPutItemResult other) {
    if (other.isSetError()) {
      this.error = other.error;
    }
    if (other.isSetAdded()) {
      java.util.List<java.nio.ByteBuffer> __this__added = new java.util.ArrayList<java.nio.ByteBuffer>(other.added.size());
      for (java.nio.ByteBuffer other_element : other.added) {
        __this__added.add(org.apache.thrift.TBaseHelper.copyBinary(other_element));
      }
      this.added = __this__added;
    }
    if (other.isSetReplaced()) {
      java.util.List<TItem> __this__replaced = new java.util.ArrayList<TItem>(other.replaced.size());
      for (TItem other_element : other.replaced) {
        __this__replaced.add(new TItem(other_element));
      }
      this.replaced = __this__replaced;
    }
  }

  public TMultiPutItemResult deepCopy() {
    return new TMultiPutItemResult(this);
  }

  @Override
  public void clear() {
    this.error = null;
    this.added = null;
    this.replaced = null;
  }

  /**
   * 
   * @see TErrorCode
   */
  @org.apache.thrift.annotation.Nullable
  public TErrorCode getError() {
    return this.error;
  }

  /**
   * 
   * @see TErrorCode
   */
  public TMultiPutItemResult setError(@org.apache.thrift.annotation.Nullable TErrorCode error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public int getAddedSize() {
    return (this.added == null) ? 0 : this.added.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getAddedIterator() {
    return (this.added == null) ? null : this.added.iterator();
  }

  public void addToAdded(java.nio.ByteBuffer elem) {
    if (this.added == null) {
      this.added = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.added.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getAdded() {
    return this.added;
  }

  public TMultiPutItemResult setAdded(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> added) {
    this.added = added;
    return this;
  }

  public void unsetAdded() {
    this.added = null;
  }

  /** Returns true if field added is set (has been assigned a value) and false otherwise */
  public boolean isSetAdded() {
    return this.added != null;
  }

  public void setAddedIsSet(boolean value) {
    if (!value) {
      this.added = null;
    }
  }

  public int getReplacedSize() {
    return (this.replaced == null) ? 0 : this.replaced.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TItem> getReplacedIterator() {
    return (this.replaced == null) ? null : this.replaced.iterator();
  }

  public void addToReplaced(TItem elem) {
    if (this.replaced == null) {
      this.replaced = new java.util.ArrayList<TItem>();
    }
    this.replaced.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TItem> getReplaced() {
    return this.replaced;
  }

  public TMultiPutItemResult setReplaced(@org.apache.thrift.annotation.Nullable java.util.List<TItem> replaced) {
    this.replaced = replaced;
    return this;
  }

  public void unsetReplaced() {
    this.replaced = null;
  }

  /** Returns true if field replaced is set (has been assigned a value) and false otherwise */
  public boolean isSetReplaced() {
    return this.replaced != null;
  }

  public void setReplacedIsSet(boolean value) {
    if (!value) {
      this.replaced = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((TErrorCode)value);
      }
      break;

    case ADDED:
      if (value == null) {
        unsetAdded();
      } else {
        setAdded((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case REPLACED:
      if (value == null) {
        unsetReplaced();
      } else {
        setReplaced((java.util.List<TItem>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR:
      return getError();

    case ADDED:
      return getAdded();

    case REPLACED:
      return getReplaced();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ERROR:
      return isSetError();
    case ADDED:
      return isSetAdded();
    case REPLACED:
      return isSetReplaced();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TMultiPutItemResult)
      return this.equals((TMultiPutItemResult)that);
    return false;
  }

  public boolean equals(TMultiPutItemResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_added = true && this.isSetAdded();
    boolean that_present_added = true && that.isSetAdded();
    if (this_present_added || that_present_added) {
      if (!(this_present_added && that_present_added))
        return false;
      if (!this.added.equals(that.added))
        return false;
    }

    boolean this_present_replaced = true && this.isSetReplaced();
    boolean that_present_replaced = true && that.isSetReplaced();
    if (this_present_replaced || that_present_replaced) {
      if (!(this_present_replaced && that_present_replaced))
        return false;
      if (!this.replaced.equals(that.replaced))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + error.getValue();

    hashCode = hashCode * 8191 + ((isSetAdded()) ? 131071 : 524287);
    if (isSetAdded())
      hashCode = hashCode * 8191 + added.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplaced()) ? 131071 : 524287);
    if (isSetReplaced())
      hashCode = hashCode * 8191 + replaced.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TMultiPutItemResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdded()).compareTo(other.isSetAdded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.added, other.added);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReplaced()).compareTo(other.isSetReplaced());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplaced()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replaced, other.replaced);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMultiPutItemResult(");
    boolean first = true;

    sb.append("error:");
    if (this.error == null) {
      sb.append("null");
    } else {
      sb.append(this.error);
    }
    first = false;
    if (isSetAdded()) {
      if (!first) sb.append(", ");
      sb.append("added:");
      if (this.added == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.added, sb);
      }
      first = false;
    }
    if (isSetReplaced()) {
      if (!first) sb.append(", ");
      sb.append("replaced:");
      if (this.replaced == null) {
        sb.append("null");
      } else {
        sb.append(this.replaced);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMultiPutItemResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TMultiPutItemResultStandardScheme getScheme() {
      return new TMultiPutItemResultStandardScheme();
    }
  }

  private static class TMultiPutItemResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMultiPutItemResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMultiPutItemResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.error = openstars.storage.bigset.TErrorCode.findByValue(iprot.readI32());
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADDED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.added = new java.util.ArrayList<java.nio.ByteBuffer>(_list8.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readBinary();
                  struct.added.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setAddedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLACED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.replaced = new java.util.ArrayList<TItem>(_list11.size);
                @org.apache.thrift.annotation.Nullable TItem _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new TItem();
                  _elem12.read(iprot);
                  struct.replaced.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setReplacedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMultiPutItemResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.error != null) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeI32(struct.error.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.added != null) {
        if (struct.isSetAdded()) {
          oprot.writeFieldBegin(ADDED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.added.size()));
            for (java.nio.ByteBuffer _iter14 : struct.added)
            {
              oprot.writeBinary(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.replaced != null) {
        if (struct.isSetReplaced()) {
          oprot.writeFieldBegin(REPLACED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replaced.size()));
            for (TItem _iter15 : struct.replaced)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMultiPutItemResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TMultiPutItemResultTupleScheme getScheme() {
      return new TMultiPutItemResultTupleScheme();
    }
  }

  private static class TMultiPutItemResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMultiPutItemResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMultiPutItemResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetError()) {
        optionals.set(0);
      }
      if (struct.isSetAdded()) {
        optionals.set(1);
      }
      if (struct.isSetReplaced()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetError()) {
        oprot.writeI32(struct.error.getValue());
      }
      if (struct.isSetAdded()) {
        {
          oprot.writeI32(struct.added.size());
          for (java.nio.ByteBuffer _iter16 : struct.added)
          {
            oprot.writeBinary(_iter16);
          }
        }
      }
      if (struct.isSetReplaced()) {
        {
          oprot.writeI32(struct.replaced.size());
          for (TItem _iter17 : struct.replaced)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMultiPutItemResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.error = openstars.storage.bigset.TErrorCode.findByValue(iprot.readI32());
        struct.setErrorIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.added = new java.util.ArrayList<java.nio.ByteBuffer>(_list18.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readBinary();
            struct.added.add(_elem19);
          }
        }
        struct.setAddedIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.replaced = new java.util.ArrayList<TItem>(_list21.size);
          @org.apache.thrift.annotation.Nullable TItem _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new TItem();
            _elem22.read(iprot);
            struct.replaced.add(_elem22);
          }
        }
        struct.setReplacedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

