/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.storage.bigset;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class TIBSDataService {

  public interface Iface {

    public TPutItemResult putItem(long bigsetID, TItem item) throws org.apache.thrift.TException;

    public boolean removeItem(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TExistedResult existed(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TItemResult getItem(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException;

    public TItemSetResult getSlice(long bigsetID, int fromPos, int count) throws org.apache.thrift.TException;

    public TItemSetResult getSliceFromItem(long bigsetID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException;

    public TItemSetResult getSliceR(long bigsetID, int fromPos, int count) throws org.apache.thrift.TException;

    public TItemSetResult getSliceFromItemR(long bigsetID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException;

    public TItemSetResult rangeQuery(long bigsetID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException;

    public TMultiPutItemResult multiPut(long bigsetID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException;

    public long getTotalCount(long bigsetID) throws org.apache.thrift.TException;

    public long removeAll(long bigsetID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void putItem(long bigsetID, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException;

    public void removeItem(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void existed(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException;

    public void getItem(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException;

    public void getSlice(long bigsetID, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void getSliceFromItem(long bigsetID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void getSliceR(long bigsetID, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void getSliceFromItemR(long bigsetID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void rangeQuery(long bigsetID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException;

    public void multiPut(long bigsetID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException;

    public void getTotalCount(long bigsetID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void removeAll(long bigsetID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TPutItemResult putItem(long bigsetID, TItem item) throws org.apache.thrift.TException
    {
      send_putItem(bigsetID, item);
      return recv_putItem();
    }

    public void send_putItem(long bigsetID, TItem item) throws org.apache.thrift.TException
    {
      putItem_args args = new putItem_args();
      args.setBigsetID(bigsetID);
      args.setItem(item);
      sendBase("putItem", args);
    }

    public TPutItemResult recv_putItem() throws org.apache.thrift.TException
    {
      putItem_result result = new putItem_result();
      receiveBase(result, "putItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putItem failed: unknown result");
    }

    public boolean removeItem(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_removeItem(bigsetID, itemKey);
      return recv_removeItem();
    }

    public void send_removeItem(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      removeItem_args args = new removeItem_args();
      args.setBigsetID(bigsetID);
      args.setItemKey(itemKey);
      sendBase("removeItem", args);
    }

    public boolean recv_removeItem() throws org.apache.thrift.TException
    {
      removeItem_result result = new removeItem_result();
      receiveBase(result, "removeItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeItem failed: unknown result");
    }

    public TExistedResult existed(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_existed(bigsetID, itemKey);
      return recv_existed();
    }

    public void send_existed(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      existed_args args = new existed_args();
      args.setBigsetID(bigsetID);
      args.setItemKey(itemKey);
      sendBase("existed", args);
    }

    public TExistedResult recv_existed() throws org.apache.thrift.TException
    {
      existed_result result = new existed_result();
      receiveBase(result, "existed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "existed failed: unknown result");
    }

    public TItemResult getItem(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      send_getItem(bigsetID, itemKey);
      return recv_getItem();
    }

    public void send_getItem(long bigsetID, java.nio.ByteBuffer itemKey) throws org.apache.thrift.TException
    {
      getItem_args args = new getItem_args();
      args.setBigsetID(bigsetID);
      args.setItemKey(itemKey);
      sendBase("getItem", args);
    }

    public TItemResult recv_getItem() throws org.apache.thrift.TException
    {
      getItem_result result = new getItem_result();
      receiveBase(result, "getItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getItem failed: unknown result");
    }

    public TItemSetResult getSlice(long bigsetID, int fromPos, int count) throws org.apache.thrift.TException
    {
      send_getSlice(bigsetID, fromPos, count);
      return recv_getSlice();
    }

    public void send_getSlice(long bigsetID, int fromPos, int count) throws org.apache.thrift.TException
    {
      getSlice_args args = new getSlice_args();
      args.setBigsetID(bigsetID);
      args.setFromPos(fromPos);
      args.setCount(count);
      sendBase("getSlice", args);
    }

    public TItemSetResult recv_getSlice() throws org.apache.thrift.TException
    {
      getSlice_result result = new getSlice_result();
      receiveBase(result, "getSlice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSlice failed: unknown result");
    }

    public TItemSetResult getSliceFromItem(long bigsetID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      send_getSliceFromItem(bigsetID, fromKey, count);
      return recv_getSliceFromItem();
    }

    public void send_getSliceFromItem(long bigsetID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      getSliceFromItem_args args = new getSliceFromItem_args();
      args.setBigsetID(bigsetID);
      args.setFromKey(fromKey);
      args.setCount(count);
      sendBase("getSliceFromItem", args);
    }

    public TItemSetResult recv_getSliceFromItem() throws org.apache.thrift.TException
    {
      getSliceFromItem_result result = new getSliceFromItem_result();
      receiveBase(result, "getSliceFromItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSliceFromItem failed: unknown result");
    }

    public TItemSetResult getSliceR(long bigsetID, int fromPos, int count) throws org.apache.thrift.TException
    {
      send_getSliceR(bigsetID, fromPos, count);
      return recv_getSliceR();
    }

    public void send_getSliceR(long bigsetID, int fromPos, int count) throws org.apache.thrift.TException
    {
      getSliceR_args args = new getSliceR_args();
      args.setBigsetID(bigsetID);
      args.setFromPos(fromPos);
      args.setCount(count);
      sendBase("getSliceR", args);
    }

    public TItemSetResult recv_getSliceR() throws org.apache.thrift.TException
    {
      getSliceR_result result = new getSliceR_result();
      receiveBase(result, "getSliceR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSliceR failed: unknown result");
    }

    public TItemSetResult getSliceFromItemR(long bigsetID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      send_getSliceFromItemR(bigsetID, fromKey, count);
      return recv_getSliceFromItemR();
    }

    public void send_getSliceFromItemR(long bigsetID, java.nio.ByteBuffer fromKey, int count) throws org.apache.thrift.TException
    {
      getSliceFromItemR_args args = new getSliceFromItemR_args();
      args.setBigsetID(bigsetID);
      args.setFromKey(fromKey);
      args.setCount(count);
      sendBase("getSliceFromItemR", args);
    }

    public TItemSetResult recv_getSliceFromItemR() throws org.apache.thrift.TException
    {
      getSliceFromItemR_result result = new getSliceFromItemR_result();
      receiveBase(result, "getSliceFromItemR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSliceFromItemR failed: unknown result");
    }

    public TItemSetResult rangeQuery(long bigsetID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException
    {
      send_rangeQuery(bigsetID, startKey, endKey);
      return recv_rangeQuery();
    }

    public void send_rangeQuery(long bigsetID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey) throws org.apache.thrift.TException
    {
      rangeQuery_args args = new rangeQuery_args();
      args.setBigsetID(bigsetID);
      args.setStartKey(startKey);
      args.setEndKey(endKey);
      sendBase("rangeQuery", args);
    }

    public TItemSetResult recv_rangeQuery() throws org.apache.thrift.TException
    {
      rangeQuery_result result = new rangeQuery_result();
      receiveBase(result, "rangeQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rangeQuery failed: unknown result");
    }

    public TMultiPutItemResult multiPut(long bigsetID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException
    {
      send_multiPut(bigsetID, setData, getAddedItems, getReplacedItems);
      return recv_multiPut();
    }

    public void send_multiPut(long bigsetID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems) throws org.apache.thrift.TException
    {
      multiPut_args args = new multiPut_args();
      args.setBigsetID(bigsetID);
      args.setSetData(setData);
      args.setGetAddedItems(getAddedItems);
      args.setGetReplacedItems(getReplacedItems);
      sendBase("multiPut", args);
    }

    public TMultiPutItemResult recv_multiPut() throws org.apache.thrift.TException
    {
      multiPut_result result = new multiPut_result();
      receiveBase(result, "multiPut");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multiPut failed: unknown result");
    }

    public long getTotalCount(long bigsetID) throws org.apache.thrift.TException
    {
      send_getTotalCount(bigsetID);
      return recv_getTotalCount();
    }

    public void send_getTotalCount(long bigsetID) throws org.apache.thrift.TException
    {
      getTotalCount_args args = new getTotalCount_args();
      args.setBigsetID(bigsetID);
      sendBase("getTotalCount", args);
    }

    public long recv_getTotalCount() throws org.apache.thrift.TException
    {
      getTotalCount_result result = new getTotalCount_result();
      receiveBase(result, "getTotalCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTotalCount failed: unknown result");
    }

    public long removeAll(long bigsetID) throws org.apache.thrift.TException
    {
      send_removeAll(bigsetID);
      return recv_removeAll();
    }

    public void send_removeAll(long bigsetID) throws org.apache.thrift.TException
    {
      removeAll_args args = new removeAll_args();
      args.setBigsetID(bigsetID);
      sendBase("removeAll", args);
    }

    public long recv_removeAll() throws org.apache.thrift.TException
    {
      removeAll_result result = new removeAll_result();
      receiveBase(result, "removeAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeAll failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void putItem(long bigsetID, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putItem_call method_call = new putItem_call(bigsetID, item, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putItem_call extends org.apache.thrift.async.TAsyncMethodCall<TPutItemResult> {
      private long bigsetID;
      private TItem item;
      public putItem_call(long bigsetID, TItem item, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.item = item;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putItem_args args = new putItem_args();
        args.setBigsetID(bigsetID);
        args.setItem(item);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPutItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putItem();
      }
    }

    public void removeItem(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeItem_call method_call = new removeItem_call(bigsetID, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeItem_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private long bigsetID;
      private java.nio.ByteBuffer itemKey;
      public removeItem_call(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeItem_args args = new removeItem_args();
        args.setBigsetID(bigsetID);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeItem();
      }
    }

    public void existed(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      existed_call method_call = new existed_call(bigsetID, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class existed_call extends org.apache.thrift.async.TAsyncMethodCall<TExistedResult> {
      private long bigsetID;
      private java.nio.ByteBuffer itemKey;
      public existed_call(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("existed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        existed_args args = new existed_args();
        args.setBigsetID(bigsetID);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TExistedResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_existed();
      }
    }

    public void getItem(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getItem_call method_call = new getItem_call(bigsetID, itemKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getItem_call extends org.apache.thrift.async.TAsyncMethodCall<TItemResult> {
      private long bigsetID;
      private java.nio.ByteBuffer itemKey;
      public getItem_call(long bigsetID, java.nio.ByteBuffer itemKey, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.itemKey = itemKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getItem_args args = new getItem_args();
        args.setBigsetID(bigsetID);
        args.setItemKey(itemKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getItem();
      }
    }

    public void getSlice(long bigsetID, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSlice_call method_call = new getSlice_call(bigsetID, fromPos, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSlice_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long bigsetID;
      private int fromPos;
      private int count;
      public getSlice_call(long bigsetID, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.fromPos = fromPos;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSlice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSlice_args args = new getSlice_args();
        args.setBigsetID(bigsetID);
        args.setFromPos(fromPos);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSlice();
      }
    }

    public void getSliceFromItem(long bigsetID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSliceFromItem_call method_call = new getSliceFromItem_call(bigsetID, fromKey, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSliceFromItem_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long bigsetID;
      private java.nio.ByteBuffer fromKey;
      private int count;
      public getSliceFromItem_call(long bigsetID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.fromKey = fromKey;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSliceFromItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSliceFromItem_args args = new getSliceFromItem_args();
        args.setBigsetID(bigsetID);
        args.setFromKey(fromKey);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSliceFromItem();
      }
    }

    public void getSliceR(long bigsetID, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSliceR_call method_call = new getSliceR_call(bigsetID, fromPos, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSliceR_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long bigsetID;
      private int fromPos;
      private int count;
      public getSliceR_call(long bigsetID, int fromPos, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.fromPos = fromPos;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSliceR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSliceR_args args = new getSliceR_args();
        args.setBigsetID(bigsetID);
        args.setFromPos(fromPos);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSliceR();
      }
    }

    public void getSliceFromItemR(long bigsetID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSliceFromItemR_call method_call = new getSliceFromItemR_call(bigsetID, fromKey, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSliceFromItemR_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long bigsetID;
      private java.nio.ByteBuffer fromKey;
      private int count;
      public getSliceFromItemR_call(long bigsetID, java.nio.ByteBuffer fromKey, int count, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.fromKey = fromKey;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSliceFromItemR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSliceFromItemR_args args = new getSliceFromItemR_args();
        args.setBigsetID(bigsetID);
        args.setFromKey(fromKey);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSliceFromItemR();
      }
    }

    public void rangeQuery(long bigsetID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rangeQuery_call method_call = new rangeQuery_call(bigsetID, startKey, endKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rangeQuery_call extends org.apache.thrift.async.TAsyncMethodCall<TItemSetResult> {
      private long bigsetID;
      private java.nio.ByteBuffer startKey;
      private java.nio.ByteBuffer endKey;
      public rangeQuery_call(long bigsetID, java.nio.ByteBuffer startKey, java.nio.ByteBuffer endKey, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.startKey = startKey;
        this.endKey = endKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rangeQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rangeQuery_args args = new rangeQuery_args();
        args.setBigsetID(bigsetID);
        args.setStartKey(startKey);
        args.setEndKey(endKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TItemSetResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rangeQuery();
      }
    }

    public void multiPut(long bigsetID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiPut_call method_call = new multiPut_call(bigsetID, setData, getAddedItems, getReplacedItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiPut_call extends org.apache.thrift.async.TAsyncMethodCall<TMultiPutItemResult> {
      private long bigsetID;
      private TItemSet setData;
      private boolean getAddedItems;
      private boolean getReplacedItems;
      public multiPut_call(long bigsetID, TItemSet setData, boolean getAddedItems, boolean getReplacedItems, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
        this.setData = setData;
        this.getAddedItems = getAddedItems;
        this.getReplacedItems = getReplacedItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiPut", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiPut_args args = new multiPut_args();
        args.setBigsetID(bigsetID);
        args.setSetData(setData);
        args.setGetAddedItems(getAddedItems);
        args.setGetReplacedItems(getReplacedItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMultiPutItemResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiPut();
      }
    }

    public void getTotalCount(long bigsetID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTotalCount_call method_call = new getTotalCount_call(bigsetID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTotalCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private long bigsetID;
      public getTotalCount_call(long bigsetID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTotalCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTotalCount_args args = new getTotalCount_args();
        args.setBigsetID(bigsetID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTotalCount();
      }
    }

    public void removeAll(long bigsetID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeAll_call method_call = new removeAll_call(bigsetID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeAll_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private long bigsetID;
      public removeAll_call(long bigsetID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bigsetID = bigsetID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeAll_args args = new removeAll_args();
        args.setBigsetID(bigsetID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeAll();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("putItem", new putItem());
      processMap.put("removeItem", new removeItem());
      processMap.put("existed", new existed());
      processMap.put("getItem", new getItem());
      processMap.put("getSlice", new getSlice());
      processMap.put("getSliceFromItem", new getSliceFromItem());
      processMap.put("getSliceR", new getSliceR());
      processMap.put("getSliceFromItemR", new getSliceFromItemR());
      processMap.put("rangeQuery", new rangeQuery());
      processMap.put("multiPut", new multiPut());
      processMap.put("getTotalCount", new getTotalCount());
      processMap.put("removeAll", new removeAll());
      return processMap;
    }

    public static class putItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putItem_args> {
      public putItem() {
        super("putItem");
      }

      public putItem_args getEmptyArgsInstance() {
        return new putItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public putItem_result getResult(I iface, putItem_args args) throws org.apache.thrift.TException {
        putItem_result result = new putItem_result();
        result.success = iface.putItem(args.bigsetID, args.item);
        return result;
      }
    }

    public static class removeItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeItem_args> {
      public removeItem() {
        super("removeItem");
      }

      public removeItem_args getEmptyArgsInstance() {
        return new removeItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public removeItem_result getResult(I iface, removeItem_args args) throws org.apache.thrift.TException {
        removeItem_result result = new removeItem_result();
        result.success = iface.removeItem(args.bigsetID, args.itemKey);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class existed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, existed_args> {
      public existed() {
        super("existed");
      }

      public existed_args getEmptyArgsInstance() {
        return new existed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public existed_result getResult(I iface, existed_args args) throws org.apache.thrift.TException {
        existed_result result = new existed_result();
        result.success = iface.existed(args.bigsetID, args.itemKey);
        return result;
      }
    }

    public static class getItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getItem_args> {
      public getItem() {
        super("getItem");
      }

      public getItem_args getEmptyArgsInstance() {
        return new getItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getItem_result getResult(I iface, getItem_args args) throws org.apache.thrift.TException {
        getItem_result result = new getItem_result();
        result.success = iface.getItem(args.bigsetID, args.itemKey);
        return result;
      }
    }

    public static class getSlice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSlice_args> {
      public getSlice() {
        super("getSlice");
      }

      public getSlice_args getEmptyArgsInstance() {
        return new getSlice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSlice_result getResult(I iface, getSlice_args args) throws org.apache.thrift.TException {
        getSlice_result result = new getSlice_result();
        result.success = iface.getSlice(args.bigsetID, args.fromPos, args.count);
        return result;
      }
    }

    public static class getSliceFromItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSliceFromItem_args> {
      public getSliceFromItem() {
        super("getSliceFromItem");
      }

      public getSliceFromItem_args getEmptyArgsInstance() {
        return new getSliceFromItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSliceFromItem_result getResult(I iface, getSliceFromItem_args args) throws org.apache.thrift.TException {
        getSliceFromItem_result result = new getSliceFromItem_result();
        result.success = iface.getSliceFromItem(args.bigsetID, args.fromKey, args.count);
        return result;
      }
    }

    public static class getSliceR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSliceR_args> {
      public getSliceR() {
        super("getSliceR");
      }

      public getSliceR_args getEmptyArgsInstance() {
        return new getSliceR_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSliceR_result getResult(I iface, getSliceR_args args) throws org.apache.thrift.TException {
        getSliceR_result result = new getSliceR_result();
        result.success = iface.getSliceR(args.bigsetID, args.fromPos, args.count);
        return result;
      }
    }

    public static class getSliceFromItemR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSliceFromItemR_args> {
      public getSliceFromItemR() {
        super("getSliceFromItemR");
      }

      public getSliceFromItemR_args getEmptyArgsInstance() {
        return new getSliceFromItemR_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getSliceFromItemR_result getResult(I iface, getSliceFromItemR_args args) throws org.apache.thrift.TException {
        getSliceFromItemR_result result = new getSliceFromItemR_result();
        result.success = iface.getSliceFromItemR(args.bigsetID, args.fromKey, args.count);
        return result;
      }
    }

    public static class rangeQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rangeQuery_args> {
      public rangeQuery() {
        super("rangeQuery");
      }

      public rangeQuery_args getEmptyArgsInstance() {
        return new rangeQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public rangeQuery_result getResult(I iface, rangeQuery_args args) throws org.apache.thrift.TException {
        rangeQuery_result result = new rangeQuery_result();
        result.success = iface.rangeQuery(args.bigsetID, args.startKey, args.endKey);
        return result;
      }
    }

    public static class multiPut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiPut_args> {
      public multiPut() {
        super("multiPut");
      }

      public multiPut_args getEmptyArgsInstance() {
        return new multiPut_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public multiPut_result getResult(I iface, multiPut_args args) throws org.apache.thrift.TException {
        multiPut_result result = new multiPut_result();
        result.success = iface.multiPut(args.bigsetID, args.setData, args.getAddedItems, args.getReplacedItems);
        return result;
      }
    }

    public static class getTotalCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTotalCount_args> {
      public getTotalCount() {
        super("getTotalCount");
      }

      public getTotalCount_args getEmptyArgsInstance() {
        return new getTotalCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getTotalCount_result getResult(I iface, getTotalCount_args args) throws org.apache.thrift.TException {
        getTotalCount_result result = new getTotalCount_result();
        result.success = iface.getTotalCount(args.bigsetID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class removeAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAll_args> {
      public removeAll() {
        super("removeAll");
      }

      public removeAll_args getEmptyArgsInstance() {
        return new removeAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public removeAll_result getResult(I iface, removeAll_args args) throws org.apache.thrift.TException {
        removeAll_result result = new removeAll_result();
        result.success = iface.removeAll(args.bigsetID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("putItem", new putItem());
      processMap.put("removeItem", new removeItem());
      processMap.put("existed", new existed());
      processMap.put("getItem", new getItem());
      processMap.put("getSlice", new getSlice());
      processMap.put("getSliceFromItem", new getSliceFromItem());
      processMap.put("getSliceR", new getSliceR());
      processMap.put("getSliceFromItemR", new getSliceFromItemR());
      processMap.put("rangeQuery", new rangeQuery());
      processMap.put("multiPut", new multiPut());
      processMap.put("getTotalCount", new getTotalCount());
      processMap.put("removeAll", new removeAll());
      return processMap;
    }

    public static class putItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putItem_args, TPutItemResult> {
      public putItem() {
        super("putItem");
      }

      public putItem_args getEmptyArgsInstance() {
        return new putItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPutItemResult>() { 
          public void onComplete(TPutItemResult o) {
            putItem_result result = new putItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            putItem_result result = new putItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putItem_args args, org.apache.thrift.async.AsyncMethodCallback<TPutItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.putItem(args.bigsetID, args.item,resultHandler);
      }
    }

    public static class removeItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeItem_args, java.lang.Boolean> {
      public removeItem() {
        super("removeItem");
      }

      public removeItem_args getEmptyArgsInstance() {
        return new removeItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            removeItem_result result = new removeItem_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeItem_result result = new removeItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeItem_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.removeItem(args.bigsetID, args.itemKey,resultHandler);
      }
    }

    public static class existed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, existed_args, TExistedResult> {
      public existed() {
        super("existed");
      }

      public existed_args getEmptyArgsInstance() {
        return new existed_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TExistedResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TExistedResult>() { 
          public void onComplete(TExistedResult o) {
            existed_result result = new existed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            existed_result result = new existed_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, existed_args args, org.apache.thrift.async.AsyncMethodCallback<TExistedResult> resultHandler) throws org.apache.thrift.TException {
        iface.existed(args.bigsetID, args.itemKey,resultHandler);
      }
    }

    public static class getItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getItem_args, TItemResult> {
      public getItem() {
        super("getItem");
      }

      public getItem_args getEmptyArgsInstance() {
        return new getItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemResult>() { 
          public void onComplete(TItemResult o) {
            getItem_result result = new getItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getItem_result result = new getItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getItem_args args, org.apache.thrift.async.AsyncMethodCallback<TItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.getItem(args.bigsetID, args.itemKey,resultHandler);
      }
    }

    public static class getSlice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSlice_args, TItemSetResult> {
      public getSlice() {
        super("getSlice");
      }

      public getSlice_args getEmptyArgsInstance() {
        return new getSlice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            getSlice_result result = new getSlice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSlice_result result = new getSlice_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSlice_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.getSlice(args.bigsetID, args.fromPos, args.count,resultHandler);
      }
    }

    public static class getSliceFromItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSliceFromItem_args, TItemSetResult> {
      public getSliceFromItem() {
        super("getSliceFromItem");
      }

      public getSliceFromItem_args getEmptyArgsInstance() {
        return new getSliceFromItem_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            getSliceFromItem_result result = new getSliceFromItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSliceFromItem_result result = new getSliceFromItem_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSliceFromItem_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.getSliceFromItem(args.bigsetID, args.fromKey, args.count,resultHandler);
      }
    }

    public static class getSliceR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSliceR_args, TItemSetResult> {
      public getSliceR() {
        super("getSliceR");
      }

      public getSliceR_args getEmptyArgsInstance() {
        return new getSliceR_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            getSliceR_result result = new getSliceR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSliceR_result result = new getSliceR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSliceR_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.getSliceR(args.bigsetID, args.fromPos, args.count,resultHandler);
      }
    }

    public static class getSliceFromItemR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSliceFromItemR_args, TItemSetResult> {
      public getSliceFromItemR() {
        super("getSliceFromItemR");
      }

      public getSliceFromItemR_args getEmptyArgsInstance() {
        return new getSliceFromItemR_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            getSliceFromItemR_result result = new getSliceFromItemR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSliceFromItemR_result result = new getSliceFromItemR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSliceFromItemR_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.getSliceFromItemR(args.bigsetID, args.fromKey, args.count,resultHandler);
      }
    }

    public static class rangeQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rangeQuery_args, TItemSetResult> {
      public rangeQuery() {
        super("rangeQuery");
      }

      public rangeQuery_args getEmptyArgsInstance() {
        return new rangeQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TItemSetResult>() { 
          public void onComplete(TItemSetResult o) {
            rangeQuery_result result = new rangeQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rangeQuery_result result = new rangeQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rangeQuery_args args, org.apache.thrift.async.AsyncMethodCallback<TItemSetResult> resultHandler) throws org.apache.thrift.TException {
        iface.rangeQuery(args.bigsetID, args.startKey, args.endKey,resultHandler);
      }
    }

    public static class multiPut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multiPut_args, TMultiPutItemResult> {
      public multiPut() {
        super("multiPut");
      }

      public multiPut_args getEmptyArgsInstance() {
        return new multiPut_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult>() { 
          public void onComplete(TMultiPutItemResult o) {
            multiPut_result result = new multiPut_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            multiPut_result result = new multiPut_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multiPut_args args, org.apache.thrift.async.AsyncMethodCallback<TMultiPutItemResult> resultHandler) throws org.apache.thrift.TException {
        iface.multiPut(args.bigsetID, args.setData, args.getAddedItems, args.getReplacedItems,resultHandler);
      }
    }

    public static class getTotalCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTotalCount_args, java.lang.Long> {
      public getTotalCount() {
        super("getTotalCount");
      }

      public getTotalCount_args getEmptyArgsInstance() {
        return new getTotalCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            getTotalCount_result result = new getTotalCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTotalCount_result result = new getTotalCount_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTotalCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getTotalCount(args.bigsetID,resultHandler);
      }
    }

    public static class removeAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeAll_args, java.lang.Long> {
      public removeAll() {
        super("removeAll");
      }

      public removeAll_args getEmptyArgsInstance() {
        return new removeAll_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            removeAll_result result = new removeAll_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeAll_result result = new removeAll_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeAll_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.removeAll(args.bigsetID,resultHandler);
      }
    }

  }

  public static class putItem_args implements org.apache.thrift.TBase<putItem_args, putItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<putItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putItem_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putItem_argsTupleSchemeFactory();

    public long bigsetID; // required
    public @org.apache.thrift.annotation.Nullable TItem item; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      ITEM((short)2, "item");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // ITEM
            return ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItem.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putItem_args.class, metaDataMap);
    }

    public putItem_args() {
    }

    public putItem_args(
      long bigsetID,
      TItem item)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.item = item;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putItem_args(putItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      if (other.isSetItem()) {
        this.item = new TItem(other.item);
      }
    }

    public putItem_args deepCopy() {
      return new putItem_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      this.item = null;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public putItem_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public TItem getItem() {
      return this.item;
    }

    public putItem_args setItem(@org.apache.thrift.annotation.Nullable TItem item) {
      this.item = item;
      return this;
    }

    public void unsetItem() {
      this.item = null;
    }

    /** Returns true if field item is set (has been assigned a value) and false otherwise */
    public boolean isSetItem() {
      return this.item != null;
    }

    public void setItemIsSet(boolean value) {
      if (!value) {
        this.item = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case ITEM:
        if (value == null) {
          unsetItem();
        } else {
          setItem((TItem)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case ITEM:
        return getItem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case ITEM:
        return isSetItem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putItem_args)
        return this.equals((putItem_args)that);
      return false;
    }

    public boolean equals(putItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_item = true && this.isSetItem();
      boolean that_present_item = true && that.isSetItem();
      if (this_present_item || that_present_item) {
        if (!(this_present_item && that_present_item))
          return false;
        if (!this.item.equals(that.item))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + ((isSetItem()) ? 131071 : 524287);
      if (isSetItem())
        hashCode = hashCode * 8191 + item.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(putItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putItem_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("item:");
      if (this.item == null) {
        sb.append("null");
      } else {
        sb.append(this.item);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (item != null) {
        item.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putItem_argsStandardScheme getScheme() {
        return new putItem_argsStandardScheme();
      }
    }

    private static class putItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<putItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.item = new TItem();
                struct.item.read(iprot);
                struct.setItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        if (struct.item != null) {
          oprot.writeFieldBegin(ITEM_FIELD_DESC);
          struct.item.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putItem_argsTupleScheme getScheme() {
        return new putItem_argsTupleScheme();
      }
    }

    private static class putItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<putItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetItem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetItem()) {
          struct.item.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.item = new TItem();
          struct.item.read(iprot);
          struct.setItemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putItem_result implements org.apache.thrift.TBase<putItem_result, putItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<putItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TPutItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPutItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putItem_result.class, metaDataMap);
    }

    public putItem_result() {
    }

    public putItem_result(
      TPutItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putItem_result(putItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPutItemResult(other.success);
      }
    }

    public putItem_result deepCopy() {
      return new putItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TPutItemResult getSuccess() {
      return this.success;
    }

    public putItem_result setSuccess(@org.apache.thrift.annotation.Nullable TPutItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPutItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putItem_result)
        return this.equals((putItem_result)that);
      return false;
    }

    public boolean equals(putItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(putItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putItem_resultStandardScheme getScheme() {
        return new putItem_resultStandardScheme();
      }
    }

    private static class putItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<putItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPutItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putItem_resultTupleScheme getScheme() {
        return new putItem_resultTupleScheme();
      }
    }

    private static class putItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<putItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TPutItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeItem_args implements org.apache.thrift.TBase<removeItem_args, removeItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeItem_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeItem_argsTupleSchemeFactory();

    public long bigsetID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeItem_args.class, metaDataMap);
    }

    public removeItem_args() {
    }

    public removeItem_args(
      long bigsetID,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeItem_args(removeItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public removeItem_args deepCopy() {
      return new removeItem_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      this.itemKey = null;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public removeItem_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public removeItem_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public removeItem_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeItem_args)
        return this.equals((removeItem_args)that);
      return false;
    }

    public boolean equals(removeItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeItem_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeItem_argsStandardScheme getScheme() {
        return new removeItem_argsStandardScheme();
      }
    }

    private static class removeItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeItem_argsTupleScheme getScheme() {
        return new removeItem_argsTupleScheme();
      }
    }

    private static class removeItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeItem_result implements org.apache.thrift.TBase<removeItem_result, removeItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeItem_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeItem_result.class, metaDataMap);
    }

    public removeItem_result() {
    }

    public removeItem_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeItem_result(removeItem_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public removeItem_result deepCopy() {
      return new removeItem_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeItem_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeItem_result)
        return this.equals((removeItem_result)that);
      return false;
    }

    public boolean equals(removeItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(removeItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeItem_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeItem_resultStandardScheme getScheme() {
        return new removeItem_resultStandardScheme();
      }
    }

    private static class removeItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeItem_resultTupleScheme getScheme() {
        return new removeItem_resultTupleScheme();
      }
    }

    private static class removeItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class existed_args implements org.apache.thrift.TBase<existed_args, existed_args._Fields>, java.io.Serializable, Cloneable, Comparable<existed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existed_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new existed_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new existed_argsTupleSchemeFactory();

    public long bigsetID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existed_args.class, metaDataMap);
    }

    public existed_args() {
    }

    public existed_args(
      long bigsetID,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public existed_args(existed_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public existed_args deepCopy() {
      return new existed_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      this.itemKey = null;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public existed_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public existed_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public existed_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof existed_args)
        return this.equals((existed_args)that);
      return false;
    }

    public boolean equals(existed_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(existed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("existed_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class existed_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public existed_argsStandardScheme getScheme() {
        return new existed_argsStandardScheme();
      }
    }

    private static class existed_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<existed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, existed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class existed_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public existed_argsTupleScheme getScheme() {
        return new existed_argsTupleScheme();
      }
    }

    private static class existed_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<existed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, existed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class existed_result implements org.apache.thrift.TBase<existed_result, existed_result._Fields>, java.io.Serializable, Cloneable, Comparable<existed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new existed_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new existed_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TExistedResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExistedResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existed_result.class, metaDataMap);
    }

    public existed_result() {
    }

    public existed_result(
      TExistedResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public existed_result(existed_result other) {
      if (other.isSetSuccess()) {
        this.success = new TExistedResult(other.success);
      }
    }

    public existed_result deepCopy() {
      return new existed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TExistedResult getSuccess() {
      return this.success;
    }

    public existed_result setSuccess(@org.apache.thrift.annotation.Nullable TExistedResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TExistedResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof existed_result)
        return this.equals((existed_result)that);
      return false;
    }

    public boolean equals(existed_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(existed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("existed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class existed_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public existed_resultStandardScheme getScheme() {
        return new existed_resultStandardScheme();
      }
    }

    private static class existed_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<existed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TExistedResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, existed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class existed_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public existed_resultTupleScheme getScheme() {
        return new existed_resultTupleScheme();
      }
    }

    private static class existed_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<existed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, existed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TExistedResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getItem_args implements org.apache.thrift.TBase<getItem_args, getItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<getItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getItem_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("itemKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getItem_argsTupleSchemeFactory();

    public long bigsetID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      ITEM_KEY((short)2, "itemKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // ITEM_KEY
            return ITEM_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.ITEM_KEY, new org.apache.thrift.meta_data.FieldMetaData("itemKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItem_args.class, metaDataMap);
    }

    public getItem_args() {
    }

    public getItem_args(
      long bigsetID,
      java.nio.ByteBuffer itemKey)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItem_args(getItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      if (other.isSetItemKey()) {
        this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(other.itemKey);
      }
    }

    public getItem_args deepCopy() {
      return new getItem_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      this.itemKey = null;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public getItem_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public byte[] getItemKey() {
      setItemKey(org.apache.thrift.TBaseHelper.rightSize(itemKey));
      return itemKey == null ? null : itemKey.array();
    }

    public java.nio.ByteBuffer bufferForItemKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(itemKey);
    }

    public getItem_args setItemKey(byte[] itemKey) {
      this.itemKey = itemKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(itemKey.clone());
      return this;
    }

    public getItem_args setItemKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer itemKey) {
      this.itemKey = org.apache.thrift.TBaseHelper.copyBinary(itemKey);
      return this;
    }

    public void unsetItemKey() {
      this.itemKey = null;
    }

    /** Returns true if field itemKey is set (has been assigned a value) and false otherwise */
    public boolean isSetItemKey() {
      return this.itemKey != null;
    }

    public void setItemKeyIsSet(boolean value) {
      if (!value) {
        this.itemKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case ITEM_KEY:
        if (value == null) {
          unsetItemKey();
        } else {
          if (value instanceof byte[]) {
            setItemKey((byte[])value);
          } else {
            setItemKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case ITEM_KEY:
        return getItemKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case ITEM_KEY:
        return isSetItemKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getItem_args)
        return this.equals((getItem_args)that);
      return false;
    }

    public boolean equals(getItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_itemKey = true && this.isSetItemKey();
      boolean that_present_itemKey = true && that.isSetItemKey();
      if (this_present_itemKey || that_present_itemKey) {
        if (!(this_present_itemKey && that_present_itemKey))
          return false;
        if (!this.itemKey.equals(that.itemKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + ((isSetItemKey()) ? 131071 : 524287);
      if (isSetItemKey())
        hashCode = hashCode * 8191 + itemKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetItemKey()).compareTo(other.isSetItemKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemKey, other.itemKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getItem_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemKey:");
      if (this.itemKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.itemKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getItem_argsStandardScheme getScheme() {
        return new getItem_argsStandardScheme();
      }
    }

    private static class getItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemKey = iprot.readBinary();
                struct.setItemKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        if (struct.itemKey != null) {
          oprot.writeFieldBegin(ITEM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.itemKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getItem_argsTupleScheme getScheme() {
        return new getItem_argsTupleScheme();
      }
    }

    private static class getItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetItemKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetItemKey()) {
          oprot.writeBinary(struct.itemKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemKey = iprot.readBinary();
          struct.setItemKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getItem_result implements org.apache.thrift.TBase<getItem_result, getItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<getItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItem_result.class, metaDataMap);
    }

    public getItem_result() {
    }

    public getItem_result(
      TItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getItem_result(getItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemResult(other.success);
      }
    }

    public getItem_result deepCopy() {
      return new getItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemResult getSuccess() {
      return this.success;
    }

    public getItem_result setSuccess(@org.apache.thrift.annotation.Nullable TItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getItem_result)
        return this.equals((getItem_result)that);
      return false;
    }

    public boolean equals(getItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getItem_resultStandardScheme getScheme() {
        return new getItem_resultStandardScheme();
      }
    }

    private static class getItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getItem_resultTupleScheme getScheme() {
        return new getItem_resultTupleScheme();
      }
    }

    private static class getItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSlice_args implements org.apache.thrift.TBase<getSlice_args, getSlice_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSlice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSlice_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("fromPos", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSlice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSlice_argsTupleSchemeFactory();

    public long bigsetID; // required
    public int fromPos; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      FROM_POS((short)2, "fromPos"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // FROM_POS
            return FROM_POS;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private static final int __FROMPOS_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.FROM_POS, new org.apache.thrift.meta_data.FieldMetaData("fromPos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSlice_args.class, metaDataMap);
    }

    public getSlice_args() {
    }

    public getSlice_args(
      long bigsetID,
      int fromPos,
      int count)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.fromPos = fromPos;
      setFromPosIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSlice_args(getSlice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      this.fromPos = other.fromPos;
      this.count = other.count;
    }

    public getSlice_args deepCopy() {
      return new getSlice_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      setFromPosIsSet(false);
      this.fromPos = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public getSlice_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public int getFromPos() {
      return this.fromPos;
    }

    public getSlice_args setFromPos(int fromPos) {
      this.fromPos = fromPos;
      setFromPosIsSet(true);
      return this;
    }

    public void unsetFromPos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FROMPOS_ISSET_ID);
    }

    /** Returns true if field fromPos is set (has been assigned a value) and false otherwise */
    public boolean isSetFromPos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FROMPOS_ISSET_ID);
    }

    public void setFromPosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FROMPOS_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getSlice_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case FROM_POS:
        if (value == null) {
          unsetFromPos();
        } else {
          setFromPos((java.lang.Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case FROM_POS:
        return getFromPos();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case FROM_POS:
        return isSetFromPos();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSlice_args)
        return this.equals((getSlice_args)that);
      return false;
    }

    public boolean equals(getSlice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_fromPos = true;
      boolean that_present_fromPos = true;
      if (this_present_fromPos || that_present_fromPos) {
        if (!(this_present_fromPos && that_present_fromPos))
          return false;
        if (this.fromPos != that.fromPos)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + fromPos;

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(getSlice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromPos()).compareTo(other.isSetFromPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromPos, other.fromPos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSlice_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromPos:");
      sb.append(this.fromPos);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSlice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSlice_argsStandardScheme getScheme() {
        return new getSlice_argsStandardScheme();
      }
    }

    private static class getSlice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSlice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromPos = iprot.readI32();
                struct.setFromPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSlice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_POS_FIELD_DESC);
        oprot.writeI32(struct.fromPos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSlice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSlice_argsTupleScheme getScheme() {
        return new getSlice_argsTupleScheme();
      }
    }

    private static class getSlice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSlice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetFromPos()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetFromPos()) {
          oprot.writeI32(struct.fromPos);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSlice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromPos = iprot.readI32();
          struct.setFromPosIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSlice_result implements org.apache.thrift.TBase<getSlice_result, getSlice_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSlice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSlice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSlice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSlice_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSlice_result.class, metaDataMap);
    }

    public getSlice_result() {
    }

    public getSlice_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSlice_result(getSlice_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public getSlice_result deepCopy() {
      return new getSlice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public getSlice_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSlice_result)
        return this.equals((getSlice_result)that);
      return false;
    }

    public boolean equals(getSlice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSlice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSlice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSlice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSlice_resultStandardScheme getScheme() {
        return new getSlice_resultStandardScheme();
      }
    }

    private static class getSlice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSlice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSlice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSlice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSlice_resultTupleScheme getScheme() {
        return new getSlice_resultTupleScheme();
      }
    }

    private static class getSlice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSlice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSlice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSliceFromItem_args implements org.apache.thrift.TBase<getSliceFromItem_args, getSliceFromItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSliceFromItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSliceFromItem_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSliceFromItem_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSliceFromItem_argsTupleSchemeFactory();

    public long bigsetID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      FROM_KEY((short)2, "fromKey"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // FROM_KEY
            return FROM_KEY;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.FROM_KEY, new org.apache.thrift.meta_data.FieldMetaData("fromKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSliceFromItem_args.class, metaDataMap);
    }

    public getSliceFromItem_args() {
    }

    public getSliceFromItem_args(
      long bigsetID,
      java.nio.ByteBuffer fromKey,
      int count)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSliceFromItem_args(getSliceFromItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      if (other.isSetFromKey()) {
        this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(other.fromKey);
      }
      this.count = other.count;
    }

    public getSliceFromItem_args deepCopy() {
      return new getSliceFromItem_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      this.fromKey = null;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public getSliceFromItem_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public byte[] getFromKey() {
      setFromKey(org.apache.thrift.TBaseHelper.rightSize(fromKey));
      return fromKey == null ? null : fromKey.array();
    }

    public java.nio.ByteBuffer bufferForFromKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(fromKey);
    }

    public getSliceFromItem_args setFromKey(byte[] fromKey) {
      this.fromKey = fromKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fromKey.clone());
      return this;
    }

    public getSliceFromItem_args setFromKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey) {
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      return this;
    }

    public void unsetFromKey() {
      this.fromKey = null;
    }

    /** Returns true if field fromKey is set (has been assigned a value) and false otherwise */
    public boolean isSetFromKey() {
      return this.fromKey != null;
    }

    public void setFromKeyIsSet(boolean value) {
      if (!value) {
        this.fromKey = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public getSliceFromItem_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case FROM_KEY:
        if (value == null) {
          unsetFromKey();
        } else {
          if (value instanceof byte[]) {
            setFromKey((byte[])value);
          } else {
            setFromKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case FROM_KEY:
        return getFromKey();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case FROM_KEY:
        return isSetFromKey();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSliceFromItem_args)
        return this.equals((getSliceFromItem_args)that);
      return false;
    }

    public boolean equals(getSliceFromItem_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_fromKey = true && this.isSetFromKey();
      boolean that_present_fromKey = true && that.isSetFromKey();
      if (this_present_fromKey || that_present_fromKey) {
        if (!(this_present_fromKey && that_present_fromKey))
          return false;
        if (!this.fromKey.equals(that.fromKey))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + ((isSetFromKey()) ? 131071 : 524287);
      if (isSetFromKey())
        hashCode = hashCode * 8191 + fromKey.hashCode();

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(getSliceFromItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromKey()).compareTo(other.isSetFromKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromKey, other.fromKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSliceFromItem_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromKey:");
      if (this.fromKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fromKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSliceFromItem_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceFromItem_argsStandardScheme getScheme() {
        return new getSliceFromItem_argsStandardScheme();
      }
    }

    private static class getSliceFromItem_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSliceFromItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromKey = iprot.readBinary();
                struct.setFromKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSliceFromItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        if (struct.fromKey != null) {
          oprot.writeFieldBegin(FROM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.fromKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSliceFromItem_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceFromItem_argsTupleScheme getScheme() {
        return new getSliceFromItem_argsTupleScheme();
      }
    }

    private static class getSliceFromItem_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSliceFromItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetFromKey()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetFromKey()) {
          oprot.writeBinary(struct.fromKey);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSliceFromItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromKey = iprot.readBinary();
          struct.setFromKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSliceFromItem_result implements org.apache.thrift.TBase<getSliceFromItem_result, getSliceFromItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSliceFromItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSliceFromItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSliceFromItem_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSliceFromItem_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSliceFromItem_result.class, metaDataMap);
    }

    public getSliceFromItem_result() {
    }

    public getSliceFromItem_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSliceFromItem_result(getSliceFromItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public getSliceFromItem_result deepCopy() {
      return new getSliceFromItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public getSliceFromItem_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSliceFromItem_result)
        return this.equals((getSliceFromItem_result)that);
      return false;
    }

    public boolean equals(getSliceFromItem_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSliceFromItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSliceFromItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSliceFromItem_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceFromItem_resultStandardScheme getScheme() {
        return new getSliceFromItem_resultStandardScheme();
      }
    }

    private static class getSliceFromItem_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSliceFromItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSliceFromItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSliceFromItem_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceFromItem_resultTupleScheme getScheme() {
        return new getSliceFromItem_resultTupleScheme();
      }
    }

    private static class getSliceFromItem_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSliceFromItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSliceFromItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSliceR_args implements org.apache.thrift.TBase<getSliceR_args, getSliceR_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSliceR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSliceR_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("fromPos", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSliceR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSliceR_argsTupleSchemeFactory();

    public long bigsetID; // required
    public int fromPos; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      FROM_POS((short)2, "fromPos"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // FROM_POS
            return FROM_POS;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private static final int __FROMPOS_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.FROM_POS, new org.apache.thrift.meta_data.FieldMetaData("fromPos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSliceR_args.class, metaDataMap);
    }

    public getSliceR_args() {
    }

    public getSliceR_args(
      long bigsetID,
      int fromPos,
      int count)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.fromPos = fromPos;
      setFromPosIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSliceR_args(getSliceR_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      this.fromPos = other.fromPos;
      this.count = other.count;
    }

    public getSliceR_args deepCopy() {
      return new getSliceR_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      setFromPosIsSet(false);
      this.fromPos = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public getSliceR_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public int getFromPos() {
      return this.fromPos;
    }

    public getSliceR_args setFromPos(int fromPos) {
      this.fromPos = fromPos;
      setFromPosIsSet(true);
      return this;
    }

    public void unsetFromPos() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FROMPOS_ISSET_ID);
    }

    /** Returns true if field fromPos is set (has been assigned a value) and false otherwise */
    public boolean isSetFromPos() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FROMPOS_ISSET_ID);
    }

    public void setFromPosIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FROMPOS_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getSliceR_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case FROM_POS:
        if (value == null) {
          unsetFromPos();
        } else {
          setFromPos((java.lang.Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case FROM_POS:
        return getFromPos();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case FROM_POS:
        return isSetFromPos();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSliceR_args)
        return this.equals((getSliceR_args)that);
      return false;
    }

    public boolean equals(getSliceR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_fromPos = true;
      boolean that_present_fromPos = true;
      if (this_present_fromPos || that_present_fromPos) {
        if (!(this_present_fromPos && that_present_fromPos))
          return false;
        if (this.fromPos != that.fromPos)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + fromPos;

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(getSliceR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromPos()).compareTo(other.isSetFromPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromPos, other.fromPos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSliceR_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromPos:");
      sb.append(this.fromPos);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSliceR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceR_argsStandardScheme getScheme() {
        return new getSliceR_argsStandardScheme();
      }
    }

    private static class getSliceR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSliceR_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_POS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fromPos = iprot.readI32();
                struct.setFromPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSliceR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FROM_POS_FIELD_DESC);
        oprot.writeI32(struct.fromPos);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSliceR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceR_argsTupleScheme getScheme() {
        return new getSliceR_argsTupleScheme();
      }
    }

    private static class getSliceR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSliceR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetFromPos()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetFromPos()) {
          oprot.writeI32(struct.fromPos);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSliceR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromPos = iprot.readI32();
          struct.setFromPosIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSliceR_result implements org.apache.thrift.TBase<getSliceR_result, getSliceR_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSliceR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSliceR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSliceR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSliceR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSliceR_result.class, metaDataMap);
    }

    public getSliceR_result() {
    }

    public getSliceR_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSliceR_result(getSliceR_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public getSliceR_result deepCopy() {
      return new getSliceR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public getSliceR_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSliceR_result)
        return this.equals((getSliceR_result)that);
      return false;
    }

    public boolean equals(getSliceR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSliceR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSliceR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSliceR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceR_resultStandardScheme getScheme() {
        return new getSliceR_resultStandardScheme();
      }
    }

    private static class getSliceR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSliceR_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSliceR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSliceR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceR_resultTupleScheme getScheme() {
        return new getSliceR_resultTupleScheme();
      }
    }

    private static class getSliceR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSliceR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSliceR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSliceFromItemR_args implements org.apache.thrift.TBase<getSliceFromItemR_args, getSliceFromItemR_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSliceFromItemR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSliceFromItemR_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FROM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSliceFromItemR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSliceFromItemR_argsTupleSchemeFactory();

    public long bigsetID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      FROM_KEY((short)2, "fromKey"),
      COUNT((short)3, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // FROM_KEY
            return FROM_KEY;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.FROM_KEY, new org.apache.thrift.meta_data.FieldMetaData("fromKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSliceFromItemR_args.class, metaDataMap);
    }

    public getSliceFromItemR_args() {
    }

    public getSliceFromItemR_args(
      long bigsetID,
      java.nio.ByteBuffer fromKey,
      int count)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSliceFromItemR_args(getSliceFromItemR_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      if (other.isSetFromKey()) {
        this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(other.fromKey);
      }
      this.count = other.count;
    }

    public getSliceFromItemR_args deepCopy() {
      return new getSliceFromItemR_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      this.fromKey = null;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public getSliceFromItemR_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public byte[] getFromKey() {
      setFromKey(org.apache.thrift.TBaseHelper.rightSize(fromKey));
      return fromKey == null ? null : fromKey.array();
    }

    public java.nio.ByteBuffer bufferForFromKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(fromKey);
    }

    public getSliceFromItemR_args setFromKey(byte[] fromKey) {
      this.fromKey = fromKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(fromKey.clone());
      return this;
    }

    public getSliceFromItemR_args setFromKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fromKey) {
      this.fromKey = org.apache.thrift.TBaseHelper.copyBinary(fromKey);
      return this;
    }

    public void unsetFromKey() {
      this.fromKey = null;
    }

    /** Returns true if field fromKey is set (has been assigned a value) and false otherwise */
    public boolean isSetFromKey() {
      return this.fromKey != null;
    }

    public void setFromKeyIsSet(boolean value) {
      if (!value) {
        this.fromKey = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public getSliceFromItemR_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case FROM_KEY:
        if (value == null) {
          unsetFromKey();
        } else {
          if (value instanceof byte[]) {
            setFromKey((byte[])value);
          } else {
            setFromKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case FROM_KEY:
        return getFromKey();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case FROM_KEY:
        return isSetFromKey();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSliceFromItemR_args)
        return this.equals((getSliceFromItemR_args)that);
      return false;
    }

    public boolean equals(getSliceFromItemR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_fromKey = true && this.isSetFromKey();
      boolean that_present_fromKey = true && that.isSetFromKey();
      if (this_present_fromKey || that_present_fromKey) {
        if (!(this_present_fromKey && that_present_fromKey))
          return false;
        if (!this.fromKey.equals(that.fromKey))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + ((isSetFromKey()) ? 131071 : 524287);
      if (isSetFromKey())
        hashCode = hashCode * 8191 + fromKey.hashCode();

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(getSliceFromItemR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFromKey()).compareTo(other.isSetFromKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFromKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromKey, other.fromKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSliceFromItemR_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fromKey:");
      if (this.fromKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fromKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSliceFromItemR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceFromItemR_argsStandardScheme getScheme() {
        return new getSliceFromItemR_argsStandardScheme();
      }
    }

    private static class getSliceFromItemR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSliceFromItemR_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FROM_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fromKey = iprot.readBinary();
                struct.setFromKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSliceFromItemR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        if (struct.fromKey != null) {
          oprot.writeFieldBegin(FROM_KEY_FIELD_DESC);
          oprot.writeBinary(struct.fromKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSliceFromItemR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceFromItemR_argsTupleScheme getScheme() {
        return new getSliceFromItemR_argsTupleScheme();
      }
    }

    private static class getSliceFromItemR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSliceFromItemR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetFromKey()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetFromKey()) {
          oprot.writeBinary(struct.fromKey);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSliceFromItemR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fromKey = iprot.readBinary();
          struct.setFromKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSliceFromItemR_result implements org.apache.thrift.TBase<getSliceFromItemR_result, getSliceFromItemR_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSliceFromItemR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSliceFromItemR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSliceFromItemR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSliceFromItemR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSliceFromItemR_result.class, metaDataMap);
    }

    public getSliceFromItemR_result() {
    }

    public getSliceFromItemR_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSliceFromItemR_result(getSliceFromItemR_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public getSliceFromItemR_result deepCopy() {
      return new getSliceFromItemR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public getSliceFromItemR_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSliceFromItemR_result)
        return this.equals((getSliceFromItemR_result)that);
      return false;
    }

    public boolean equals(getSliceFromItemR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSliceFromItemR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSliceFromItemR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSliceFromItemR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceFromItemR_resultStandardScheme getScheme() {
        return new getSliceFromItemR_resultStandardScheme();
      }
    }

    private static class getSliceFromItemR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSliceFromItemR_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSliceFromItemR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSliceFromItemR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSliceFromItemR_resultTupleScheme getScheme() {
        return new getSliceFromItemR_resultTupleScheme();
      }
    }

    private static class getSliceFromItemR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSliceFromItemR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSliceFromItemR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rangeQuery_args implements org.apache.thrift.TBase<rangeQuery_args, rangeQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQuery_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField START_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("startKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField END_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("endKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rangeQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rangeQuery_argsTupleSchemeFactory();

    public long bigsetID; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer startKey; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer endKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      START_KEY((short)2, "startKey"),
      END_KEY((short)3, "endKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // START_KEY
            return START_KEY;
          case 3: // END_KEY
            return END_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.START_KEY, new org.apache.thrift.meta_data.FieldMetaData("startKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      tmpMap.put(_Fields.END_KEY, new org.apache.thrift.meta_data.FieldMetaData("endKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TItemKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQuery_args.class, metaDataMap);
    }

    public rangeQuery_args() {
    }

    public rangeQuery_args(
      long bigsetID,
      java.nio.ByteBuffer startKey,
      java.nio.ByteBuffer endKey)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
      this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQuery_args(rangeQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      if (other.isSetStartKey()) {
        this.startKey = org.apache.thrift.TBaseHelper.copyBinary(other.startKey);
      }
      if (other.isSetEndKey()) {
        this.endKey = org.apache.thrift.TBaseHelper.copyBinary(other.endKey);
      }
    }

    public rangeQuery_args deepCopy() {
      return new rangeQuery_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      this.startKey = null;
      this.endKey = null;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public rangeQuery_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public byte[] getStartKey() {
      setStartKey(org.apache.thrift.TBaseHelper.rightSize(startKey));
      return startKey == null ? null : startKey.array();
    }

    public java.nio.ByteBuffer bufferForStartKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(startKey);
    }

    public rangeQuery_args setStartKey(byte[] startKey) {
      this.startKey = startKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(startKey.clone());
      return this;
    }

    public rangeQuery_args setStartKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer startKey) {
      this.startKey = org.apache.thrift.TBaseHelper.copyBinary(startKey);
      return this;
    }

    public void unsetStartKey() {
      this.startKey = null;
    }

    /** Returns true if field startKey is set (has been assigned a value) and false otherwise */
    public boolean isSetStartKey() {
      return this.startKey != null;
    }

    public void setStartKeyIsSet(boolean value) {
      if (!value) {
        this.startKey = null;
      }
    }

    public byte[] getEndKey() {
      setEndKey(org.apache.thrift.TBaseHelper.rightSize(endKey));
      return endKey == null ? null : endKey.array();
    }

    public java.nio.ByteBuffer bufferForEndKey() {
      return org.apache.thrift.TBaseHelper.copyBinary(endKey);
    }

    public rangeQuery_args setEndKey(byte[] endKey) {
      this.endKey = endKey == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(endKey.clone());
      return this;
    }

    public rangeQuery_args setEndKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer endKey) {
      this.endKey = org.apache.thrift.TBaseHelper.copyBinary(endKey);
      return this;
    }

    public void unsetEndKey() {
      this.endKey = null;
    }

    /** Returns true if field endKey is set (has been assigned a value) and false otherwise */
    public boolean isSetEndKey() {
      return this.endKey != null;
    }

    public void setEndKeyIsSet(boolean value) {
      if (!value) {
        this.endKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case START_KEY:
        if (value == null) {
          unsetStartKey();
        } else {
          if (value instanceof byte[]) {
            setStartKey((byte[])value);
          } else {
            setStartKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      case END_KEY:
        if (value == null) {
          unsetEndKey();
        } else {
          if (value instanceof byte[]) {
            setEndKey((byte[])value);
          } else {
            setEndKey((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case START_KEY:
        return getStartKey();

      case END_KEY:
        return getEndKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case START_KEY:
        return isSetStartKey();
      case END_KEY:
        return isSetEndKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQuery_args)
        return this.equals((rangeQuery_args)that);
      return false;
    }

    public boolean equals(rangeQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_startKey = true && this.isSetStartKey();
      boolean that_present_startKey = true && that.isSetStartKey();
      if (this_present_startKey || that_present_startKey) {
        if (!(this_present_startKey && that_present_startKey))
          return false;
        if (!this.startKey.equals(that.startKey))
          return false;
      }

      boolean this_present_endKey = true && this.isSetEndKey();
      boolean that_present_endKey = true && that.isSetEndKey();
      if (this_present_endKey || that_present_endKey) {
        if (!(this_present_endKey && that_present_endKey))
          return false;
        if (!this.endKey.equals(that.endKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + ((isSetStartKey()) ? 131071 : 524287);
      if (isSetStartKey())
        hashCode = hashCode * 8191 + startKey.hashCode();

      hashCode = hashCode * 8191 + ((isSetEndKey()) ? 131071 : 524287);
      if (isSetEndKey())
        hashCode = hashCode * 8191 + endKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rangeQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStartKey()).compareTo(other.isSetStartKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startKey, other.startKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEndKey()).compareTo(other.isSetEndKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endKey, other.endKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rangeQuery_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startKey:");
      if (this.startKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.startKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endKey:");
      if (this.endKey == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.endKey, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rangeQuery_argsStandardScheme getScheme() {
        return new rangeQuery_argsStandardScheme();
      }
    }

    private static class rangeQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rangeQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startKey = iprot.readBinary();
                struct.setStartKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endKey = iprot.readBinary();
                struct.setEndKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        if (struct.startKey != null) {
          oprot.writeFieldBegin(START_KEY_FIELD_DESC);
          oprot.writeBinary(struct.startKey);
          oprot.writeFieldEnd();
        }
        if (struct.endKey != null) {
          oprot.writeFieldBegin(END_KEY_FIELD_DESC);
          oprot.writeBinary(struct.endKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rangeQuery_argsTupleScheme getScheme() {
        return new rangeQuery_argsTupleScheme();
      }
    }

    private static class rangeQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rangeQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetStartKey()) {
          optionals.set(1);
        }
        if (struct.isSetEndKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetStartKey()) {
          oprot.writeBinary(struct.startKey);
        }
        if (struct.isSetEndKey()) {
          oprot.writeBinary(struct.endKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startKey = iprot.readBinary();
          struct.setStartKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endKey = iprot.readBinary();
          struct.setEndKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rangeQuery_result implements org.apache.thrift.TBase<rangeQuery_result, rangeQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<rangeQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rangeQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rangeQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rangeQuery_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TItemSetResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSetResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rangeQuery_result.class, metaDataMap);
    }

    public rangeQuery_result() {
    }

    public rangeQuery_result(
      TItemSetResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rangeQuery_result(rangeQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new TItemSetResult(other.success);
      }
    }

    public rangeQuery_result deepCopy() {
      return new rangeQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSetResult getSuccess() {
      return this.success;
    }

    public rangeQuery_result setSuccess(@org.apache.thrift.annotation.Nullable TItemSetResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TItemSetResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rangeQuery_result)
        return this.equals((rangeQuery_result)that);
      return false;
    }

    public boolean equals(rangeQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rangeQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rangeQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rangeQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rangeQuery_resultStandardScheme getScheme() {
        return new rangeQuery_resultStandardScheme();
      }
    }

    private static class rangeQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rangeQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TItemSetResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rangeQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rangeQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rangeQuery_resultTupleScheme getScheme() {
        return new rangeQuery_resultTupleScheme();
      }
    }

    private static class rangeQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rangeQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rangeQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TItemSetResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiPut_args implements org.apache.thrift.TBase<multiPut_args, multiPut_args._Fields>, java.io.Serializable, Cloneable, Comparable<multiPut_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiPut_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SET_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("setData", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField GET_ADDED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("getAddedItems", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField GET_REPLACED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("getReplacedItems", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiPut_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiPut_argsTupleSchemeFactory();

    public long bigsetID; // required
    public @org.apache.thrift.annotation.Nullable TItemSet setData; // required
    public boolean getAddedItems; // required
    public boolean getReplacedItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID"),
      SET_DATA((short)2, "setData"),
      GET_ADDED_ITEMS((short)3, "getAddedItems"),
      GET_REPLACED_ITEMS((short)4, "getReplacedItems");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          case 2: // SET_DATA
            return SET_DATA;
          case 3: // GET_ADDED_ITEMS
            return GET_ADDED_ITEMS;
          case 4: // GET_REPLACED_ITEMS
            return GET_REPLACED_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private static final int __GETADDEDITEMS_ISSET_ID = 1;
    private static final int __GETREPLACEDITEMS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      tmpMap.put(_Fields.SET_DATA, new org.apache.thrift.meta_data.FieldMetaData("setData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TItemSet.class)));
      tmpMap.put(_Fields.GET_ADDED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("getAddedItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.GET_REPLACED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("getReplacedItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiPut_args.class, metaDataMap);
    }

    public multiPut_args() {
    }

    public multiPut_args(
      long bigsetID,
      TItemSet setData,
      boolean getAddedItems,
      boolean getReplacedItems)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      this.setData = setData;
      this.getAddedItems = getAddedItems;
      setGetAddedItemsIsSet(true);
      this.getReplacedItems = getReplacedItems;
      setGetReplacedItemsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiPut_args(multiPut_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
      if (other.isSetSetData()) {
        this.setData = new TItemSet(other.setData);
      }
      this.getAddedItems = other.getAddedItems;
      this.getReplacedItems = other.getReplacedItems;
    }

    public multiPut_args deepCopy() {
      return new multiPut_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
      this.setData = null;
      setGetAddedItemsIsSet(false);
      this.getAddedItems = false;
      setGetReplacedItemsIsSet(false);
      this.getReplacedItems = false;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public multiPut_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public TItemSet getSetData() {
      return this.setData;
    }

    public multiPut_args setSetData(@org.apache.thrift.annotation.Nullable TItemSet setData) {
      this.setData = setData;
      return this;
    }

    public void unsetSetData() {
      this.setData = null;
    }

    /** Returns true if field setData is set (has been assigned a value) and false otherwise */
    public boolean isSetSetData() {
      return this.setData != null;
    }

    public void setSetDataIsSet(boolean value) {
      if (!value) {
        this.setData = null;
      }
    }

    public boolean isGetAddedItems() {
      return this.getAddedItems;
    }

    public multiPut_args setGetAddedItems(boolean getAddedItems) {
      this.getAddedItems = getAddedItems;
      setGetAddedItemsIsSet(true);
      return this;
    }

    public void unsetGetAddedItems() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID);
    }

    /** Returns true if field getAddedItems is set (has been assigned a value) and false otherwise */
    public boolean isSetGetAddedItems() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID);
    }

    public void setGetAddedItemsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GETADDEDITEMS_ISSET_ID, value);
    }

    public boolean isGetReplacedItems() {
      return this.getReplacedItems;
    }

    public multiPut_args setGetReplacedItems(boolean getReplacedItems) {
      this.getReplacedItems = getReplacedItems;
      setGetReplacedItemsIsSet(true);
      return this;
    }

    public void unsetGetReplacedItems() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID);
    }

    /** Returns true if field getReplacedItems is set (has been assigned a value) and false otherwise */
    public boolean isSetGetReplacedItems() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID);
    }

    public void setGetReplacedItemsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GETREPLACEDITEMS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      case SET_DATA:
        if (value == null) {
          unsetSetData();
        } else {
          setSetData((TItemSet)value);
        }
        break;

      case GET_ADDED_ITEMS:
        if (value == null) {
          unsetGetAddedItems();
        } else {
          setGetAddedItems((java.lang.Boolean)value);
        }
        break;

      case GET_REPLACED_ITEMS:
        if (value == null) {
          unsetGetReplacedItems();
        } else {
          setGetReplacedItems((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      case SET_DATA:
        return getSetData();

      case GET_ADDED_ITEMS:
        return isGetAddedItems();

      case GET_REPLACED_ITEMS:
        return isGetReplacedItems();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      case SET_DATA:
        return isSetSetData();
      case GET_ADDED_ITEMS:
        return isSetGetAddedItems();
      case GET_REPLACED_ITEMS:
        return isSetGetReplacedItems();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multiPut_args)
        return this.equals((multiPut_args)that);
      return false;
    }

    public boolean equals(multiPut_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      boolean this_present_setData = true && this.isSetSetData();
      boolean that_present_setData = true && that.isSetSetData();
      if (this_present_setData || that_present_setData) {
        if (!(this_present_setData && that_present_setData))
          return false;
        if (!this.setData.equals(that.setData))
          return false;
      }

      boolean this_present_getAddedItems = true;
      boolean that_present_getAddedItems = true;
      if (this_present_getAddedItems || that_present_getAddedItems) {
        if (!(this_present_getAddedItems && that_present_getAddedItems))
          return false;
        if (this.getAddedItems != that.getAddedItems)
          return false;
      }

      boolean this_present_getReplacedItems = true;
      boolean that_present_getReplacedItems = true;
      if (this_present_getReplacedItems || that_present_getReplacedItems) {
        if (!(this_present_getReplacedItems && that_present_getReplacedItems))
          return false;
        if (this.getReplacedItems != that.getReplacedItems)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      hashCode = hashCode * 8191 + ((isSetSetData()) ? 131071 : 524287);
      if (isSetSetData())
        hashCode = hashCode * 8191 + setData.hashCode();

      hashCode = hashCode * 8191 + ((getAddedItems) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((getReplacedItems) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(multiPut_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSetData()).compareTo(other.isSetSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setData, other.setData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGetAddedItems()).compareTo(other.isSetGetAddedItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetAddedItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getAddedItems, other.getAddedItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGetReplacedItems()).compareTo(other.isSetGetReplacedItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetReplacedItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getReplacedItems, other.getReplacedItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multiPut_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("setData:");
      if (this.setData == null) {
        sb.append("null");
      } else {
        sb.append(this.setData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("getAddedItems:");
      sb.append(this.getAddedItems);
      first = false;
      if (!first) sb.append(", ");
      sb.append("getReplacedItems:");
      sb.append(this.getReplacedItems);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (setData != null) {
        setData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiPut_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiPut_argsStandardScheme getScheme() {
        return new multiPut_argsStandardScheme();
      }
    }

    private static class multiPut_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiPut_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SET_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.setData = new TItemSet();
                struct.setData.read(iprot);
                struct.setSetDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GET_ADDED_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.getAddedItems = iprot.readBool();
                struct.setGetAddedItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GET_REPLACED_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.getReplacedItems = iprot.readBool();
                struct.setGetReplacedItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiPut_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        if (struct.setData != null) {
          oprot.writeFieldBegin(SET_DATA_FIELD_DESC);
          struct.setData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GET_ADDED_ITEMS_FIELD_DESC);
        oprot.writeBool(struct.getAddedItems);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GET_REPLACED_ITEMS_FIELD_DESC);
        oprot.writeBool(struct.getReplacedItems);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiPut_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiPut_argsTupleScheme getScheme() {
        return new multiPut_argsTupleScheme();
      }
    }

    private static class multiPut_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiPut_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        if (struct.isSetSetData()) {
          optionals.set(1);
        }
        if (struct.isSetGetAddedItems()) {
          optionals.set(2);
        }
        if (struct.isSetGetReplacedItems()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
        if (struct.isSetSetData()) {
          struct.setData.write(oprot);
        }
        if (struct.isSetGetAddedItems()) {
          oprot.writeBool(struct.getAddedItems);
        }
        if (struct.isSetGetReplacedItems()) {
          oprot.writeBool(struct.getReplacedItems);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiPut_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.setData = new TItemSet();
          struct.setData.read(iprot);
          struct.setSetDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.getAddedItems = iprot.readBool();
          struct.setGetAddedItemsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.getReplacedItems = iprot.readBool();
          struct.setGetReplacedItemsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiPut_result implements org.apache.thrift.TBase<multiPut_result, multiPut_result._Fields>, java.io.Serializable, Cloneable, Comparable<multiPut_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiPut_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiPut_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiPut_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TMultiPutItemResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMultiPutItemResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiPut_result.class, metaDataMap);
    }

    public multiPut_result() {
    }

    public multiPut_result(
      TMultiPutItemResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiPut_result(multiPut_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMultiPutItemResult(other.success);
      }
    }

    public multiPut_result deepCopy() {
      return new multiPut_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TMultiPutItemResult getSuccess() {
      return this.success;
    }

    public multiPut_result setSuccess(@org.apache.thrift.annotation.Nullable TMultiPutItemResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMultiPutItemResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof multiPut_result)
        return this.equals((multiPut_result)that);
      return false;
    }

    public boolean equals(multiPut_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(multiPut_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("multiPut_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiPut_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiPut_resultStandardScheme getScheme() {
        return new multiPut_resultStandardScheme();
      }
    }

    private static class multiPut_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiPut_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMultiPutItemResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiPut_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiPut_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiPut_resultTupleScheme getScheme() {
        return new multiPut_resultTupleScheme();
      }
    }

    private static class multiPut_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiPut_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiPut_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TMultiPutItemResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTotalCount_args implements org.apache.thrift.TBase<getTotalCount_args, getTotalCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalCount_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTotalCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTotalCount_argsTupleSchemeFactory();

    public long bigsetID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalCount_args.class, metaDataMap);
    }

    public getTotalCount_args() {
    }

    public getTotalCount_args(
      long bigsetID)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalCount_args(getTotalCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
    }

    public getTotalCount_args deepCopy() {
      return new getTotalCount_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public getTotalCount_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalCount_args)
        return this.equals((getTotalCount_args)that);
      return false;
    }

    public boolean equals(getTotalCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      return hashCode;
    }

    @Override
    public int compareTo(getTotalCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTotalCount_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_argsStandardScheme getScheme() {
        return new getTotalCount_argsStandardScheme();
      }
    }

    private static class getTotalCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTotalCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_argsTupleScheme getScheme() {
        return new getTotalCount_argsTupleScheme();
      }
    }

    private static class getTotalCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTotalCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTotalCount_result implements org.apache.thrift.TBase<getTotalCount_result, getTotalCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTotalCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTotalCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTotalCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTotalCount_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTotalCount_result.class, metaDataMap);
    }

    public getTotalCount_result() {
    }

    public getTotalCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalCount_result(getTotalCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getTotalCount_result deepCopy() {
      return new getTotalCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getTotalCount_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalCount_result)
        return this.equals((getTotalCount_result)that);
      return false;
    }

    public boolean equals(getTotalCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(getTotalCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTotalCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTotalCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_resultStandardScheme getScheme() {
        return new getTotalCount_resultStandardScheme();
      }
    }

    private static class getTotalCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTotalCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTotalCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTotalCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTotalCount_resultTupleScheme getScheme() {
        return new getTotalCount_resultTupleScheme();
      }
    }

    private static class getTotalCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTotalCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTotalCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeAll_args implements org.apache.thrift.TBase<removeAll_args, removeAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAll_args");

    private static final org.apache.thrift.protocol.TField BIGSET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bigsetID", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeAll_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeAll_argsTupleSchemeFactory();

    public long bigsetID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BIGSET_ID((short)1, "bigsetID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BIGSET_ID
            return BIGSET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BIGSETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BIGSET_ID, new org.apache.thrift.meta_data.FieldMetaData("bigsetID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TKey")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAll_args.class, metaDataMap);
    }

    public removeAll_args() {
    }

    public removeAll_args(
      long bigsetID)
    {
      this();
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAll_args(removeAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bigsetID = other.bigsetID;
    }

    public removeAll_args deepCopy() {
      return new removeAll_args(this);
    }

    @Override
    public void clear() {
      setBigsetIDIsSet(false);
      this.bigsetID = 0;
    }

    public long getBigsetID() {
      return this.bigsetID;
    }

    public removeAll_args setBigsetID(long bigsetID) {
      this.bigsetID = bigsetID;
      setBigsetIDIsSet(true);
      return this;
    }

    public void unsetBigsetID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    /** Returns true if field bigsetID is set (has been assigned a value) and false otherwise */
    public boolean isSetBigsetID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIGSETID_ISSET_ID);
    }

    public void setBigsetIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIGSETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BIGSET_ID:
        if (value == null) {
          unsetBigsetID();
        } else {
          setBigsetID((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BIGSET_ID:
        return getBigsetID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BIGSET_ID:
        return isSetBigsetID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAll_args)
        return this.equals((removeAll_args)that);
      return false;
    }

    public boolean equals(removeAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bigsetID = true;
      boolean that_present_bigsetID = true;
      if (this_present_bigsetID || that_present_bigsetID) {
        if (!(this_present_bigsetID && that_present_bigsetID))
          return false;
        if (this.bigsetID != that.bigsetID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bigsetID);

      return hashCode;
    }

    @Override
    public int compareTo(removeAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBigsetID()).compareTo(other.isSetBigsetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigsetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigsetID, other.bigsetID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeAll_args(");
      boolean first = true;

      sb.append("bigsetID:");
      sb.append(this.bigsetID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_argsStandardScheme getScheme() {
        return new removeAll_argsStandardScheme();
      }
    }

    private static class removeAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BIGSET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.bigsetID = iprot.readI64();
                struct.setBigsetIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BIGSET_ID_FIELD_DESC);
        oprot.writeI64(struct.bigsetID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_argsTupleScheme getScheme() {
        return new removeAll_argsTupleScheme();
      }
    }

    private static class removeAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBigsetID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBigsetID()) {
          oprot.writeI64(struct.bigsetID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bigsetID = iprot.readI64();
          struct.setBigsetIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeAll_result implements org.apache.thrift.TBase<removeAll_result, removeAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeAll_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeAll_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAll_result.class, metaDataMap);
    }

    public removeAll_result() {
    }

    public removeAll_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAll_result(removeAll_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public removeAll_result deepCopy() {
      return new removeAll_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public removeAll_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAll_result)
        return this.equals((removeAll_result)that);
      return false;
    }

    public boolean equals(removeAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(removeAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeAll_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_resultStandardScheme getScheme() {
        return new removeAll_resultStandardScheme();
      }
    }

    private static class removeAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_resultTupleScheme getScheme() {
        return new removeAll_resultTupleScheme();
      }
    }

    private static class removeAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
