/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package openstars.storage.keyvalue;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-24")
public class KVPair implements org.apache.thrift.TBase<KVPair, KVPair._Fields>, java.io.Serializable, Cloneable, Comparable<KVPair> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KVPair");

  private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("second", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KVPairStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KVPairTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String first; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String second; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST((short)1, "first"),
    SECOND((short)2, "second");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST
          return FIRST;
        case 2: // SECOND
          return SECOND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "KType")));
    tmpMap.put(_Fields.SECOND, new org.apache.thrift.meta_data.FieldMetaData("second", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "VType")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KVPair.class, metaDataMap);
  }

  public KVPair() {
  }

  public KVPair(
    java.lang.String first,
    java.lang.String second)
  {
    this();
    this.first = first;
    this.second = second;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KVPair(KVPair other) {
    if (other.isSetFirst()) {
      this.first = other.first;
    }
    if (other.isSetSecond()) {
      this.second = other.second;
    }
  }

  public KVPair deepCopy() {
    return new KVPair(this);
  }

  @Override
  public void clear() {
    this.first = null;
    this.second = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFirst() {
    return this.first;
  }

  public KVPair setFirst(@org.apache.thrift.annotation.Nullable java.lang.String first) {
    this.first = first;
    return this;
  }

  public void unsetFirst() {
    this.first = null;
  }

  /** Returns true if field first is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst() {
    return this.first != null;
  }

  public void setFirstIsSet(boolean value) {
    if (!value) {
      this.first = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSecond() {
    return this.second;
  }

  public KVPair setSecond(@org.apache.thrift.annotation.Nullable java.lang.String second) {
    this.second = second;
    return this;
  }

  public void unsetSecond() {
    this.second = null;
  }

  /** Returns true if field second is set (has been assigned a value) and false otherwise */
  public boolean isSetSecond() {
    return this.second != null;
  }

  public void setSecondIsSet(boolean value) {
    if (!value) {
      this.second = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FIRST:
      if (value == null) {
        unsetFirst();
      } else {
        setFirst((java.lang.String)value);
      }
      break;

    case SECOND:
      if (value == null) {
        unsetSecond();
      } else {
        setSecond((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST:
      return getFirst();

    case SECOND:
      return getSecond();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIRST:
      return isSetFirst();
    case SECOND:
      return isSetSecond();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof KVPair)
      return this.equals((KVPair)that);
    return false;
  }

  public boolean equals(KVPair that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_first = true && this.isSetFirst();
    boolean that_present_first = true && that.isSetFirst();
    if (this_present_first || that_present_first) {
      if (!(this_present_first && that_present_first))
        return false;
      if (!this.first.equals(that.first))
        return false;
    }

    boolean this_present_second = true && this.isSetSecond();
    boolean that_present_second = true && that.isSetSecond();
    if (this_present_second || that_present_second) {
      if (!(this_present_second && that_present_second))
        return false;
      if (!this.second.equals(that.second))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFirst()) ? 131071 : 524287);
    if (isSetFirst())
      hashCode = hashCode * 8191 + first.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecond()) ? 131071 : 524287);
    if (isSetSecond())
      hashCode = hashCode * 8191 + second.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(KVPair other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecond()).compareTo(other.isSetSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.second, other.second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("KVPair(");
    boolean first = true;

    sb.append("first:");
    if (this.first == null) {
      sb.append("null");
    } else {
      sb.append(this.first);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("second:");
    if (this.second == null) {
      sb.append("null");
    } else {
      sb.append(this.second);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (first == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'first' was not present! Struct: " + toString());
    }
    if (second == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'second' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KVPairStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KVPairStandardScheme getScheme() {
      return new KVPairStandardScheme();
    }
  }

  private static class KVPairStandardScheme extends org.apache.thrift.scheme.StandardScheme<KVPair> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KVPair struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first = iprot.readString();
              struct.setFirstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.second = iprot.readString();
              struct.setSecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KVPair struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.first != null) {
        oprot.writeFieldBegin(FIRST_FIELD_DESC);
        oprot.writeString(struct.first);
        oprot.writeFieldEnd();
      }
      if (struct.second != null) {
        oprot.writeFieldBegin(SECOND_FIELD_DESC);
        oprot.writeString(struct.second);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KVPairTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public KVPairTupleScheme getScheme() {
      return new KVPairTupleScheme();
    }
  }

  private static class KVPairTupleScheme extends org.apache.thrift.scheme.TupleScheme<KVPair> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KVPair struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.first);
      oprot.writeString(struct.second);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KVPair struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.first = iprot.readString();
      struct.setFirstIsSet(true);
      struct.second = iprot.readString();
      struct.setSecondIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

